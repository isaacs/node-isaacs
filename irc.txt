c(,,)~
 /..\>
turtles come in many shapes and sizes
elsewhere, i may be others.
friend of substack's
one of those node people
yes, that's who i am on earth.
it is a good addition.
IMMA GET SOME PIE OUT THA FRIGE!
w00t!
what does "sage" do?
isaacs's cat is named sage.
FUNCTION YODAWG(){ YODAWG("I HEARD YOU LIKE RECURSION!") }
it's turtles all the way down. http://hypergogue.net/wp-content/uploads/2010/10/turtles-all-the-way-down.jpg
WUT INDEED
withdraws the question.
it's awesome.
:(){:&:};: is way awesomer
and it's also posix compliant
why is everyone always fixated on rm -rf /, though?
and you wanna kick the n00b in the teeth for fun
but i mean, if it's "HAY GUIZE! PASTE ME SOME STUFF AND ILL RUNNIT IMMY SHLEL!"
fork bomb is WAY more trollicious
why rm -rf /?
yeah, assuming you have physical access to the machine
WHOA! A BLUE CAR!
hey
i didn't think i was...
is there some state where i have to supply a rev, but it's been deleted?
oh, wait, i'm dumb.
what should i do if i'm getting a 409 when i PUT, but when i GET, it's a 404?
pebcak
thank you, rnewson
Is there any way to allow non-admin users to access design document actions for system databases?
i'm trying to set up an _update function in my _users db, and getting "forbidden Only admins can access design document actions for system databases."
I've verified that this works as expected when PUTting to a _update function in a non-system database.
Is there any way to allow PUTs to _update functions in system databases?
after all PUTs to *documents* in system databases are fine.
it seems a bit insane to allow that, but not _update functions
hm... i can't actually find the error message in the source at all.  i wonder if iriscouch has some unofficial 1.2?  JasonSmith?
oh, i see, it's wrapped to the next line, that's why my grep wasn't finding it
*change of getting
any change of getting this changed in 1.2.1?  the other workarounds i'm considering are all pretty painful
so it's inconsistent.
haha
awwwww yeah.  https://isaacs-staging.iriscouch.com/foo/org.couchdb.user:test?revs=true
check out the revs
since this is intentionally creating polluted data.
but after that, you can't ever get the rev
right now, you can't update your npm user
yes.
you can only write it the first time
is using secret apis
really, since you can only write to your own _users account that yoer' logged in with anyway, there should be an _update function that works this way by default
since ther'esthis ghost db thing happening
imo, the _users db should have a no-rev-required _update semantics by default, since you can only update your own user record anyway
or from it
public_users is a temporary throwaway thing
but yeah, i think that _users should just work this way by default
like, i can get yours, but the password is missing, and the _rev is not the correct hash of what i'm seeing.  whatever.  it's a user record.
oh, not at all
i hope this experience informs it :)
kewl
looking forward to it.
Hi.  Is there some magic that must be used to programmatically use the /_session api?
I'm hitting it with a POST that looks exactly the same as the one that futon does, but it's giving me a 400 error about bad json
but i'm not posting json, i'm posting application/x-www-form-urlencoded, just like futon does, with the same content-type headers
but i can't seem to figure out where this difference lies.
is couch's header parsing case-sensitive?
and request is clubbing my explicit content-type
that's it
yep.
magic is scary and confusing
thanks for the sanity check everybody :)
that sounds like a bug in request.  if you set a different content type, clearly you know that you're not uploading json.  it should still let you download json
causing strange disturbing feelings.
like those deer in that picture.
CouchDB...
Y U NO PUT _rev ON PUT RESPONSE!?
but the PUT response doesn't include the rev anywhere on a conflict
a HEAD is faster than a GET, but not significantly so, if the data is small.
i just do a ton of gets.
ie, small enough to fit in one packet.
that are unnecessary and silly
yeah, there's workarounds.
Is there something special you have to do when updating a _users doc, other than being logged in?
it works when i use basic auth, but this cookie session token thingie is failing when i try to update the password.
wondering if i'm missing some obvious step
it's working through futon, but when i try to do the same thing programmatically, i get { error: 'case_clause', reason: '{[]}' }
it sounds like i'm not doing anything obviously wrong.  i'll write a simpler test.  one sec.
'64a8068802a656924c1d651ce0eba1eeb206c4a6'
> crypto.createHash('sha1').update('8f51ba8b2477bbd13aa111b41e669ba4' + 'asdfasdf').digest('hex')
is there some requirement about the shape of the salt string?
or, do you have to get a new session token if the password/hash change?
it's password + salt, not salt + password
oh, wait a minute.  yeah, i'm dumb.
and it looks like changing it does indeed invalidate sessions for that user.
:)
niiiice.  k, now it's working.
Are users allowed to DELETE their own _users record?
Apparently I can only delete it as an admin.
-u test-user-signup:signup-test
the GET /_users/<userid> would fail if your'e not logged in as that user or a server admin
but DELETE returns "not found"
so.. PUT { _deleted: true } on it?
that seems so wrong.
the validate_doc_update returns without throwing in the first few lines if userCtx.name === doc.name
if it was a conflict it'd be a 409
if it was a vdu function, it'd be a 403
it's a 404
it's not a 409 or a 403
this is the response you get when you look up some other users's _users record.
aha!!
apparently.
because an admin can just DELETE it via http
but i don't think so
when I just slapped "_deleted":true on the otherwise-unchanged document, it was able to delete it
you have to PUT, but you need more than just _id, _rev, and _dleeted
i would start looking at the plaec where it returns a 404 from the _users record even though the doc is there: in the new system-db stuff.
haha
oh yeah!!
and it'll do the PUT-as-DELETE
yeah, so... i'll just add a 'deleteAccount' method to couch-login
yeah, so, i think this is probably a bug, but not a critical one.
and now the PUT with type:"user",roles:[],_deleted:true,_id:...,_rev:... and it deletes it
same result every time
the curl is just to show the example
and then set the group_level appropriately
doesn't understand the question.
;P
from my experience, this is couch's dirty little ghetto.  but, it is also the source of great powerful magic.
understood the question, is replying snarkily.
it's really not well explained how to actually use this.
ok, i've gotta be up too early to keep doing this.  g'nite heroes.
so it's worth poking around
Is there a way to do a lightly customized site-specific search using duckduckgo?
where's the place to post feature requests for ddg?  i'm going to use it for the npm site search, because i'm really impressed with it, but here are a few things that'll probably make the experience a lot slicker.
it's like google used to be
just search, and not a bunch of bs
you know?
hi
i saw your .
but also buried the error.  so i wanted to get your eyes on it first.
the last time this happened, dude un-published his whole package, and then re-published from each tag in git, and that fixed the glitch
consistent
for this one package
hahahh
i ahven't been able to find time to work on that anyway
oh, of course, go nuts.
oh, i dunno
dude, you're not an admin?
hahahah
the validator should just let you if you have server admin or db admin privs
but for npm, admins are all-powerful
it still validates a little i think, but hte user-auth stuff is all skipped for admins
since "admin" is usually me
yeah
i could also just add you as a maintainer, that'd be easiest.
i see
don't change his password, that's gonna be a hassle (unless you already did, in which case, whatever.
oh,ok
er,  "{bad_utf8_character_code}"
Hi.  I just pointed a vhost in isaacs-staging.iriscouch.com to respond to staging.npmjs.org/, but it doesn't seem to be be responding
The DNS says: CNAME staging.npmjs.org isaacs.iriscouch.com 300
in the couchdb settings, I have: vhosts 	staging.npmjs.org 	/registry/_design/app/_rewrite
hi
 /nick mcoolin
oh, kewl
something with some personality :)
try that ^
you should wear a more exciting nick.
your name is so generic.
classy :)
much better!
anything going on?
awesome
curl -i -X PUT -H accept:application/json -H content-type:application/json -d '{"_id":"c291c","foo":"bar"}' http://isaacs-staging.iriscouch.com/foo/_design/foo/_update/foo/c291c?rev=2-3491085696415a565848a3b0f8886db6
results in 409
ohhh, i got it.  have to pull out the doc._revisions and do some poking.
npm ERR! Error: forbidden Only admins can access design document actions for system databases.: -/user/org.couchdb.user:test
yes, apparently one may not PUT to a _update function in a system database.
ah, just got your email
k
*shape
hahah
"Node is great for us cuz we loves da real time async makes it fast and shit!" – Jason Smith, Chief Monkey Surgeon, IrisCouch
git clone http://nodejs.org/industry-gen/.git
I'm getting a few socket hangups as well
kewl
thanks
but the website and v0.8 are consuming 200% of my cpu right now
oh, i mean, if joyent were doing such a thing which they may or may not be doing, maybe now or not ever.
interesting
what's with the glowey : thing
 is a test of what it looks like when text wraps 
is is a test of what it looks like when text wraps this is a test of what it looks like when text wraps this is a test of what it looks like when text wraps this is a test of what it looks like when text wraps this is a test of what it looks like when text wraps this is a test of what it looks like when text wraps this is a test of what it looks like when text wraps this is a test of what it looks like when text wraps this
this is a test of what it looks like when text wraps this is a test of what it looks like when text wraps this is a test of what it looks like when text wraps this is a test of what it looks like when text wraps this is a test of what it looks like when text wraps 
this is a test of what it looks like when text wraps this is a test of what it looks like when text wraps this is a test of what it looks like when text wraps this is a test of what it looks like when text wraps this is a test of what it looks like when text wraps this is a test of what it looks like when text wraps this is a test of what it looks like when text wraps this is a test of what it looks like when text wraps th
eats a pickle
hello
is showing marisa how irc works
this is what happens when i'm saying something
we need to roll back the most recent up date to no.de
weird...
at deploy time?
do this: /opt/nodejs/v0.6/bin/node -v
ok...
so, when is npm printing that message?
wild.
oh, is there something in /opt/nodejs/bin/npm?
it only proxies to :80
just a sec
Server is READY!
[node@document ~/node-service/releases/2012-01-30T17-37-22.382231513]$ node_modules/.bin/coffee server.coffee
listening
✗ node-growl only supports Darwin and Linux users
:)
indeed.
seems to be the issue, then
ha
so, npm doesn't know what to do
}
because there's no server.js, and no scripts.start
np
ok, back to fixing this other bug (mostly done, just have to push live, but wan'ted to make sure there wasn't some other thing with your thing)
sorry, forgot to mention that
then sudo should Just Work
hi
monokrome elijah-mbp: you talking about no.de or nodejs?
:)
we couldn't kill it if we tried (and we're trying to do the opposite)
yeah, nodejs has momentum now.
foo.com will point to foo.no.de
none of that is officially supported, so YMMV :)
probably best to just get a proper zone, rather than a freebie
and npm 1.1.2
btw, that's kind of old.
so strange
we're up to 0.6.11 nowadays
(to answer your question, no, i'm pretty sure git:// urls aren't supported in that version)
i think it was like 1.1.13 or something where it showed up
or you might be doing it wrong :)
and git is clearly installed
hm, yeah, that should be fine
what's the actual git url?  note that it MUST start with git:// or git+ssh:// or git+https?://
what's the error output?  gist it?
pong
it *should* be as simple as ./configure --dest-cpu=x64
lemme try on master...
and, yep, i'm not on an x64 machine :)
hm... yep.  does not work
so that might explain it
let me ask my more sunos-savvy colleagues 
ryah, piscisaureus_: ok with you guys to land the zlib cleanups?  (will squash into one)
er, no, the 3rd
probably more atomic than necessary.
i'll squash and land on v0.6 then.
keepalive, debugger client, and full-http-response tests all failing on os x
same before and after the zlib patch, though.  i'm landing it.
hooray, i fixed the build
because the failure had nothing to do with zlib
that's gotta be some kind of race or something
;)
anyway, i'm out.
haha
it's being kinda leaky still anyway.
kewl
need to figure out
nice :)
we fixed those bugs for nothing!!??!?
oh, that
soon, i think
this week or next week, last i heard.
awesome.  also, i'm not sure it's decided, but we might abandon the even/odd thing, in favor of just branching, and whatever the most recent branch is is the "stable api" branch
even when 0.7.10 is the most stable version of node ever.
probably no one's going to use 0.7, since it's odd ):
and then 0.8 will come out, and be different, and unstable, and they'll all be upset.
oh well.
i need another round of npm testing on it, too
yep.  good move :)
further api experimentation will be done on master.
i think v8 is a good model to follow here.
once 0.7 branches, it'll be locked.
right.
the "unstable api" will be master.
and we'll need to just release a lot more often.
basically, yes.
like, every month or 6 weeks or so.
each release should correlate to a new drop of v8
once that gets the stamp of approval, we'll move forward on 0.6.8
and then it'll be easier to merge into master and put the zlib reset on top of that.  sound reasonable?
since they dont' really change anything.
has bad c++ styles
i dunno
k
i'll review today
thanks
any idea when it'll land?
can we port into 3.6?
great.
orly!
great, glad to see that's moving
is that gonna land in v8 e.6?
oic, ec lgtm'ed it with 2 minor issues, looks like
ok, cool
has been at heroku waza
i dunno
bam.
i'm not sure how it could be more specific.
 good morning
ErikCorryV8, indutny: is that going to land in 3.6, or would you recommend we just float it?
ah, ok.
i don't mean to be a pest, but people are pestering me about it, so i'm eager to release a build which can have the dos fixed.
kewl, thanks for the update.
agreed
i wouldn't float without v8 core-team blessing.  using the official v8 is always better.
yeah
 branch
not that that's correct behavior, just curious.
that's odd.
weird
yeah
and we're both interpreting it wrong
but yeha, something is weird htere.
could be that utf is weird.
oh, i didn't say that, necessarily ;)
it's utf, not UCS?
oh, ok
oh, right
anyone have any objection to this? https://skitch.com/isaacschlueter/g2kbg/docs-button
since that's the main thin
thing
yo
:D
any ETA?
hahah
i mean, "i see" in teh sense of "i understand what you have said, and accept it"
i see.
oh, ok
(tomorrow, next week, next month...)
right
heh
isn't it like 5pm there?
well, friday is almost over in Europe, right?
asia somewhere?
yikes
that's awesome.  with you in omsk, and koichi in japan, nodejs has 24 hour core team activity :)
i guess russia is just really really big.
stretches from europe to north america
because request doesn't do any kind of tunneling, it just juggles the Authorization vs ProxyAuthorization headers, and puts the full registry url in the request path.
ie, basic simple http proxying.
it just dies very badly.
i haven't looked into the issue deeply.
if not, it should be a fix to request, imo.
if so, what's the minimal change we could make to unblock it?
is there something preventing doing this outside of node-core?
the API for proxying that request exposes IS really nice.
yes, http is first-class, and http->https proxying is very obnoxious.  but if we can get away with it, i'd prefer to do it in request first, experiment a bit, see what works and what doesn't, and then have a conversation about which bits to pull into core.
you just do { "proxy": "http://me@proxy.com:1234" }
in teh config object
maybe we could eventually pull that kind of API into node-core for http.request() and https.request()
most people doing a lot of http client work use request already anyhow
we might get it done in request, and then go, "oh, actually, if you want this, just use this userland lib"
AndreasMadsen, bnoordhuis: it looks like https://github.com/AndreasMadsen/node-1/commit/0f61378b81239988c6c8647b0f13143b4ff5b1e9 adds api
hrm... why do we need this?
(sorry, coming in halfway thorugh, i know)
+1 on the rest of it
i'm not opposed to it in principle.  just that we have to be very strict about the changes we add in 0.6
if it's really required, they should use spawn
we should not change the exposed api, even things that are labeled "internal"
child.stdout.pipe(logger).pipe(process.stdout)
ok, so log from stderr, or use spawn and pipe the stdout and stdin streams manually
i don't get it.
ok...
so... don't log it?
yeah
you mean, written to the paren'ts stdout stream?
i don't get what's not possible without adding internal api, and then telling people to use the internal undocumented api to do what they want.
the problem is, even though it's arguably a good change, we're just adding roadblocks that prevent people from upgrading in the future.
because, what's going to happen is, when they want to upgrade to 0.7 or 0.8, it'll be a much bigger hassle.  or worse, if in 0.6.9, we find some issue, and change this api thiking it's safe because it's internal, now the "stable" branch isn't stable any more.
i've been the offender with npm, many, many, many times.
internal api's should not be used outside of node-core.
it causes huge problems.
that argument is invalid.
(and they're right!)
:)
and then their stuff breaks, and they're like, "But you said this was the stable branch!"
but like, from 0.1 on up, every time someone uses an internal api, it's a huge pita later, because we change it.
and no one actually can live up to that, even though we think we can.
anyway... rant rant rant...
if you use an internal API, it should be with the understanding that it will disappear at any moment, and there will be no replacement.
but this isn't enough justification to add stderrStream and stdoutStream
the rest of the changes are great.  lgtm.
haha
i'd be +1 on adding it to master, along with docs and tests, and promoting it to a proper api, if we think it's the best way to address the issue.
if it's actually the best api for the problem, and it's a feature we want to add.
but of course, that can't can't be in 0.6, because it's adding stuff.
i should clarify: the default answer for master is "hm... i don't know... do we really need this?"  the default answer for 0.6 is "absolutely not"
ah, hahah
link?
which issue is that?
i see.
it's actually not adding api.
it's just adding a default value.
then your patch +1 lgtm etc etc
which otherwise would be "undefined" rather than "null"
and i need to smack ryah_ for suggesting that people use internal apis
yes, it should get a default value, and that doesn't add api.  i was misreading it.
oh, openssl?
hi
reading scrollback
because, *every* nodejs server is vulnerable to this, whether they do querystring.parse() or not.
the bigger issue that querystring.parse is the http header object.
also, this means that we will need to get all users to be very careful about using JSON.parse
because we've all been saying for ages that it's the "safe" way to do it.
if we now need to say that JSON.parse, even on relatively small strings of data, is unsafe, then that's a big change in the message.
right or wrong, the fact of the world today is that people run JSON.parse on user-supplied data all the time.
if it's for some reason not fixable in v8 itself, then of course we'll address this in node.
from where i'm sitting, as a user of v8 rather than a v8 maintainer or developer, that would be disappointing, but we'd deal.
query string and http headers are already very limited in size.
i mean, it's not arbitrary.
that's a problem.
then an attacker comes along and makes it take an OOM more time and cpu to parse.
you can test pushing it to its limits without collisions, and it will perform fine.
not "outof memory"
oom = order of magnitude
sorry, ambiguous acronyms :)
:)
awesome!
so... you said that you're going to fix the hash collision issue for 3.6, or no?  i'm sorry, i'm a little unsure what we're actually discussing.
anyway, i believe that apache limits header size to 8kb by default, and iis to 16 or so.
ok, 1000 is probably fine then.
i'll lgtm it, and then you can master push it :)
i'm still kind of studying it
just a sec
k, lgtm for master.  not sure about v0.6
yikes
in runtime?
sure
gotta run for #nodeup podcast
kewl, lgtm
ok
same commit, even
then it's easier to roll back if necessary
hi
i'm here kinda
push to master, plz.
then you may sleep :)
sure
but same with sep/eq
but that can come later, i guess.
if anyone cares :)
yeah
agreed.
may as well just pass in parse(string, options)
meh
minor detail
yeah
kewl
whatever you guys all decide on that, i'll need to do some npm stuff with it
hello
_+1
yeah
and we can fall back to "compile on install" if the platform isn't pre-built
that's better at install-time, since .node files can get kinda big, and then you only have one, rather than 4 or whatever.
then we can walk through and compile them in a build farm or something, as a separate later enhancement.
6339 pkgs
8568045680
8gb
but we will probably have to look into putting the tarballs elsewhere and relying on just keeping the sha's and urls in the db.
i believe so.
the hardest part is uploading.  the client is already agnostic, and just gets the tarball location from the doc.
"offline" <-- i mean, on a cron somewhere.
but, we could always keep the same exact api, and "just" have something that plucks the attachments off and puts them elsewhere offline.
and you're going to build it for your arch, because that's how it works.
if you git clone, you have to build it anyhow
meh
would that really be nice?
*building* them is still a pain.
and pretty much all compiled addons wrap the binding in a js layer anyway
since that makes it a lot easier to provide a friendlier api
the more popular ones do
there's only a few hundred, after all.
right
the only reason it matters is that, for the things that need a compiled addon, you really can't get around it very easily.
i'm already reworking the build-on-publish in npm to do prebuilt binaries per-platform.
let's not do this.
yeah.
and users can use folders, or write their own makefiles and js wrappers today
if it's prebuilt for that platform, it'll get that one
well, it'll check for a prebuilt version.
yes.
like today
ryah_ ++
that require compilation?
what libs are platform agnostic?
 { "//" : "this is a comment." }
just JSON.parse it, and throw if it fails.
no comments.
noooo!!
/JSONOPTIONS=singlequote,map=function (n) { return n + 100 }
just use extra keys if you really want it.
the problem with allowing comments in json is that people do idiotic shit with them.
or worse: /*IF_NOT_IE*/ "this field is not for ie" : "foooo", /*ENDIF*/
json
the nice thing about "//" is that it's not ifdefable.
yeah, the "//" field is the way that you put comments in js
#ifdef
before the spec was amended to disallow comments.
ifdef-able.
(a npm package that lets you write a package.coffee, because coffee-scripters are so fascinated by their language that they can't bear to write json)
not to mention the courier madness.
on sec...
the publish-bin stuff?
which feature?
1. it might not work.  it's been feature-flagged out for a while now
2. npm help config, search for "bindist" and "publish-bin"
3. grep in the code for those two things, and you'll see where they're used.
that describes how it's supposed to work.
<nodever>-<platform>-<arch>
really, just 0.6-darwin-x64 is plenty
i mean, that's kind of a separate thing
no need there.
no, because whatever it's published with is what it'll work with.
that should be fine.
0.7.2-linux-ia32
and, if we're gonna continue with the even/odd thing, maybe either skip it for unstable versions, or include all three parts.
etc.
the only thing that matters for the compilation itself is ABI
vs just 0.6-linux-ia32 for a stable version
so, update bindist default value, then `npm config set publish-bin true` on your system, then see what breaks.
i have a staging server you can publish to if you dont' want to use the public registry and don't have a private one on localhost.  otherwise, feel free to build a little test package and publish/unpublish it as much as you want.
i do that as a normal part of the npm tests anyway.
npm view <pkgname> dist <-- that will show you what's in the dist hash
perfect.
(re udb set multicast loop and set multicast ttl)
ryah_, igorzi: feel free to weigh in as well ^
github says it won't apply cleanly, but github is kind of an idiot sometimes.
if we could get it in 0.7, that'd be awesome.
ok, cool
it looks like the goal was to get it into 0.6, but it didn't quite make the cut.  oh well.
it's just pure js, no lowlevel stuff, but it's a pretty nice api for doing timeouts and cancelling.
could maybe provide some inspiration.
for sure
i'm not sure how you'd be able to get around some of the cb-wrapping to do what he's after, though.
it'd be interesting to maybe make it a goal to let him write toss with less ceremony.
unless we go back to c++ eventemitters which... ugh.  no thakns.
right
you really only need to capture the functions that go into the event loop.
EE should be pure JS
ew ew ew
that's kind of gross.
forget emitted evetns.
only callbacks.
right
what if we said that domains only cover things that go into the C++ layer?
because the timer would be in the domain.
here's a thought... what if a domain object had a setTimeout and setInterval method?
i see.
and the "global" ones would all use the same domain?
nevermind, that's dumb.
but you always call setTimeout from the global object
domain(function (d) { files.forEach(function (f) { fs.readFile(f, function (er, data) { if (er) return d.cancel(); setTimeout(...) }) }) })
if that setTimeout is a different domain than the fs.readFile, then it's surprising
so you need to always have some sense of the "currentDomain" on the global
(or, at least, somewhere accessible by setTimeout)
and i guess it could just do currentDomain.setTimeout() instead...
makes some popcorn...
1. a timeout
2. doing IO
every time you "escape" the stack, you're doing so by one of two ways:
let's forget threads for now
ok, 3 ways ;)
each tick of the event loop has exactly one domain associated with it
exactly
my point is, we don't have to wrap EE, because events are either pure JS (and blocking, so never escape the domain) or go through an IO call, in which case, they're either a new child domain, or inherit the parent, but we can trap it there.
like?
can we just say that domains don't share timers?
or have the timer store the cb and domain, as well as the cb?
but still, it could be a bit like a nextTick into that other domain
oh, but you wanna pass an actual object, not a serialized thing.
or something similarly restrictive.
if connection.doSomething() does so IO, does it happen in connection's domain, or in otherDomain?
that gets hairy.
var connection = getConnection(); otherDomain.enter(function () { connection.doSomething() })
i'm happy to get us both simmering on this
just wanna make sure i'm there with you, and not doing something unhelpful :)
i think pquerna had some thoughts on this, at least, he seemed skeptical of domains' feasibility.
even if those other things have references to connections to the db.
what you really want is to have the db, template/fs stuff, and http request (let's say) to all be siblings.
and a failure (or any thrown error) should be catchable, and result in a 500 response
but if a request requires a web service request to some backend server, it should be under teh same domain as the initial request.
in my mind, they nest like subshells.
yeah, you definitely do not want a lot of api surface, i agree.
and if you have a reference to something in a sibling, you can do stuff with it, but then we have almost like a shared-memory issue
and if you kill the parent, it kills all the children.
not quite as bad, but still kind of sticky
that kind of sucks then, right?
unless we have to say that the shared db connection is a parent domain of the http request domains
well... i'd like to say that the function would be run in whatever domain was active at the time that it got called.
but then if you have 10 requests in progress, you could be all kinds of awful.
the alternative is that functions run in the domain where they're created, but now we have to hijack the Function thing in v8
and then provide a cb-wrapping approach as a way to get out of that
i think we could say that EE's are tied to the domain where they're created.
or, wrapping cb's
i think at least then you could be explicit about it, and the default could be reasonable.
ie, you could like bind a function to a domain by wrapping it
1 isn't just expensive.  it's also annoying.
ee.domain.on("end", function () { ... })
what about something like that?
ee.on("close", ee.domain.end.bind(ee.domain))
then the domain could be ended by the EE emitting "close", or by an error, or by timing out, etc.
when it ends, all the EE's associated with it are neutralized, so they never emit anything again
how would you detect if domainA "interacted" with domainB?
am i grokking that properly?
i see.  so, in that case, it says "ee.domain !== the current domain, so this is a link"
that's a lot of api
yeah
yeah
yes
or does more go into it than that?
right, but i mean, we could just kinda nudge things into place to build it, right?
or would it require changing our actual repo folders and stuff?
yeah
it'd be a binary, though, wouldn't it?
next obvious step.
so it's just a matter of building it, making the proper folder whatevers, writing like a dozen random config files, etc.
that seems like something we should do.
uh oh...
god, linux is so awful...
debs
is there maybe a way that we could at least make it easier for users to build their own yum/rpm's?
like, "On the architecture you want to support, run `make deb`, and it'll make a deb for that arch, and you can use it in your organization"
right
not that they can't now, but it'd be less tedious for them to
or we could just recruit chris lea to do it for us :)
then at least we could empower travis and other companies to do it themselves.
hm, looks like he hasn't updated it since 0.6.2
wonder if he's over it, or on vacation or something.
but yeah, it looks like he builds a separate one for each version of ubuntu
gah, that's so painful.
yeah
jsconf tickets go on sale in 5 minutes.
;P
is cmd-R-ing
lol, windows user
us
i clicked submit at like 12:00:02
sold out already?
wtf
:)
gotta get into the non-early-bird, i guess
i'll be at node conf
or try to, anyway
probably speaking or somethign
yep
maybe talk about how libuv makes node's awesomeness portable.
the internal design or something
you should give a talk.
if i'm going to travel 12 hours somewhere, i want to stay for at least 2 weeks, otherwise it's not worth the headaches.
maybe overselling a little...
srsly
you should, though.
just have to find something that's boring to you, but not to other people.
have fun
for doing the patch :)
heading in soon, though
but i can't seem to access it
i'll ask around
(or at least, not without completely restructuring the app from the ground up)
i mean, we're not adding a function, we're just making it not throw..
same with the udp stuf.
so, it sounds like the reasonable course of action would be to a) remove the assert in 0.6, and b) replac listenFD with a cleaner api in 0.7
whether or not this is "new api" is somewhat debatable.
signal from the child process.
yo
Test, please: http://nodejs.org/dist/v0.6.8-RC/node-v0.6.8-RC1.tar.gz
yep, i'm seeing similiar results.
alright, pulling the trigger on this.
same old miscreants.
retweet every tweet! https://twitter.com/#!/nodejs/status/160210072805453824
man, we gotta fix whatever race condition makes node's travis builds succeed *half* the time
it must work.
yeah, the stuff that fell on the floor.
everyone's too busy.
yeah.  we need more core devs.
d'oh.
it's too trusting.
not a liar.  just an idiot.
oh, ok
yeah, that green bar is a bit of a liar sometimes.
hm... i thought we already sort of hacked around that in 0.6.7
but if it's going to be tricky to backport, i'd say skip it.
let's put the good fixes in 0.7, do the minimum possible for 0.6
sure
we do need to get udp in there, and at least unblock listenFD, but hopefully 0.6.9 would be the last one.  (of course, we said that about 0.4.9, too)
and much cleaner.
but also way too big a change for a stable branch.
every part of that makes my alarms start going off.
sweet, thanks.
it looked like just listenFD was crippled.
for 0.7, then, should we have Server.listenHandle(handle), and just try to replace all fd's with handles everywhere?
hm.  ok.
i mean, that seems conceptually cleaner.
ok..
so, fs.open() gives you a handle, fs.fchown takes a handle, etc, etc.
.oO( maybe node needs some interns... )
but also sounds like a lot of tedious work :)
yeah
like i said, you get weird behavior a lot of the time.
but it kind of tries to work.
in 0.4, anyway.
in the 0.2 days there was some npm thing i remember having to work around using stupid tricks like that.
sure.
that's where the --outfd and --logfd arguments came from originally.
but anyway... yeah, we need to support the systemd and child.sendFD/server.listenFD use cases in a good way.
supporting them in a hacky way for 0.6 is fine.
or requiring a binary addon to do it.
i mean, except by opening a file, i suppose.
but no way to get an fd to anything that you'd be able to listen on.
i mean, it's very rarely going to be larger than 2^53-1 or whatever
i was a little surprised the first time i saw node just gives you a straight-up Number for that.
yeah
right
unless you keep opening them, but the os will nuke you way before then
but yeah, otherwise we have like (2^64 - 2^53) time bombs
which is kind of a lot
0.6 is a lot like 0.2 in some ways.
but cross-platform
i hope that 0.8 will be more like 0.4
yeah
:)
maybe 0.16 will be 1.0
so we don't have just an even-odd stability cycle, we have a %2/%4 cycle
yeah
awesome.
oh, baller.
ok, i didn't realize that
yeah, let's not move anything around then.
and whatever other small bug fixes we have lying about.
ok, then it's just udp, really.
if anyone wants to see *every* change they can run git log themselves.
a lot of users were complaining about 0.6's fs.stat being super slow on windows, so omitting that was a significant drop.
changing the changelog fixes the build!
hooray!
race conditions in tests make every CI build exciting.
oh, heh
ftfy
yeah, the topic was causing a syntax error for me.
you have no idea.
but, if it can't go, then it belongs on fs.
maybe put a "path.exists has been moved to fs.exists" deprecation thingie
also, there's a serious problem with it:
but the thing *does* exist
if you try to stat something that you don't have permission to look at, then it fails.
really, it should return true unless there's an error AND the error.code === "ENOENT"
:)
but, just move it for now.
dont' change semantics.
even though they're wrong.
knows when he's in the minority
since it's a different issue.
you'll have a +1 from me, but i don't use that function ever, so i'm not sure i should get a vote :)
kk.
great
*kewl
:)
close the laptop! :)
go have fun, man!!
i'm off for dinner and weekend.
kel
if you'd rather drink or sleep or something :)
hahah, good luck on that one
it's the sabbath.
sorry, i can't reveiw patches today
(few atheists take advantage of the fact that we can basically make up our own religious rules any time we want.)
need to push out 0.7.1
yeah, i'm gonna merge 0.6 into master tomorrow ("tonight" for you, i guess)
oh, just this fix, or everything?
ok, awesome :)
what's -X patience?
i usually just get the conflicts, and painstakingly learn about each change
oh, nice
sometimes it takes a big merge conflict to get you to understand the program you're maintaining :)
which is good too.
yikes
good morning
like 12 hours
nono, that's evening pacific time
so, between now and nodeup live, my goal is to finish up the doc/website reskin and get that live, and release 0.7.1.
but the docs and stuff are much nicer.
kewl
neat :)
still a few pixels to push around, but here's the general idea:
comments
i have strong feelings about comment.
i think the content changes especially that you have here should be pulled into the main node repo
kewl
cool
i've gotten bit by that in the past, at yahoo.
the tricky thing about large-scale changes to docs is that you really need someone close to the project to either do it, or read every word and check it.
yep
another thought that occurs to me, having been involved in this reskin... it's WAY too hard to do right now.
i'd like to get to a single CSS file and set of images that can be used by the blog, api docs, and website, and potentially also use it for npm modules.
our html stuff is a mess in core.
but right now it's just a huge mess of hacks.
matt has done a great job of wading in and getting it most of the way there, but there's always like a million little edge cases to watch out for, because it's had so much surgery
well, restructuring doesn't touch the markdown content.
yeah
but yeah, if you guys are messing with the doctool, then that'll collide
it's mostly just the template and css files.
the troublesome thing is that doc/api_assets/style.css and doc/pipe.css are *almost* the same, except for like a pixel here and a pixel there, so any changes are not portable between them
i think we should add `jslint` and `cpplint` to our `test-all` target.
it'll be painful at first, but it'd be nice to be able to actually claim that everything is consistent.  i think we don't notice problems because we don't run those as often.
but we need to make linting a part of our routine.
it's ok to take time, and even to just say 0.6 isn't getting them.
and this should happen sometime after 0.6 is declared dead.
treat it as a failing test.
we should have one patch that lints everything, and never again accept a patch that breaks lint.
well, if it's jsut one or to lines, sure, whatever.
i don't want 100 patches from 100 different people that each fix one tiny lint nit.
well.. that's something that has to chagne.
AndreasMadsen, indutny: we need to get the http leak and dgram fixes into 0.7
it's preventing joyent from upgrading cloud analytics to 0.6
0.7.1 should get that fix.
so, we ought to not let cluster be a blocker.
we can cherry-pick around it, or exclude those patches from the merge, that's fine.
but it looks like a simple thing.  probably indutny just made the wrong choice in the conflict.  nothing abnormally awful :)
multicast and ttl
it does make a lot of clutter.
so, let's stop linting 0.6, except for making sure that we don't *add* problems
so, reviewing this patch, i'm beginning to see somewhat the wisdom of bnoordhuis's "no patches just for lint" idea.
but, ideally, after today's fixes, and then the doc update, 0.6 won't have much more to offer us anyway very soon.
otherwise it'll just be needless merge conflicts.
then, once 0.6 is put to bed (hopefully this week, we'll know by next week for sure), then do one big push to lint the  hell out of master.
still reviewing..  almost don.e
ship it
yes, lgtm
nvm
oh, heh
thanks, indutny
but, they have benefits as well.
i think once we put 0.6 to bed, we should just bite the bullet and make it a policy moving forward.  one big commit to lint everything, then never again accept a linty patch
yeah
./kick mmalecki
: you guys are jerks.
;P
the second most important thing is consistency.
it's more about a perception of making node a solid and stable platform.
linting isn't for you or me.  you know my feelings about style.
even though, of course, that's the only sane answer.
it's not convincing to people who eat the fud.
i just don't want to do it in 0.6, or in a way that's going to just be a mess of conflicts the next time we merge.
or have 100 "lint" commits all over the place.
plus, moving forward, consistency does tend to increase readability
ok.
or maybe just to the test target.
so, my plan is, after 0.7.2, but before 0.7.4, one commit to lint them all, and we add jslint and cpplint to our test-all make target
:)
and never ever discuss this again.
part of the point is that style is so distracting, too.
it's like naming "node_modules".  like, no, you can't call it "vendor" or "deps" or whatever else.  we're picking a name that's blessed.  no one likes it.  eat your vegetables and shut up.
heading into sf, i'll be back in a little bit
not doc content, just style
:)
docs *always* fix the build.
ok, last chance before pushing live, anyone wanna try to find some bugs?
but it is on nodejs.org
note that the links don't work, since it's not in the root on static.izs.me
click "download"
what about the docs page?
k, i'm gonna push it live.
kewl
i helped make the pixels on the webpage match the pixels on the image, but even that was mostly matt fitzsimmons.
let's not start bikeshedding the design.
or at least, don't complain to me about the design :)
anyone see anything missing? https://gist.github.com/ce6bc4f8e865c663c7e0
yeah, i dind't mention the changes that will already covered in 0.6 changelogs.
;P
don't make excuses!
it's not a big deal in this case.
piscisaureus__--
*reviewed
fair enough.
here, you can have your beer back:
piscisaureus__++
piscisaureus__++
test please: http://nodejs.org/dist/v0.7.1/node-v0.7.1-RC0.tar.gz
(building windows now)
windows build failing: https://gist.github.com/1666423 
s/<interface/iface/g seems to have fixed it
still a jillion yellow warnings, but that's normal
alright, that compiles.  lemme make a commit for that and have you review it.
k, moving forward...
lol
piscisaureus, ryah_: review? https://github.com/isaacs/node/commits/v0.7.1-release
arg, floating patches is so painful.
i wonder what we could do to get v8 to switch to git.
it's very easy to do with git and git
svn and git makes my techniques useless.
i'll get that going soon.
k.
any idea why the gyp build decides it needs to rebuild the binary to create the tarball?
`make node node-v0.7.1.tar.gz` builds node twice
seems wrong.
hm... now it worked...
test, plz: http://nodejs.org/dist/v0.7.1/node-v0.7.1-RC2.tar.gz
same on linux
seems to build fine on solaris and windows
tests fail predictably.
yep
:)
if i don't, i'll tell him it's because he has angered you.
if i tip the bartender, i'll tell him "This buck is from Bert."
you could just move here..
you know...
is that some kind of immigration thing?
uscis?
citizenship and immigration are so outdated.
fucking nazis.
anyone should be able to just go anywhere.
that doesn't sound fun.
SF is about as arctic as i can tolerate.
i don't like being places where night time is cold enough to kill you.
in the winter at night?
that's like a refrigerator.
yeah, that's way way way too cold.
if i could move silicon valley to san diego, that'd be ideal.
never too hot, never too cold.
and people bitch like there's no tomorrow for Gray May and June Gloom.
it's like beautiful springtime 10 months, then slightly cloudy for 2 months.
for a second i thought you were calling me "son"
you seemed so paternal.
whoops, forgot to push that earlier
hahah, that's rad
you don't have to agree with which way is better.  just don't lie to people, that's all.
hello
good morning
anyone got anything for 0.6?
:)
it's too problematic.  just use fs.stat if you care that much.
ok, too many issues with it.  closing that pull req.
hm... zlib is definitely still leaky.
that sucks.
$ ./node_g --debug-brk z.js
Failed to open socket on port 5858, waiting 1000 ms before retrying
Failed to open socket on port 5858, waiting 1000 ms before retrying
Failed to open socket on port 5858, waiting 1000 ms before retrying
^C
debugger listening on port 5858
(or just ignore it and work around until someone else complains...)
ahhhh
we should try to figure out a way to detect and prevent that somehow.
yeah, killall node brings it back to lief.
piscisaureus_, igorzi: yeah, they managed to figure out how to compile all kinds of stuff on windows that only has wscript files.
and vb instead of js
crieds
you dont' have to talk about me like i'm not here.
i know you!
thanks
when riak shot itself in the face repeatedly.
:)
:)
that's the only test i've got atm.  nothing that can be run in make test yet.
cc igorzi ^
since there is one microsoft employee and 2 cloud9 employees in the group of active core committers, i suggest you guys figure it out :)
i mean, if it comes to blows
slowly, too, which is the worse :)
0.6
test-dgram-multicast-setTTL test-dgram-send-error test-dgram-multicast-multi-process etc.
i just did a distclean, it's making all again now
i'm wondering if i'm insane and forgetting something
right
yeah
i'll let you know in a bit if it's still busted after rebuilding.  thanks!
wanted to know quickly if this is a known thing, though, or something to be concerned about.
yeah, compiling v8 even
we cannot release 0.6.9 wihtout that dgram stuff working.  that's what everyone's excited about.
which is very exciting.
yeah, i saw that
what's that?
what behavior does it change, and why does it have to be there?
yeah, that seemed a bit odd.
after distclean and makeall, test/simple/test-dgram-broadcast-multi-process.js still fails
$ ./node test/simple/test-dgram-broadcast-multi-process.js 
pingpong and udp4 work.  the others fail
test/simple/test-dgram-multicast-multi-process.js throws 3 EBADFs
test/simple/test-dgram-multicast-setTTL.js also EBADF
oh, blessings indeed.
but... this seems kind of weird.  how was it done in 0.4?
but how did it work on osx on 0.4, i mean
i didn't think we had to SO_REUSEADDR for dgram before, did we?
if SO_REUSEADDR doesn't apply..
oh, ok
awesome.
simple/test-regress-GH-1697 is throwing pipes at me
works on mac, though
k
reading ^ now
#define SOREUSEPORT SO_REUSEADDR
#endif
#ifndef SO_REUSEPORT
would that solve our issue?
well, i mean... we're well into the realm of fucking our "no api" promises.
i don't think failing to throw an EADDRINUSE in this case is as bad as failing to put dgram back.
if it wasn't for a good cause, i'd say no.  but in this case, we have a bunch of people who were stranded on 0.4 because of not having dgram supported fully.
right, probably no one's program is depending on throwing EADDRINUSE
can i review it?
heh
but whatever.
comment is slightly off.  it's a BSD-ism, and apparently it's on Solaris as well.
lgtm
let's see how long it takes for me
they're racist
updating npm, too
yeah, github just hates europe, i think
so i'm definitely getting ready to cheer :)
best osx test i've seen in a while: [01:52|% 100|+ 323|-   3]: Done                                                
:)
how many people are screaming about this, and how loudly?
sure, let's delay until tomorrow.
it's better to fix it before too many people start being affected by it
i'll land it, one sec
k
back, sorr
y
you remember that?
do you think we can fix that in 0.6.9, or should we just tell him to work around it?
"can't be done in 0.6" is an perfectly acceptable answer.  "can't be done by tomorrow" is also acceptable.
i'm not familiar with the issue.
is there an issue that has some details and whatnot?
he doesn't have logs, though, and the joyent outage in AM1 seems to have prevented bert's bot from logging it
he said that yodu' referenced one.
ok
i know this one
i think throwing in that case is inappropriate, really
the problem is that we .close() when you .pipe() from one thing toa nother
yeah, i wouldn't want to do too much more in there.
igorzi's point about making sure we don't give the wrong impression that it's actually closing when it isn't is valid, but if we wanted to be that strict about it, then we should rejigger pipe/etc so that it doesn't try to close it in so many different ways.
and the semantics are not such that .end() makes the handle get destroyed
so that's the only one we have to warn about
that's what .close() does
hm.
so maybe we should leave .end() alone, and just hijack destroy{,Soon}?
like if you hit an EPIPE
the problem is that we call .destroy() when there's an underlying error
you have to be able to handle that
yeah, and there's no change for people who aren't already trying to catch it, since emit("error") throws
k, landing it.  i'll make a note to bug piscisaureus or igorzi about it tomorrow to at least get a +1
thansk
sorry, didn't get the test reviewed.
doesn't live up to his own standards sometimes.
hello
and not likely to get done today otherwise, anyway.
looks like it fixes the issues on windows.
right, but it's not any *worse* off for these changes.
ah, i see
i'd very much like to release 0.6.9.  sounds like you can't see any reason not to, and there are no other objectors, so i'll move forward on it :)
if you could, that'd be great.
we haven't made promises about stat(c:\) working, but we have made promises about dgram landing.
so if it gets too tricky, we can push that out until 0.6.10
had to jump on a no.de issue.
no problem, i'm about to go get some lunch
so i feel guilty, and need to make it work again
that's the thing, it's usually my fault, because i'm doing some patch for it, and not fully invested or focused.
wanting to get back ot other things.
yeah, i broke it.
you know that scene in Godfather 3?  Every time i get out, they pull me back in.
that's one of the problem.s
the other problem is that PaaS is a retarded model.
IaaS is great.  SaaS is great.  PaaS is the worst of all possible worlds.
i think they know i feel that way: https://twitter.com/#!/izs/status/162742890852913155
PaaS includes letters that are not in isaacs
that's the real problem.
but seriously, PaaS is one of those things like a Singleton.  I mean, sure, you need to use it sometimes, maybe, but really, what you want is probably something else, and the fact that you're using it means that something else is lacking.
i've never seen a PaaS that didn't wed you to some kind of absurdly complicated black box.
usually, a single vendor
:)
anywya, we're off topic.
should take this ranting to #node.js
we just need better solutions for single-command deploy with a client-side tool.  ie, the opposite of paas.
want to merge into node, or shall i?
awesome
go for it
sweet
so, what's your opinion?  better to half-fix it, or make windows dgram wait for 0.6.10?
i'll call it out in the changelog as replaced in osx and linux
ok.  that's reasonable.
er, in Unix, rather
since it's there now for solaris, too
k
he needs to sign the cla anyway
not today :)
whoa... weird?
any other major libuv changes besides dgram and stat(C:\)?
yeah, that's odd
that's pretty minor, though.  (in the sense that not a lot of people were screaming aboutit, afaik)
:)
weekly releases are a workout.
test, please: http://nodejs.org/dist/v0.6.9-RC0/
i'm about to start building/testing on windows, mac looks good already
if you want to check linux, would be helpful
ah, forgot to update the version properly.
rc1 coming right up :)
test, please: http://nodejs.org/dist/v0.6.9-RC1/
:)
oh, right :)
which is good :)
yeah, the actual dgram sending looks like it's wokring.
haha
kids get the message, but process.send fails.
similar to debian, it looks like.
yeah, hearing the same thing from some joyent folks
also breaks some cluster tests.
er, no, there's another thing, too: Error: setMulticastTTL EINVAL 
yeah, that's borked for sure.
k
needs food desperately.  will be back in a bit.
sunos, why you gotta be different all the time?
wait, it needs the arg to be a char?
business as usual, i guess.
lgtm
sigh
yes, please.
every push should run every test on every OS.
we need a better CI sytem.
it's the lack of time to set them all up
he's putting jetpacks on dinosaurs now.
indeed.
(or whoever wrote whatever teh change is)
axel has to sign the CLA to accept it.
because IP law has allowances for two people having the same idea.
but if you describe it to someone else, and then have never seen the implementation, and end up doing the same thing, then that's "clean"
right... but.. it's not.
(or rather, laws are not reasonable)
but lawyers are not reasonable.
you and i and everyone else know that sometimes, that's just silly
lawyers are like programmers, and the law is the computer.  you can argue all you want that the arg to set_ttl should be an int and not a char, but you won't convince sunos
haven't seen that code in a long time, though
i'm guessing you just need to add a default or some thing.
test, please: http://nodejs.org/dist/v0.6.9-RC2/
hahahahh
node is used by big companies that are highly sueable, and part of what we offer them is assurance that node is "clean" from an IP pov.
i knew a guy once who wrote code for hardware drivers, and he was a former lawyer.  he told me, if you think operating systems are awful to work on, go to law school.
srsly
key.code like in the browser, maybe?
or .keyCode
shrug
like, put that up at the top
oh, i see, you already have a code... yeah, they should probably all get key.code to be the thing that the switch is keying off of
this is in master, right?
but whatever.
it's not quite the same as keyCode on the browser, since that's a number.
and you'll be able to dig into it if you care.
it changes api
thanks :)
then for unknown ones, you can just set key.name = 'unknown'
yes, this is a master thing
    key = undefined;
  // Don't emit a key if no name was found
  if (key.name === undefined) {
  }
oh, looks like we explicitly prefer not to emit on unknown keys...
it's retarded, i know, i know
nevermind my objection before.
oh, ok, so you can still get name === undefined in some cases.
thanks
this will just make it handle unknown functionKeyCodeRe key sequences
(if you include os x)
*vmware
i'm guessing most errors will be due to timeouts
new record: compiling and testing on 4 vm's at once.
vmwar
i got it via curl http://nodejs.org/dist/v0.6.9-RC2/node-v0.6.9.tar.gz | gtar xzv
good idea :)
k
oic, it's doing chars for IP_TTL and not for IP_MULTICAST_LOOP
kewl
c
kewl, one se
compilin
(land it, whatever)
please ship it.
sweet.
test please: http://nodejs.org/dist/v0.6.9-RC3/
kewl
linux?
but i don't suspect any issues.
i'm testing on latest smartos now.
windows and osx both seem fine
i think rc3 is it
i'm shipping it
d'oh
sorry, man
n and h look so similar!
much better
anything that can be sort of painted over at this point probably should be.
ah, ok
what's import/export stuff?
ok, i'm signing off.  have a great weekend, guys.  thanks for your help today, bnoordhuis.
kewl
k
thanks
:D
but we're nearing feature-complete.
lot of polishing,
node core is just about done at this point.
yep
fs.open probably will never change.  isolates and cluster, not as reliable.  etc.
ie, on a scale of 1 to 5, how likely is it that this will look the same in 5 years.
doesn't know what "vision guy" is.  
thanks
wears very thick glasses
just being dumb.
right :)
i'm flattered, but let's keep this room on-topic, please.  take the other stuff to #node.js
i have a feeling it's mostly an initial show of interest, but it'd be good to have a few things to get them interested in
i'd like to not postpone this unless absolutely necessary, but if it's just me, that's less useful.
yeah
afaict, it's all about strings.
i guess they've decided that node is a real thing, and that node's failure will reflect badly on them, so they want to have some measurable way to know if they're making node better.
they want to make v8 better for node.
yes, that'd be nice.
if we had a way to prevent heap shuffling for a moment, we could do some useful stuff with writev and cut down our syscall overhead and string-copying stuff.
sure.. but that kind of sucks for a lot of use cases.
we can already get an array of pointers to raw string data, but we can't do anything async with it, since the heap might move.
you can't json.decode a buffer, for instance.
for example, http headers are *always* converted to strings
the problem is, in real life, it's just a lot better to work with strings in a lot of cases.
reproducing that whole api for buffers would be unreasonable.
you can test equality, search in them, split them, etc
yeah, same here.
maybe there's some interesting approach we could take to use those and provide a string api on top of arbitrary non-heap-shifting data.
heh
oh, i guess that's everywhere...
but it's no good, because at the end of the tick, it can all move around
yes.
i see.
that's good to know
oh, yeah, there is definitely a bunch of stuff.
yeah, restricting the plan to pure-js benchmarks seems somewhat limiting.
right, but... as far as i've seen, pure-js is almost never the bottleneck in node.
unless you're doing something very strange.
which is interesting...
yeah.
in my experience, the sad slowness is pretty much always the threadpool, and then usually becasue i'm doing way more syscalls than i ought to
it's very easy to do something dumb and end up doing 2 syscalls instead of 1 in some place, and suddenly your performance drops in half.
and soon.
(that's probably not going to be workable for other reasons, just curios)
d'oh, missed him
hhahah
how come?
i think a smaller step would be good to do first.
(or for things that ended up being pulled into node-core)
but it probably wouldn't have taken off, since a lot of the early ndoe modules were binary addons for various platforms.
yes, if v8 can't supply some solution to that, then we in node have to figure out a general purpose workaround.
what we need to do is say that UCS-2 is a mistake, and use UTF-16 instead.
"Nono, you can't break my program, it DEPENDS on getting garbage characters from chinese users"
bullshit.
is there any program out there that depends on UCS-2's failure to interpret surrogate pairs?
seriously
"use nonretardedunicodestrings"
but ok
so sad about javascript...
he lives 5 years in teh future.
yeah, if you need solutions today, be's not the guy to talk to
"use unicode" even
instead of being limited to 2 bytes forever everywhere
then your strings just do the right thing
indeed :)
true hipsters are adamantly anti-hipster.
at least, in terms of inventing new things.
node-core has a lot of polish necessary, as you know well.
neat :)
i would have to have SO many conversations about that...
please don't :)
then i could flame you for it or something
"I mean, you guys don't actualy LIKE javascript, do you?!"
*luvit
then casually mention that js is an abomination or something, and you only work on node so that ryan would help write libuv
that'd get a rise out of people, for sure.
thanks, that looks pretty good at first glance, though
piscisaureus__++
that's so strange.
ok, this is odd... now i'm getting EBADF on os x with this.
weird
oh, i had an orphaned child proc somehow.
runing that test.
+1 lgtm land the ship eat the sheep etc.
totally fine
yeah
yeah, works fine now.
if an error is tied to a specific object, it's almost always better to emit than to throw it.
otherwise you end up in production where randomly your program crashes and you have no idea why.
that sucks a lot irl
because req doesn't know that backReq is dead yet.
because the client disconnects 1% of the time, killing the socket, so you can't just req.pipe(backReq) and backRes.pipe(res)
that's why it's a pita to make an http proxy right now.
a good path towards increasing stability is "when in doubt, emit rather than throw"
but then the http streams can handle the errors from their underlying socket objects, and pass it upwards, instead of having to wrap every write in a try/catch
especially since emitting an error throws *anyway* if you don't handle it, so we don't lose anything.
hm... we should pipe the `make all` output to /dev/null on travi
so noisy
k
if (child.disconnect) { child.once('exit', child.disconnect.bind(child)); }
not saying it should, just asking.
or is that already handled elsewhere?
ok
gotta run for a bit, i'll be back in a little while
kewl
hmm...
kewl
haven't had a chance to dig into it
thanks for pinging me
we'll get it in 0.6.10 on thursday
huh
so neither is actually EPERM
(if your'e not root)
as long as we can remove the UV_UNKNOWN error here, then that's what's important.
but, i mean, it's not the end of the world.
since the semantics are different
it's kind of a generic "you can't do that" error that some filesystems raise
passing an invalid date to utimes can do it, too
sounds reasonable.
sweet
:)
they're not terribly divergent
yeah, it's a bugfix
nice
oh, espipe
that's a good one
fantastic
and randomly
grrr...
out/Release/node /Users/isaacs/dev/js/node-v0.6/test/simple/test-fs-chmod.js is failing so obscurely
yeah
sweet
thanks
i should NOT have put this off.
oh, man.
ohhh... crap.
the docs.
or am i screwing something up?
oh, wait, i didn't merge 0.6 inot libuv master first.
merging node v0.6 into node master doesn't quite make sense without doing so.
k
hm... that also updates libuv.  kind of not as atomic as i should've done.  oh well.
ok, everything's basicaly in place to do the 0.7.2 build.  i gotta run more tests on it and get home, though.
so many meetings today..
good mornafternoon
orly?  south america or australia?
or do you mean east/west?
i'm not sure
piscisaureus_, bnoordhuis: didn't we expose the system errno at some point?
piscisaureus_, bnoordhuis: i seem to remember that being a thing.  but now when i get UNKNOWN, i can't seem to find it.
it's incredibly helpful in times when you need all the help you can get.
we should put that on the Error objects we generate for node.
bbiab
piscisaureus_, bnoordhuis, igorzi, indutny: can you review the ChangeLog, please? https://gist.github.com/c680be6cf5489e9db8f8
they're more useful than "UNKNOWN" :)
thanks
even though it's a pretty minor bugfix, i think someone was asking about it directly
freaking 64 bit ruining everything everywhere.
i get it
ohhh, ok
man, this is gonna suck for doing binary deployments, too
ok, yeah, that belongs in the changelog
test, please: http://nodejs.org/dist/v0.7.2/node-v0.7.2-RC0.tar.gz
er, wait a second...
k, go go
 piscisaureus_: that's on windows?
OS X: [04:00|% 100|+ 347|-  10]: Done
not so bad for an unstable release, i guess.
looks like AndreasMadsen has some pull requests that might fix it, but that'll have to wait for 0.7.3
there's one isolates test that occasionally does really weird things.
sometimes they fail on os x, but sometimes they go into some odd state that confuses the test runner and never times out.
ran again and it failed right away
very odd.
went and made some coffee, came back, still hadn't timed out.
Abort trap: 6
Assertion failed: (handle->InternalFieldCount() > 0), function Unwrap, file ../src/node_object_wrap.h, line 52.
out/Release/node test/simple/test-script-new.js <-- assertion error
whoops, forgot the version release flag
:)
well.. that's clearly a bug.
yes, please.
http://groups.google.com/group/nodejs/browse_thread/thread/efa1ecf5559317b7#
can't you remove it manually through the control panel?
i dunno.
maybe the msi just isn't wise about downgrading automatically like it is about upgrading automatically?
and installing npm on windows is rather painful otherwise.
i'm perfectly fine with not uploading an msi for unstable versions.
right
can the MSI be made to uninstall *any* existing version, even if it's a "downgrade"?
except... that sucks, because we *do* want people to use them.
except... that sucks, because we *do* want people to use them.?
maybe we shouldn't even release binaries of unstable versions.
hrm.
we need a nave for windows
does it compile stuff, or just fetch binaries?
before we go stable with it
but really, i want people to be using 0.7 and trying it out as if it's "real"
i guess we could say "install the stable, get npm that way, then put the unstable bin wherever"
:)
hmm...
i mean, part of the goal is also for 0.7 to stabilize.
so we're in this rough patch.
that's the opposite of the goal.
this is all "don't let users use unstable versions" talk, though
i think just not having it as the default on the website is probably enouhg.
that's how we ended up where we are today.
with 0.4 still in use all over the place.
yeah
i think if you download the x.y.z msi, it should run, and you should then have node x.y.z installed, period
like every test is timing out
man, something is severely weird on solaris
i'm trying to get joyent to throw some resources at it
most of the build slaves are awol
sort of
also, i think that the stackvm guys might eventually deliver something really interesting there.
every CI system sucks terribly.  travis-ci is the nicest one i've seen, but it's not nearly enough for us.
i'm trying to convince them to build us something better.
but there's missing bits in the technology stack.  there's an api, and kvm, and smartos, but nothing tying it all together and giving us good reports in a single unified place.
many tests just don't run, eventually python just gives up with resource unavailable.
yeah, looks like 0.7.1 is kind of awful on solaris, as well.
<Buffer ef bf bd>
> new Buffer("𐐀")
wild
i see
this is a large sad topic.
right
er, json-encoded array
like, around triple
how do you actually build those addon examples with gyp_addon?
i'm getting this:
in tests/addons?
aha, architecture, yes, that is the culprit
the file's there
thanks
and was using the 0.7.2 gyp_addon
thanks
hi
oh, cool
i can't assign it to you.  is davepacheco your github name?
maybe...
weird
but elijah and some other random joyent people are in the list
enjoy :)
kewl
maybe you have to be either a committer or in the joyent org or something
meh.  you're a dtrace dude.  i was gonna try to convince you to do it anyway :)
hi
only half here
it should only do that for its own things
your "black" isn't very black :)
heh
so any time you use a non-default foreground, you should also set the background reasonably
there's no way to detect what the current background is
usually, anyway, if it's white or black especially
good mrning
we need to pull out isolates.
also, please let me deliver this news to yandex and joyent and other interested parties.
it was a good idea to investigate, but it's been investigated, and it turns out it's not a good idea.
let's figure out the least hazardous way to do that.  there are a ton of changes all over the code base to support them, and i'd prefer not to end up with less stability for even having tried it.
i'm not even sure that shared memory is really going to make a huge difference in their case.
they had a vision of sharing actual JavaScript objects between isolates, which is simply not possible.
(that's what makes them "isolates", they're isolated)
in fact, they can get the API they want today in 0.6.9, probably
so indutny did come up with some workarounds, but those can work just fine with regular IPC.
ok, please no blog posts or whatever.  this is a little bit political, but i wanted you guys to know where we're at,not that this is a surprise.
makes it a pretty easy call
or fortunately, i dunno :)
:D
k, thanks.
like claudio at msft, or merline at joyent
i suspect that the test is racy, but i haven't dug into it
it always passes when i run it manually.  same with the fs.chmod test for some reason.
very frustrating
when run with python, it fails, but when run with bash, it passes.
skype
?
says you'er offline
yeah
hate skype so hard
i dunno... what happens when you stat an executable?  what's the mode that you get?
ie, the 0111
on unix, you can check the x bit
piscisaureus, igorzi: ^
needs an irl beer
i don't know if it's exposed.
oh, nice.
should probably be.
thanks.
it's in there somewhere
we should definitely expose that in master, like asap
glob, maybe?
i forget now where i used that last...
somehwere in npm?
time to go :) g'nite
good morning
or that
stray node process, yeah
we could just put that on all fs.* methods when they pass an error to the cb
if you sneeze on the arguments object, v8 hits you.
shouldn't be very expensive.  it'd be better to make it an array of the strings, though, rather than the actual arguments object.
right
... => er.arguments = [path, type]
but you could have something like:  fs.open = function(path, type, cb) { binding.open(path, type, function(er, fd) { if (er) ...; cb(er, fd) }) }
or, it could potentially be done in the ASYNC_CALL macro
oyeah
more debug tracking is almost always good, but it should not require uv changes, i don't think, and *definitely* not require eio changes.
ok, i'm going to fork v0.7.3-release
$ glg -n5
* a3efcd2 isaacs (v0.7.2) 2012.02.01, Version 0.7.2 (unstable) (2 days ago)
* a9723df Ben Noordhuis (HEAD, ry/master, ry-push/master, master) Revert "Process symlinked shared library as .node" (2 days ago)
* ec79acb isaacs (v0.7.2-release) working on 0.7.3 now (2 days ago)
do we really want to do a release for that one commit? :\
it'd be an easy changelog to write :)
it'd certainly be nice to only destroy one day of my week, instead of 2
or if that'd be more confusing.
Inline JavaDoc style comments: pros/cons?
bnoordhuis, piscisaureus, igorzi, indutny, anyone else ^
and i hate them.
imo, the main drawback is that those comments are annoying.
true.. but they also forget to update the separate markdown file, and we manage to keep that pretty much in check.
comments should be for the benefit of the person reading the code.
javadoc comments are there for the benefit of people *not* looking at the code.
not pulled out as documentation.
standalone markdown files are so nice.
despite the fact that they're ugly adn annoying and i hate them.
however, for API reference, there are some definite advantages.
i really like the way that v8's doxygen docs can all link you directly to where in the source the function lives.
it's sunny and beautiful here today
you guys are crazy.
bit chilly, actually.  15˚C
need long sleeves
it's pretty warm in here.
my apt gets a lot of sun, though, so the windows are open.
no, it's tagged
oh, also, inline javadoc comments are stupid for events.
unless you comment on your .emit() calls
ohoh, right
yeah, that's a good idea, one sec
sure, one sec
sorry for the lag
i thought it would take much longer
that's so badass
mm
s/cms/mvc/
was thinking of the node cms thingie
maybe prompt first or somethign
but like, HOLY CRAP that would be a shockingly easy experience for new windows users.
maybe error out with something like "Blahblah.bat could not be found.  Would you like me to install some whizbangs for you?"
sholdnt be done in the background, though, i mean, they might need to choose install locations or whatever else.  and it takes a litlte while to complete
then maybe download the msi or whatever installs the stuff, and open the file.  wouldn't be too hard
plus i think the installer pops up a window
spawning cmd /c start http:.... works better
spawning iexplore or google-chrome does kind of work, but it's weird.
cmd will fork off the browser and exit immediately
last i checked was around 0.6.1, might be less weird now, i dunno
right, that's what i mean
(for better or worse)
but people will use it to daemonize child node processes.
right
there's also gnopen
why they can't just call them "open" like on os x, i dunno
and very non-windowsy
if we were to provide a nice cross-platform API that had similar semantics on both win and unix, that'd be cool, but probably not a priority right now
yeah, it's kind of a pain
you can kind of simulate it with what we have now, but not exactly
it'd be better if someone did this as an addon, and then we pulled it in maybe.  i dunno.
it's not really a core network program necessity, but it is a very helpful thing to be able to do in systems programming
not portable
yes, that's the plan
i can review cluster patches
thanks
even worse.
oh, jeez.
oic, so you could have one type of worker for a TCP server, and another for a HTTP server or something.
that sounds complicated.
node is not every feature for every use case.
the cluster use-case was handled, but the sockets-across-sunos-zones wasn't.
anyway..
the point is, at this point, expanding the boundaries of node requires a lot of justification.  child processes in cluster can all run the same code.  it's fine.
for most things
i'd say, "If it's possible to do in an addon, it doen'st belong in core"
just don't imply that any of them are sufficient
mmalecki, indutny: i think this discussion is not really necessary.
we're not going to make a bunch of "must-haves" public, probably.
if we can deliver more value somehow, we might do it
just assume it *won't* go in core, and tell people to deal with it.
yeah
but like, major changes?  adding features that can be done in userland?  no way.
we need to be very focused on helping existing programs run more reliably, and provide better tools for making them more stable.
(er, js-land)
[-1,-1,-1] is the default
it's not deprecated, it's just hideous
it'd be nice to have something like "silent" or something
anything fancy can be done in JS
the option should be, for each stdio stream, do you want to inherit the parent's, or expose a Stream object.
so stdio could be one of those options, or an object of in/out/er
{ stdio: 'null' }
man, removing isolates really makes this much simpler.
oh?
so the top level option is just 'stdio', period
i don't think it was a vain try.  there was a lot of reason to think it'd be good.
if we already knew everything we wouldn't have to try things to find out :)
yeah
so confused
piscisaureus, mmalecki: I don't know that we need a ipc option there, because oyu just use fork if you want fancy pants ipc, and set up the stdio however you want it.
$(filename).open("r").data(function (chunk) { ... })....
fsQuery
hahah
it'd be kind of cool
maybe use CSS selectors to find files
or i guess globs would be more appropriate
$("*.js").each(...)
nice
that'd be kind of awesome.
yeah, but i keep not seeing it in real life :)
sm = spidermonkey
but that might be out of date info
could be talking to spidermonkey C api these days, i dunno
someone did writing a thing where you could swap that out with node.js, but besides people talking about it at conferences, i've never seen it in action
oh, neat
*nice
reviewing that pull req now, but first had to get caught up on how it all actually works :)
i see the big patch there, but just want to make sure that indutny and andreasmadsen had a chance to make sure the parts that touched their things looks ok
i'm going to cut 0.7.3 tomorrow.
sweet.
thank you very much.
Assertion failed: (handle->InternalFieldCount() > 0), function Unwrap, file ../src/node_object_wrap.h, line 52.
interesting
well, even if it was, the total number of tests passing went up considerably :)
breaking one is worth passing an extra 10 or so
but assertion errors are always kind of scary to me.
exactly
since they're fundamentally un-handle-able in node programs
their changelog sounds like all good things.  i'm sure they would have mentioned any new bugs they put in ;)
i'll try it out, see if it breaks anything significant.
thanks
and when they start 3.9, they start doing 3.8.6.1, 3.8.6.2, etc
oh, i think it's worse than that
they use weekly-release versioning
but it's not wraparound, exactly
node 0.6 is on 3.6.6.19 right now
so, bleeding-edge and trunk are just two separate trains
:)
er.. it was last time, before i updated it :0
doens't break any tests that weren't already broken.
ok, landing it.
ok, v0.7.3 branch created.  we're getting closer to 1-day feature lock.  I'll branch 0.6.11 tomorrow.
hm... what happened to CIA?
ahh, there it is
wow, quite a lag
ah
ok
** is really a huge pita
about it not working quite right on windows
kind of wish that'd never been invented... :)
oh, i thought you'd commented on the bug
heh
right
so, part of the problem is the clever way that i approached handling **
the absolute/relative stuff
is obsessive.  it must be correct.
yeah, i'm really excited about the progress here.
but it's so full of sadness and despair.
we've talked about doing basically exactly what you're doing for... i think about as long as i can remember, actually.
yeah, recognition is sweet :)
you are a hero, going there.
it's a good motivator, too, because it usually means you're doing something valuable.
there's a ton of inertia.
to get people to use package.json, i sent pull request after pull request.
yeah
that's every node module that has a pre/post/install script
oh, actually, this one is better: http://registry.npmjs.org/-/scripts?script=install,preinstall,postinstall
oh, wait... no, that one doesn't seem to be respecting the "script" argument...
ahh, it's scriptS: http://registry.npmjs.org/-/scripts?scripts=install,preinstall,postinstall
the goal should be to reduce the surface area.
but it's going to take some steps to get there.
eventually i want to remove scripts.install from package.json entirely
like, we'll execute "node-gyp" if there's a gypfile, and the gypfile can specify X, Y, and Z.
that needs to be brought in line
the problem we're facing is that packages shell out and do all manner of crazy bullshit stuff
how can you even do that on windows?
i dunno.
we've got node now.
no reason it can't have a node-gyp install cmd if you have a binding.gyp file
ok, need to make some dinner and head to class.
yeah, i don't want to add new fields to package.json if we can get away with it
forcing them to be js files would be fine, imo
right
anyway, gotta run.
as long as the default use-case is easy, things that are more complicated can be ugly.
if you want a pre-node-gyp configure step or whatever, write a configure.js, and node-gyp will run it
it's fun
why not just hard-code it?
yessir
:)
everyone should learn it.  makes talking in noisy bars much easier.
i don't exactly see redhat or debian stepping up to deploy programs that benefit windows users :)
actually, for almost any kind of deployment, static is much btter.
it solves having to install libffi on their own
it's optimized for a time that no longer exists, when hard drives were a megabyte
node uses a static v8, and without fail, systems that override this with the system v8 do nothing but cause pain for users.
and those are almost everywhere.
haha
neither is zlib.
openssl is not on that list.
the list of things that it's safe to dynamically link is *incredibly* small.
"I need X Y and Z, and haven't bundled them mysefl.  installer builder thingie, please make sure this is ok"
and if that's present, then we'll disable pre-built deployments, since they'll be unsafe at any speed.
kewl :)
good morning
why, got something you wanna land?
or maybe just have an x64 subfolder.
ugh.  adding another compile, though... we really need to get this stuff automated...
ok
it should follow whatever is the normal windows pattern, if applicable.
anything else is just a recipe for confusing
yeah, the executable shall be called "node"
sure
call time?
hola
it's not that emitting error is *always* better than throwing, but it is better if it's something that's likely to be buried in the internals, and when in doubt, it's better to emit than throw.
since emitting error throws anyway
nah, just doing doc stuff, and it's an inconsistency i noticed.
that seems like a mistake to me.
not a high priority thing, and easy to fix.  i'll log an issue on it.
or maybe just fix it... this stuff is kind of boring :)
that's... really weird.
becoming more and more firm in the position that lib/module.js never ever changes for any reason ever.
even ostensibly "safe" cleanup is never safe.
but, if you don't have time to read through and root-casue what --debug-brk is doing, i'm ok with just reverting it and asking questions later.
it'd be nice to have a test that verifies --debug-brk works.  i thought we had one (maybe that was in master?)
ohhhh... wait, i think i know why
there's some module jiggery pokery that had to be added to make --debug-brk work when the file is symlinked.
thanks for tracking that down
ie, a path rather than a fd
but node's fs.truncate is actually ftruncate
usually you've got xyz(path, blah, balh) and a counterpart fxyz(fd, blah blah)
yeah, that's how we're doing some of the link functions, as well.
api symmetry would be nice, if it's easy
in this case, i'd just flat-out forgotten that i'd suggest indutny touch that private _resolveFilename method
we dont' do auto-merges on github anyway
fair enough
i'm not really a fan of this require("bindings")("fo.node") approach, personally
it seems like you ought to just get the version of the package that is compiled for your arch, with the basic case being that you compile it yourself
we shouldn't be delivering a x86 thing to someone not on x86, etc.
the only benefit of doing this is for binary deployments that don't make binary deployment a first-class citizen
if you're compiling at install time, it's unnecessary.  if you're compiling ahead of time, then tag the whole tarball.
kewl
right.  we control the package system.
so you download windows version on linux, and vice versa, because you only have one hammer to hit the nail with.
foo-darwin-0.7-x86.node
foo-linux-v0.7-x86.node is that enough?
foo-win32-0.7-x86.node
well, linux is a madhouse.
what are you finding the breakdown should be?
Please test: http://nodejs.org/dist/v0.7.3/node-v0.7.3-RC0.tar.gz
Please test: nodejs.org/dist/v0.7.3/node-v0.7.3-RC0.tar.gz
i think gyp can do something like ["OS===solaris", { blah blah blah }]
in v8's gyp file or ours?
            '-lkstat',
          'libraries': [
          ],
        [ 'OS=="solaris"', {
        }],
that's in our gyp file already
puts another small pebble in the "dap is node's sunos/dtrace guy" bucket.
sure
the next (and hopefully final) 0.6 version drops on Thursday
(mostly see if there's anything major missing from the ChangeLog that you know of)
review, plz?
release commits set it to 1, then it gets set back to 0 on the "now working on x.y.z" commit immediately after.
(comment, proposal)
like RFC or RFP
something's odd with my vm,i think
windows and linux look good.  os x looks good.  solaris is timing out on every test.
testing on a real smartmachine now
alright, proper SmartOS smartmachine worked fine.
dropping this thing
i'll investigate the vmware image (or probably,just trash it and build a new one) later.
email etc
just pushing live now
thanks
:)
LETS REMOVE IT AND SEE IF IT BREAKS ANYTHING IT PROBABLY IS OK!!
no surprise there
anyone got any patches you want to get in?  land on v0.6 today.
going to fork v0.6.11 today
goes on master
this will hopefully be the last v0.6 release for a while (unless we find new bugs :)
if there's a customfds, then interpret it, and make a stdio member to use
ignore customFds if there's a stdio
rad :)
should be like 5 lines of code
so [0,-1,2] -> stdio: {in:'inherit', out:'stream', err:'inherit
}
that you're aware of, anyway
but i guess i might just have a different gcc
sure, we can float a patch for that
yeah, it works for me
see, this is why we need the to start releases the day before :)
super <3 all the libuv updates to remove UV_UNKNOWNs
that's really helpful
yeah, there are a few npm bugs to fix and pull in as well.
stability++
oh, wat?!?
yeah, mmalecki, that's definitely wrong.
looks like copy-pasta
after 0.6.11, i'm going to jslint everything in master, and we'll just bite that bullet all at once
don't fix it for now
hahaha
ok, if it'll keep you up at night, you can undent that block :)
i'd like to keep fork simple.  it's for node programs, period.
this is very similar to the webworkers api, which is a common request/expectation
what's up?
likes making empty threats about build freezing.
i don' want to kill kittens!  i want to prevent them from being born in the first place!
it's all about feature contraception
hahah
piscisaureus_ and indutny_sleeping had stuff to get in as well.
sure we can wait for that
he'll complain to me directly, i'm sure.
if it's related to a specific object, an error event is easier to handle.
c
yes, will do, one se
:’(
it's ok
(i think, anyway.  make jslint for authoritative answer.)
you can inline the if and remove the {} if it's one line, and doesn't end up extending past the 80 char limit
just pass in a function, whatever.
your editor doesn't charge by the line
right
hm.. 
so, at the top level in js-land, you'd want that Stream object to have readable=true/writable=false or something, right?
yeah
they're a writestream or a readstream
writestream has .write() and .end() and emits "drain", read stream has .pause() and .resume() and emits "data" and "end"
at the js level, there shouldn't be any API diff between a half duplex socket and a file read/write stream
i see
so it's actually duplex, but we pretend it's half in the api?
i mean, if it's costly, don't bother
like, hard or complicated or whatever
sure
that sounds cool
back
in the US you have to be 21 to drink, and it's very hard to rent a car or get very much credit before 25
so you can compose things
they mean, i can hand a request off to one function, that adds a few headers, and then to another function, that adds a few more headers.
well, the credit you can get, and the price you pay for it, should be based on the likelihood that you'll pay it back.
yes.
0.6 is a lost cause, whatever.
he's waiting for a clean `make test1
i'm hearing that a lot, actually.  that's why i really want us to make every single test pass as soon as we can.
there are a bunch of relatively minor cleanup things that mikeal wants to do.
after 0.6.11, and this api doc refactor, that's a bit item looming on my agenda.
but like, if there's a test that we know fails a lot, we should either fix it, or decide that we're not going to fix it, and remove it.
probably, we should fix the feature that it's testing
but it's also unreasonable to have a test that we all know fails, and go "oh, that one, yeah, whatever, don't worry about that one"
like, we need to either fix it, mark it as "todo" or something
sure.
they're going to break and get fixed, and so on
and maybe the diff between stable and unstable is "there's nothing in test/todo/*.js"
we could put the failures in a special folder, and say "all these must pass before moving to stable branch mode"
and maybe move any passing ones into test/simple or something
or at least list out which ones passed so you can do this manually
right
i don't get it
not when i run it manually
test-fs-chmod fails on my laptop, but only when run as part of `make test`
yeah
let's say you've never installed node-gyp
maybe npm should detect a binding.gyp file, and run node-gyp, and tell you what to do if it isn't found?
but i don't actually know what it does
i always thought -fPIC was the flag for "Make it work on Linux"
s/ur/u're/
like i said, i don't know what it actually does, except make things work on linux
no clu
what libuv stands for^
that seems counter intuitive
ahh
node-glob for instance.
ok
then i only needed it the first time because that was before i was bundling bsdglob statically
oh, i see.
then TooTallNate should absolutely put -fPIC in addon.gypi for linux
i should make ircretary a bit more pushy about delivering notes.
she's too easy to ignore.
i just worry, if you don't make the robots timid, one day they'll take over.
:)
nope.
sorry, i just woke up and am not following.  what's the issue, piscisaureus_, bnoordhuis?
works fine here.
ugh
:)
hahah
which does nothing.
haha, the logs aren't actually there any more.
i used to have her slurping up stuf.
and doing that all thorugh JS is pretty painful
right or wrong, there are existing unix programs that this is the only way to interact with them properly.
to use as its stdio
customFds is a very ugly interface, but it did allow for this kind of behavior, and this is keeping some people stuck on 0.4.
but let unix do this.
how much does that offend you?
right
what about if we just threw ENOTSUP on windows?
here's a use case: https://github.com/joyent/node/issues/1940
so, passign in customFds:[8, 7, 7] could never ever work.
what if we had a way to create a pipe pair, but it returns handle objects that contain some information about what they are?
does that work on windows?
i mean, does that work on unix?
that's.... weird.
but that is a pita
i mean, another option is just to use JS stream objects, and Stream.pipe them together
ok
well... we need to be careful what we suggest.
i'm not sure
there's also some internal stuff at joyent that breaks with the removal of arbitrary customFds
well, i'm trying to get details.
btw, i see throwing ENOTSUP on windows as a very very last resort.
k
haha
check out SmartOS or what's the other one?  that's debian-like?
er, wait, no
nexenta's the company
nexenta, right
the other illumos
ah, ok
right, illumian
not sure
so that's always nice.
hahah
is mildly disturbed by what gives bnoordhuis pleasure, though thankful for it.
we cannot add new exposed methods in 0.6.  that is a somewhat unreasonable constraint, i know, but try to approach it from that point of view.
if it's absolutely necessary to change some exposed API surface for security reasons, maybe, but please verify that that's the case by at least trying to fix it 100% internally.
right
adding a method that's exposed to the user is the worst approach, though
ugh.  every option is crappy.
what would the environment variable or options key look like?  what is the thing that's being overridden?
hm.
ok.
please do the minimum possible change, though.  this makes me very apprehensive to be doing in v0.6, but it's clearly necessary.
hrm.. really?
i'll debug toay
indeed.
she's very watchful :)
what do you want her to stop watching?
ahhh
heh, ok
like, watch what he's up to
uh oh
yeah, that's a lot of crud
hehe
right
yeah
:)
bbiab
oh, found it
was looking for stack[n].fun
funny, i was just chatting with some people about that.
also, "stop watching xyz" works now
np
unless there's punctuation in it
that confuses her
wait for it...
i wanted to find an ascii art bomb, then realized that :(){ :|:& };: is the perfect one.
ok, back to parsing docs..
before that it was node.posix.blah
i remember require("posix")
just a global.  man, that was nice.
before all this require mumbo jumbo
what guy?
maybe that v is actualy some cyrrilic thing?
that's where it's running
yeah, i dunno
sweet, parsing out sections properly: https://gist.github.com/1785709 
er, properly-ish :)
do we have any class methods in node?
in js?
Buffer.isBuffer
Server.doSomething vs Server.prototype.doSomething
derp
oh!  of course.
Buffer.byteLength
SlowBuffer, too
but yeah, maybe just on Buffer.
i dunno
but it's rare enough to add a little <!-- type=classMethod --> goober in the markdown
oh, right
that's only on require("buffer"0
good morning, heroes.
most of them aren't javascript, though.  villains mostly use ruby and java.
php, too. to better blend in with civilians.
moonraker!!
yeah, i'll send you some thoughts about what i think a first step might look like.
yes, please!
i think we just need to let people see where we're at.  natives getting restless :)
hi
good!
what's this npm issue you're having?
what's the name of it again?
i see
code duplication's not the end of the world
sure
sure
that's what i said^
sweet.
thanks
;P
hooray, stdiod
er, "hooray, stdio"
why do we need daemonization in core?
(but yes, the ruby api for this is quite nice)
how could that even work in ruby, anyway?
we'd probably never be able to do fork(function () { doStuff }) like ruby can
yeah
just remembered ruby's design goals...
or seem like it *should*, and then not, and be confusing and magically and terrible?
wouldn't it leak refs to stuff across the boundary?
anyway
detach and daemonize sound nice, but a) not for v0.6, and b) lower priority than a bunch of other things we need for 0.8
magically terrible is like item #2
put in the post-0.8 pile.
right
but more activity is generally a good thing
thanks
any idea when?
k
looks like bnoordhuis did yesterday
k
awesome
next week: let's get to 0 lint warnings and 0 test failures.  moving tests out of the way is fine.
it's blocking contributions, because people are afraid of breaking stuff.
right, but they should be able to tell easily which thing they broke
it should be a china shop, not a rubble pile
i str that we had some kind of "socket" arg
maybe i'm misremembering.
sure
:)
right
considering yanking all the icons out of the dist tarballs and referring to them all by url, just to shut up this stupid legal discussion before it goes any further.
well.. actually, including the nodejs.org website in the tarball is kind of awesome, i think
but the images can be referred to via url.
hyperlinks are protected speech in many countries :)
(most of them, anyway)
restricting to a single color makes pngs really small :)
also, i think ircretary should probably do logging.
i had that once upon a time.
but it was... not good.
i'll put slurp in her brains
meh.  don't let it distract you.
i'd like to have ircretary slurp up all the channels she sits in
it'd be nice to see context when you get notes and mentions
they could link to the place in chat where it was actually said.
review, please? https://github.com/isaacs/node/commit/3c676032f24e3703aea4939b8dff975b24bb3ca8
right
same in src="..." and href="..."
that's what i mean.
url(//nodejs.org/images/blah.png)
does't work anyway :)
nope
t
i mean, pretty measurable
oh, you're on a cell phone, you mean?
yes.  cell tower latency is pretty good.
i've gotta hurry up and finish my homework before class.
the doc crap kind of took longer than i'd expected anyway
yeah
yeah.  it's a bit slower.
ok.  available for a quick checkin later?
just wanna make sure we're on the same page re: who's doing what.
k, whenever
releasing 0.7.4 around 1PST
oh, right.
thanks :)
i just need to know how to do it?
oh, that's what i would have guessed, awesome :)
x64 build landed in master, right?
i'd rather not merge all of 0.6 again, though.
i'll try it out, merge it over if necessary.
ok
sweet.
thanks
yes.
i could do node-x64.lib
yeah, i guess an "x64" dir would be useful, but i'd planned to just do node-x64.exe
great
test, please: http://nodejs.org/dist/v0.7.4/node-v0.7.4-RC0.tar.gz
ah
no, none of that yet
weird.
hahh
hmm...
ok
ugh.
where can you get that from?
kewl, trying that...
*truth
it seems to me like tty.isatty() should tell the trueth
unless you share fd0 with it, in which case, isatty() returns true anyway
sweet
thanks
JUST KIDDING!
oh, because it doesn't exist any more, i guess :)
LINK : fatal error LNK1181: cannot open input file 'winmm.lib' [C:\node-v0.7.4\node.vcxproj]
'bar'
'foo'
> foo
> foo.name
> foo.name = 'bar'
> function foo () {}
undefined
but the options are either what we have, or throw an error
so, actually, (process.env['=kaas'] = 'hallo') == undefined would be surprising and wrong.
there's precedent for *throwing* which i'd probably be ok with
lgtm
*i just read, not "if just read"
if just read the scrollback here.  yes, if there's a 2% performance win to be had, i 100% support bnoordhuis in doing what we need to in order to make that happen.
process.binding is private.
this use case is clearly relevant, since people *will* use node for http proxies.  but rather than expose more of node's guts to make net.Server work as a proxy more effectively, i'd rather address whatever it is that makes http.Server an inadequate proxy.
the nodejitsu http proxy is what happens when you start out using node's builtin http and hack around all the issues.
and then taking the response, and translating it a little into the response to the original client.
it's not quite simply a matter of piping data.  but, we should be able to make it that simple, i think.
bouncy is what happens when you decide to use node's net.Server directly, and parse http yourself.
now we're exploring using node's internals, and still using net.Server.  i think we're missing an obvious solution, which is a bit more costly to implement, but better long-term.
another not-completely-insane idea is to move the http parser into JS, but it'd have to be much faster than parsley
but not fast enough for node.
parsley is built for extensibility and expressiveness.  it's fast enough.
etc.
headers, trailers, et.
yeah, i mean, ideally ServerRequest.pipe(ClientRequest) and ClientResponse.pipe(ServerResponse) shoudl be smart enough to Just Work.
LINK : fatal error LNK1181: cannot open input file 'winmm.lib' [C:\node-v0.7.4\
node.vcxproj]
still getting this, though:
that got me further.
yes
i downloaded here: http://www.microsoft.com/downloads/dlx/en-us/ThankYou.aspx?FamilyID=6B6C21D2-2006-4AFA-9702-529FA782D63B
ok.. where does one get that?
which says that it's the x64 SDK
but the vcbuild.bat x64 release fails
yes, there is
Targeting Windows 7 x64 Debug
nice
promising :)
vcbuild x64 nosnapshot <-- currently running
this is promising!
piscisaureus_, igorzi: i have no opinion about vcbuild.bat except that i'd prefer that it works :)
if you to come to agreement, feel free to land whatever fixes make that better and tell me what incantation to use to build it.
check it out^
yes, release x64 built
forgot to disable snapshots in it
found a problem iwth the x86 exe, rebuilding that now.
just for binary dists
we probably don't want to disable snapshots normally.
*usually* they're better.  but, someone can take the binary, figure out the hash salt, etc.
k, i'll do that.  igorzi, opinions?
wanna splash some paint on this bikeshed?
d'oh, forgot node.pdb
ugh.
should've done this in two separate dirs :)
in npm
because module is used in every module everywhere.
jesus.
omg.
yeah, of course.
how does that work in browsers?
not just the --harmony_weakmaps or --harmony_scoping thing
          ^^^^^^
      var module = new Module('eval');
awesome.
right
calling that "harmony" is hilarious.
normal, strict, and introduces breaking syntax
  --harmony (enable all harmony features (except typeof))
  --harmony_collections (enable harmony collections (sets, maps, and weak maps))
  --harmony_modules (enable harmony modules)
  --harmony_proxies (enable harmony proxies)
  --harmony_scoping (enable harmony block scoping)
  --harmony_typeof (enable harmony semantics for typeof)
$ ./node --v8-options | grep harmony
:)
i mean, for any *valuable* features, you can just enable piecemeal
it's apparently --harmony_modules that breaks it
it's odd that --harmony_typeof is omitted.  that one is kind of nice.
just changes typeof null === 'null' instead of 'object'
i think be is actually one of the better ones in that group.  but he's still too easily swayed by arguments of "this looks nicer" or "newcomers grok this more easily"
oh, werid
rather than "this makes it impossible to handle real-world data in your programs"
so the a.k returns undefined?
or "undefined behavior"
or maybe it's just a bug
that's so wacky
the language craziness happens elsewhere.
becasue after the delete operation, false === x.hasOwnProperty("z")
but, delete x.z // true
nevermind that it didn't have it before, either :)
sure
if anyone complains, then we'll address it. but no one will complain.
lol
there are two kinds of people who prefer strict mode: people who don't fully understand it, and Mark Miller.
it's a very YO DAWG kind of program.
yeah
yeah, that thing is nuts
but none of them prefer strict mode except him, is the thing.
it's unnecessarily painful
no, lots of people know javascript
there's a unset command to unset them
oh, really?
i didn't know that!
i thought it clobbered the whole definition
neat!
in particular, test if it doesn't break unix)
review
this is more involved, for sure
kewl
i want to check unix, and also make sure it actually fixes the npm issue
right
i see
oh, ok
oh, process.cwd() doesn't get it out of the env?
:)
srsly, man, "=", really?
windows you so crazy!
ok, bbiab.
that means read-only?
that's wild.
tbh, the windows services framework thing is basically what every unix os has had to develop for themselves.
ha
smf, init.d, upstart, etc.
well, on any *specific* unix, youusually don't
really likes smf, despite the xml
(os x
slow cafe wifi
yeah, building
and just copying the folder from mac to win didn't work so well.
i would like windows 100% more if i could ssh into it from iterm, rather than using cmd.
ew.
rm !$ <-- "could not find the file specified"
the builtin terms in linux and smartos are crap too, but at least you don't have to use them
i can type "bash" into cmd, but it's.... different.
i see
so, if (flags && typeof flags === 'number') then?
~~ looks overclever.
i can see the rest of the function is all kinds of bitwise, though, so maybe it fits :)
probably just in bit mode.
seemed obvious :);
.yep
ok, reading for content now..
just got it checked out, finally.  building/installing now
hm.
if it's not possible to fix the issue without it, then it's not very objectionable, but i agree.
it should be in master if possible.
yeah
              ^
        throw e; // process.nextTick error, or 'error' event on first tick
i must be building that path up wrong in the bat file or something?
ode_modules\npm\bin\npm-cli.js"
\ is anot escape
but this is in a cmd file.
yeah
it's a separator
orly?
sorry, i mean \ is not an escape
yeah, that's always worked, afaik
i see
doesn't seem related to your env change
so, this is a bug i'll have to go fix, i guess
yeah, the command line parsing change broke this, it looks like.
and, though this is a bug in npm, it means that existing cli programs that npm wrote will be busted.
though, probably not as likely, since they're not in the same folder as node.exe, and not as likely to hit that code path
so that's fantastic :)
wild
ok
just "%~dp0\target"
oic, so keep the " around the prog, but just don't have "%~dp0"\"target"
ok
right
thanks, one sec
that makes sense.
oh, the comment is wrong
yeah
fixed comment: http://static.izs.me/350ea8b.diff
just fixing it to make it consistent
oh, right, only updated the comment in one place.  whatever, sh actually has no problem with this :)
so, that's working perfectly, afaict
îßååç
a) unicode is not allowed in package names, and b) anyone who puts unicode chars in their bin files deserves whatever explosions result.
unsupported.
and if i could turn back time, i'd throw if there were any capital letters in the path.
in fact, even spaces are really not supposed to be there.
same for package names.
too late to fix that one, though
dinner time.  i'll be back in a few hours.
deprecation changes never happen in a stable branch
ie, making something deprecated, moving it from deprecated to gone, etc.
master
also, lgtm
thanks
g'nite :)
good morning :)
thanks
yeah
works
thanks!
now we can all focus on actually getting things done in master, and hopefully put 0.6 behind us asap.
ok, i'm gonna branch v0.6.11-release right now off 8f2694b 
doesn't actually add much functionality, just exposes the underlying socket object
igp?
oh, start of igorzi, got it :)
what's 2764?
i wanted to get this in
it's a bugfix.
oh! yes.
thanks for reminding me
i would totally love to turn on --harmony_unicode in node by default if there was such an option.
yo
ok
i consider that a bugfix.
i'd like an api that is'nt so flaky, though
maybe for 0.8, we can organize that mess a little bit.
if fedor and he both ok'd it then i'm kewl with it
just don't want to let things in that might mess with the stuff he's got planned, but this looks pretty straightforward.
ok, sure.
(that isn't already, i mean)
i'm also updating uv to it's v0.6 branch.  anything that ought to be in there?
kewl
and some UV_UNKNOWNs
kewl
right, of course.
ok
roll back if not lgty :-)
i mean, we need *something*
i'm kind of undecided on path.split
and on unix, you only ever get a path bit.
but if we're going to say that path.split is the counterpart to path.join, then it should just do string.split, using '/' on unix, and /\/|\\/ on windows
maybe omitting empty bits in the middle.
what we really want is a path.parse, which is more like url.parse
:)
just scrolled back and saw piscisaureus_ saying the same thing.
so either we're actually in agreement, or you're subliminally controlling my thoughts. 
if we have path.parse, then we should add path.format, as well, and make it actually a nice 1:1 mapping to how url does with urls.
that would be the long-game strategic move, anyway
head asplode
no.
that's an old dead horse that took way too many beatings as it is.
by unfortunate accident of history, unix paths don't tell you when your'e crossing device boundaries, and windows paths are as complicated as urls.
rather than rename
where "mv" becomes "copy and delete"
ugh.
anyway, i don't want the path module doing io.
but a strictly string-munging path.parse()/path.format() would be really nice.
it's fundamentally different from urls.
we already have path.resolve
and most of the bits to parse paths on windows are already there.
but man.
path.resolve is awesome.
paths.
that shit is just unnecessarily awful.
./config no-idea <--lol
holy moly: [02:10|% 100|+ 336|-   1]: Done                                                
that's pretty nice
and grep
i think ls and less have similar options
we *do* need something like this.
TooTallNate, piscisaureus__: right, so, there are cases where you want to get at the output in a stream object, but also have 'isatty' work in the child. 
i don't want to start adding API features that will never work on windows.  at the same time, it seems a bit annoying to a lot of people to disable things on unix just becasue windows can't do them.
i think this something that should maybe be folded into the direct-access-to-fd issue, and perhaps a broader conversation about our unix-vs-windows support philosophy.
actually, that's not such a bad idea.
at the same time, i also don't want to start having node be just a dumping ground for all things unix.
sure.
but, like, maybe we extend our stdio: { in, out, err } to let it take an arbitrary FD or handle, and if it doesn't work on windows, we ENOTSUP it.
i don't want to get distracted right now on the specific issue of file descriptors.
that can make the fd problem less of a problem.
the point is, we need a nice clean rule about "This is how we handle unix-specific stuff in windows"
i dunno
if we can hand off arbitrary handles to child procs, and abstract the fd/handle differences away from the javascript layer, then that could work really nicely.
maybe that's require('posix').createPty or some such
nice :)
failing crisply with ENOTSUP is way better than randomly-working undefined behavior.
i mean, how common is it to pass arbitrary file descriptors to child procs?
in windows, i mean
how many windows devs have said to us "I need to pass fd's to child procs!"
none of them
sure, but apart from our crazy unix programs that are ported over to windows :)
on unix?  this is *very* common.
the shell has syntax for it, even.
throwing ENOTSUP if you pass a socket FD to a child proc is probably fine on windows, then
there are established unix programs that node cannot interact with because it doesn't have this feature now.
wow.
also, keep in mind, ENOTSUP can mean "ENOTSUP(yet)"
like, "this isn't supported on your OS.  sorry.  we'll get around to making it work later."
or from there ^
testing smartos
wants a clean test run so bad.
but the first few failures were because of timeouts since it was waiting for permission
linux mint, too
simple/test-fs-watch is a mess on os x and solaris
simple/test-net-pipe-connect-errors and pummel/test-timers
it's killALL
oh, wait, killall on solaris is not killall
when i run it directly it doesn't crash
hm, now it just passed.
oh, https://github.com/joyent/node/pull/2768
we can land in v0.6, but i'd rather not add anything else to 0.6.11 unless it'll fix one of the tests that's currently complaining.
not on test-assert.js anyay
:)
oh well
sounds like it
x64 can be a 0.8 feature.
yeah
sounds not ready for prime time, not in a so-called "stable" branch anyway
and just not deliver a x64 binary
if someone wants to build it themselves, they can take that on.
yeah, it looks like that version of v8 has some problems in x64
which is 3.9.5 or something
but i'd rather not brag about a feature that is so dangerous.
but let's wait for someone to ask.
if someone *really* wants it, we can point them at it.
but test-assert.js is about the simplest thing you can do.
if that's crashing ever, we have some kind of serious problem.
ok, uploading a new RC, just for the updated ChangeLog
thank goodness for sanity tests :)
looks like the other new failures are just a result of message tests that expect "unknown system error 232" and now get "EPIPE"
meh
yep
Exception in cluster master process: No such module
this is kind of weird:
we didn't add any modules, though...
happens in  simple/test-cluster-bind-twice-v2
i'm ok with either.
so, either we can fix it (after you sleep :) or revert that change and do it later (or just not in 0.6)
k.
if it turns out to be easy, it's no biggie
*in it
but yeah, it'll be a little bit of work to make it all work in windows nicely.
indutny_sleeping's the go-to for readline stuff, though.
it'd be nice to have intuitive signal-ish event handling in ut.
the debugger is very sensitive about that kind of thing.
i think just API design questions, though
not anything super rocket-sciency
good morning :)
good morning
yours, and this one are both on my list.
:)
i'll be back soon.
test, please: http://nodejs.org/dist/v0.6.11/node-v0.6.11-RC2.tar.gz
but, whatever, if there's a v0.6.12, it's going to be tiny anyway
bavck
wait, are you guys talking about the travis test runner, or node's?
reverting the cluster thing reduced the test failures by exactly 1 :)
k
:)
yeah, i'm pretty good at parsing garbled text.  it's my ntave language
*unix, i mean
fs-utimes i'm seeing as well, that works on windows
test/simple/test-net-write-slow seems timing-sensitive
agree.d
starting monday, there is no higher priority.
but `make test` is useless right now
every test must pass in master.
if we have to put tests in a "known-broken" folder or something, that's fine
ugh, this ia32 osx pkg thing is busted.
how does one build uv for a different arch?
oh well.
weird that irc posts again if you push a tag.
retweet every tweet! https://twitter.com/nodejs/status/170623307127861248
no, but that sounds interesting
wowzers!
calls joyent's lawyer right away
right
bnoordhuis, piscisaureus_: so, i think this weekend i'd like to merge in 0.6 to master, and then fix all the lints.
it's time :)
maybe move all failing tests into a group, too.
that's fine.
yeah, you mentioned that yesterday.
i've got a nice big block this weekend with nothing to do
not like you need my permission to keep up with school ;P
i've got the start of a plan for the node modules website, too
that's good!
had a really good discussion wiht maxogden about the stuff that he and mikeal are using for their app.  the framework they've built, and what he's done with datacouch, is remarkably similar to the npm use case.
sounds that way, right!?
if it's not, then the way you're doing it is totally right
getting cwd is actually on purpose, i believe
rather than later on
also, should be just `path.resolve(argv[0])`
and, we want to blow up on invalid cwd even if the path is absolute
path.resolve() returns an absolute path, joined against cwd if necessary
is now a lint machine.
so torn on this.
ie, being in node core
haha :)
like, if we were going to do this, why not have a process.daemonize() function?
seems kinda weird as a command-line flag.
hm...
i see, so it has to happen before it gets to the thread pool.
so, not hard, but certainly weird.
right
why not just have a bash script that wraps node?
i don't really like adding new cli args to node, since now those are arguments that can't easily be passed to node programs.
it'd be a detached process.
like ^Z, bg, detach in bash
unless it's an explicit switch to turn some functionality on or off
that's the correct api for this, imo.
yeah, child_process.spawn(cmd, [args], {daemonize: true}) would be ideal.
child_process.spawn(cmd, [args], {detached: true, stdio: 'null'})
child_process.spawn(cmd, [args], {detached: true})
oh, right.
yeah, agreed.
but that's actually somewhat separate from daemonizing.
child_process.spawn(cmd, [args], {detached: true, stdio: 'null', setsid: true, gid: 'nobody', uid: 'nobody'})
oh, i think uid/gid have to be ints, not names.
right
quite often you *do* want to have a daemon running as root for various reasons.
but like, if we have a node daemon that runs in the global zone of a smartos box, and sets up zones for people, taht's going to need root privs.
or at least, privs to do that one action, since smartos has granular permissions
sure, but sometimes.
but setuid/gid would be nice.
umask is probably not important for windows, i'd think.
but *daemonize* is explicitly "no connection, even stdio)
but if stdio: 'null' is set for cp.fork() then we've got problems
i mean, you could with a *detached* process, sure.
piscisaureus_, mmalecki: wait, how could you have fork() if you don't have the stdio in the child?
jesus.
oh, man... test/simple/test-crypto.js
summoning mighty vim macros
btw, i'm in the middle of linting.
the value of consistency is greater than any one person's esthetic.
maintaining consistency in a codebase can be done either by having very few contributors, or by using a tool.
also, you do have a tool.
it has more people contributing to it than node does?  that sounds dubious.
committers are much more dangerous than contributors :)
*especially* without a tool to keep us in line.
$ make jslint
522 files checked, no errors found.
PYTHONPATH=tools/closure_linter/ python tools/closure_linter/closure_linter/gjslint.py --unix_mode --strict --nojsdoc -r lib/ -r src/ -r test/ --exclude_files lib/punycode.js
Skipping 1 file(s).
fuck yeah.
but, linting tests is probably not something we'll want to do all the time.  it's too slow.
it's actually mostly in line with what vim does by default.
but *any* chnage to functionality changes what's in src/ and lib/
plus, we're in them less.
so the value of linting that every time is higher.
what i mean is, we add to tests, we don't typically go messing with tjem.
it's like 5s vs 20s.
yeah, i'm pretty sure it doesn't.
whew
it replaced it with new pretty formatting.
if you want fancy style, write a userland module.
publish it to npm.
you can format it however you want :)
not the same rule
it was either this lint, or some other lint that just as many people hate for just as valid reasons.
yep
you wanna know what my personal style is?  check out npm.
you'll get no sympathy here.  this is a calculated move.
or none, which is making me slowly grow insane.
MIKEAL YOU BROKE IT OH NOES!!
thank you :)
usually one of them is sensible.
LINT FTW!!
and not a ;?
options = util._extend({ port: port, host: host }, options || {}):
seems like the lint is doing its job, and preventing errors :)
that's a good thing.
why is there a : at the end?
laters :)
ok, i'm gonna go celebrate presidents day by invading a country i've never heard of.
  Local<String> TigerStr = String::New(tiger, 4);
  char tiger[] = { 0xf0, 0x9f, 0x90, 0x85, 0 };
huh?
i'd expect it to turn into "\uD83D\uDC05"
it's not the correct unicode replacement character.
right
right! but that's just it!
that would be the UCS-2 representation of the UTF-16 surrogate pair
but, if you have a UTF-8 webpage, and you put the bytes { 0xf0, 0x9f, 0x90, 0x85 } in it, then check document.body.innerHTML, you'll see "\uD83D\uDC05" in it.
or if you do document.write("\uD83D\uDC05"), then it'll print a tiger.
if so, then we need to get voxer following it, and perhaps figure out a workaround for node.
it seems like we could fix this at the new Buffer(str, "utf8") and Buffer.toString("utf8") API points.
sure.
fixing it properly in v8 would be the way to go
or we could just fix it in v8
we could have a switch to turn it on or something
my example is better.
because tigers are more badass
really, not being able to handle utf8 properly is a huge problem.
sure
what does chrome do for this?
hm.
it must have some way to turn utf8 bytes into a thing that v8 can deal with
right
would i have to copy the string to another buffer (encoding it utf16) and then tell v8 to use that?
hm.. that's kind of expensive, isn't it?  we end up tripling the memory usage for the string, mostly for zeroes, right?
ok, i see, so we'd just be doing the same thing that v8 does, but interpreting utf8 non-BMP codepoints as 2 16bit chars, rather than 1 mochibake
i don't get why v8 can't do this, rather than us use external strings?
but it might be good to focus on one first :)
yes, we definitely have to solve it in both directions.
yes, i don't quite understand comment #4.  http://code.google.com/p/v8/issues/detail?id=761#c4
also, this: " The pre-parser stores indices into the string for later use, so the number of codepoints in the two representations MUST be the same."
right, but it seems like v8 is deciding to not support the most relevant character encoding in the world, because of an implementation detail.  maybe i'm missing something.
this seems like an unnecessary constraint.  can't the pre-parser's index be updated?
i don't think that the ES5 spec really covers that.
right
i mean, why not just not have utf8 methods *at all* in v8, then?
it's looking like we might have to do that.  but when chrome and node are both implementing string encoding/decoding because the v8 api is not delivering what they need, then isn't that an indicator that the v8 api itself is kind of broken there?
if v8 could give us that 2-char string from the 4 utf8 bytes, then that'd be fine.
actually, i don't care very much about indexing.
and, *any* fixed-length encoding is going to hit problems *eventually*
length=2, whatever.  just don't cleave it.
that's going to suck for the people in 10 thousand years.
but anyway... what we really need is a way to take a bunch of utf8 bytes, turn it into a js string (ucs, surrogates, whatever), then back into the same utf8 bytes.
i think we know this now.
utf8 is the correct encoding.
utf8++
we need to deal with ucs2 in js, because of historical accidents that can't be fixed easily.
but you have to deal with them as 2 chars.
i mean, it does.
no
i'm assured by brendan eich that TC-39 will fight over this the next time the get together to fight.
yikes
man.
this whole issue is just so freaking painful.
"string?  you mean char*?"
at least it's not as bad as erlang.
in a way, lua's approach is kind of reasonable.
yeah
ISO-8859-1 or nuthin!
there is no unicode support.
you can have an ISO-8859-1, or you can have byte arrays.
has done async IO in PHP using AsyncMultiCurl to localhost:8080
i mean, in php, you've already given up speed anyway.
no, seriously.  100 requests per second is acceptable in that world.
you just throw more machines at it.
but yeah, writing native modules is how you do everything speed-intensive
i quit the php game before hiphop existed.
it's a real testament ot js and v8 that in node, you first bind to an external lib, then rewrite in JS when you get annoyed with it.
in php, you first write in php, then rewrite in C++ all the parts that are too unbearablly slow
T_PAAMAYIM_NEKUDOTAYIM 
a, right
g'nite
thanks for the reminder
yes!
really, i think we need to just build fat binaries
assert = frozen.
closed 2740 and 2444
they are both nice ideas, but not worth touching that code.
it's a bit like util.inspect.  what we have is good enough.  any changes are just distractions.
for the time being, there are other things that need work.
making asserts prettier is < making http cleaner, making tests pass, etc.
haha, nice :)
i was like, "the code seems like it should work, but it doesn't work...?"
oh, lol, i pulled but haven't rebuilt
yep.  that's how i got out of the vb game
why?
i don't really have a problem switching the two lines.
make && ./node test/simple/test-my-thing.js
the best way to prevent divergence in js code style is to make lint a requirement for a test passing.
the thing is, `make test` has to pass to accept the pull req anyhow
it'd maybe be reasonable to have something like `make test-no-lint` and then have `make test` depend on that, and then lint src/ and lib/
yeah, i get it.
you wanna sling some crappy code around poking around at approaches and stuff.
actually, scratch that.
do it simpler, just flip the order.
mmalecki, bnoordhuis: Yeah, i'm going to add a `test-nolint` target.  gjslint is too slow.
oh
or better yet, a universal binary
we should probably just revert that commit and go back to pushing a x64 pkg
yeah, probably
ok
yeah, good grief indeed.
s/webkit/chrome/
also, we really only care about it for strings, not necessarily identifiers.
(among other things)
as long as it gets utf8-encoded properly on the way back out.
the "right js string" can be multiple \u#### chars, and the length can refer to uint16s rather than "characters", of course.
which would probably make sense, since they have to support *everything* to be able to show web pages anyhow.
but while they're planning the future, we live in the present.
right
that's for tc-39 to figure out :)
chauvinist
but global["🐅"] = "TOTALLY BADASS TIGER" should work
that can throw, i don't care.
var 🐅 = "TOTALLY BADASS TIGER"
it starts with a 0, therefor it's an octal.  8 is not a valid octal digit, so it takes the first string of octal digits = "0"
?
gotcha, thanks.  that's how i read it the first time :)
hahah
whoever does this patch, i'm guessing that matt ranney will send them a bottle of scotch.
if mjr_ doesn't, I will
$ ./node -e process.stdin
i see.
\o/
yeah, it's breaking some random stuff.  the fix seems easy, but i wanted to sanity check it first.
awesome.
doesn't break any tests.  i'm going to add one to verify that simply doing `process.stdin` doesn't timeout.
i guess i ought to make that comment more accurate.
in the meantime: https://gist.github.com/1879756 
seems to.
yeah
yes, agreed.
wondering how high up we can push this bounty...
;)
should start a kickstarter
if JSTeam could raise that much money to help feed people, *imagine* how much we could raise to be able to put totally badass tigers in our js programs.
kewl.  it looks like bnoordhuis already merged or closed most of the issues i cared about.  just need to review andreasmadsen's latest cluster updates.
got mochibaked for me
it has emoji, though
yeah, my terminal doesn't have that one, either
awesome
er, no, the other one.  /o\
that doesn't sound SO bad..
😭
x64 is such a pita
i think we need to release a fat binary
oh, jesus.
waf just never stops hurting us.
oh, right
right, but you'll prefer the variant you want, and node-waf will build to that variant also.
well, node-waf will build ia32, but you have to set CCFLAGS=-m32
ok, trying out this lipo thing for make pkg
then yes, that is more interesting, though still not super surprising.
oh, yeah, just saw your bash prompt :)
yeah, but it's v0.6 specific
yeah, if you like
right, but waf doesn't share that with all the child thingies
they set teh arch
er, CFLAGs
so they need CCFLAGS env to be set.
hm, looks like the pkg that gets built in master doesn't set the prefix=/usr/local.  do we still expose that as process.installPrefix?
oh, no, i guess we don't.
that's nicer.
i'll release 0.6.12 with this, and a fat binary
yes
i'm gonna go get lunch.  sorry for the delay with 0.7.5, was up late hacking on glob and minimatch last nigh
t
hello
hehe.  "snow"
it's insanely nice outside here in oakland.
it's like summer.
you all should move here.
TooTallNate, tjfontaine: is there a way to build fat versions of uv, zlib, v8, etc. so that we don't have to do the *whole* compilation twice?
i see.
or does lipo just glue the two bins together?
yes, that sounds better.
even if it is a slower compile, presumably it wouldn't be double?
is that a posix thing, or just bsd/darwin?
k, then, ignore my comment :)
neat.
guinsanity
oh, holy crap, that's crazy.
wait, so you just position the cmd window off the screen?
yes, that absolutely does not belong in libuv, maybe not in node, either.  that's gui-insanity
Windows is still *hugely* relevant.
we can debate whether it'll still be the case in 10 years or not
yeah
no half-way failure :)
pty as a unix-only thing is fine, though, as long as we either fail gracefully or early-and-loud on windows.
same with extended stdio fd's
anything that people use cygwin INSTEAD of is probably best removed.
igorzi, piscisaureus_: it looks like it's getting caught in osme loop of creating a file, then failing, etc.
i thought i yanked that out, and it's only for removal, not for creating
this looks like it's in a CreateFile call
after replacing
oh, i think the npmrc sets prefix=${APPDATA} or some such
right
so the npmrc sees prefix=
that's what they're finding
but even still, shouldn't the fs.mkdir or whatever be getting an EACCES rather than some other error?
especially rather than looping forever?
npm could abort if there's an environment variable in a config setting that can't be replaced.
and it's getting caught in some loop.
piscisaureus_, igorzi: the thing that's confusing to me is that this permission error isn't getting up to node.
even prints a message that you need to run as root/Administrator
npm handles EACCES from global installs all the time.
ever
maybe the package they were trying to install is called 'config
that'd do it
yeah, it never creates a directory called 'config'
abort
but even then, it'd be node_modules/config that it tries to create first
pretty much any failure, npm aborts.
nice!
orly?
i dunno
yes
only EEXIST and ENOENT would be relevant here.
right
lol bnoordhuis: https://github.com/joyent/node/commit/b72277183f9cb79274d6f8915e02b895c56b2288
for a long time i was floating something somewhat like this, but eventually it got annoying when i was doing more node contributions.
he was wrong.  this is awesome.
no, he did not want the repl to be polluted ever.
holy crap it's so nice.
ie, before i had commit access.
it'd be better to just be Object.keys(process.binding('natives')) probably
but... meh.
no, it will probably not ever change again.
what for?
whatever, that list will probably never change anyway
yeah
i'm going to drag my feet on require('posix') or require('platform') or whatever.
some _ stuff
anyway, i'll go back to making the build.  just wanted to come here and cheer
review please: https://github.com/isaacs/node/commit/7bd7f524c1c598885eac06e5df4190ee3f5cf93d
better link: https://github.com/isaacs/node/commit/v0.7.5-release
ok, i've got a smoking gun that there's a race condition in chmod.
at least, fchmod.
looking at this test/simple/test-fs-chmod.js that fails randomly, if you run it in a loop, eventually it'll crash.  dtruss shows that the stat is coming *before* the chmod.
or at least, this test.  simpler test seems to beok.
async programming is too hard, i guess.
holy shit.
omg, i'm dumb.
this race is so dumb.
oh, wait, no, nvm.
they're different files.  heh.
foiled again.
no, they're not different files!  hah.  symlinks.
morning :)
we're not that far away, really :)
k
kewl
thanks
if that's too much of a pain, a `git merge --no-ff` is good sometimes, too
it'd be nice to squash it down to a few logical changes.
there's a bit of back-and-forth there that's kind of confusing
then you can at least have one "thing" that corresponds to the change
good morning
test, please: http://nodejs.org/dist/v0.7.5/node-v0.7.5-RC0.tar.gz
also, should handleConvertion be handleConversion?
(i know, english was a bad choice for humans to use for programming ;)
how important is it to make 'connections' private and a getter?
s/_useingSlaves/_usingSlaves/g and a few lint failures introduced.  (sorry, still reading...)
can we just add the getter when usingSlaves is set, and not in the "normal" case?
or just document that it's not relevant when using slaves, and leave it as-is?
er, L137
(lint i mean)
but stuff that's confusing is more important
yeah, that's minor stuff
a getter seems like more magic than necessary here.
and still the same type, and connections>maxConnection will always be false
even in the using slaves case?
then it'll always be -Infinity
oh, ok
oh, right if (self._handle || self._connections) return;
what is self._connections when using slaves?
right.
so... why are we waiting on it to emit('close') then?
what is _connections counting in the "usingSlaves" case?
when using slaves, though, what does the _connections counter count?
ok.
why is it not reliable?
so, you'll have a number of connections that artificially higher, because it's counting sockets that have been closed on the child.
yeah, ok
or are they just different?
mraleph1, mmalecki: what bug are you tracking down?
0.7.5 was forked yesterday.
i'm about to push it live, actually.
it worked on v0.7.4
oh, wait... i was saying "all", i guess it errors out now rather than ignoring it?
oh, no, my mistake.  i just don't have my git shell prompts to help me :)  yeah, it definitely works on 0.7.4, but not master or 0.7.5
bisect ftw!
i'd rather just revert for 0.7.5, but if you want to work on https://github.com/joyent/node/issues/2818 then be my guest :)
sweet, thanks
i'll merge in one sec
ohh!
ok, hold on, lemme add it
or is that resolved now?
ok
arrrggg!  forgot to do the build in the x64 shell.
well... now you can see those problems more easily by installing from the msi in the x64 folder. ;)
oh, man, master is in such a state with v8 on solaris right now
standalone v8 3.9.9 seems to work fine, so i wonder if maybe it's just us
i didn't see this issue with my projects that use tap, which always does this
nope
there's no "don't isolate" option
but i don't know what vows is doing
at least then if you want to look at it, you know you're in hazardous territory
do we really need to expose a .connections anyway?
i'm ok with just removing it from the docs and moving to _connections, and whatever, it's not valid.
or, i mean, it's *eventually* consistent, right?
yeah, he needs it for cluster.
we could just say, when you pass a handle to a child, or use cluster, it's not 100% consistent
it'd be better to either have an accurate (or, eventually-accurate, like on a heartbeat or something) count, or none at all
yeah
useing, fluch, etc.
with this change, it's already removed from the API when using cluster, which means effectively, you can't use it or you're giving up that functionality
k
but if that's not possible for some reason, of course, a fixture is fine, too
probably wanna copy the rest of process.env onto there, too
var childEnv = {PATH:...}; Object.keys(process.env).forEach(function(k) { childEnv[k] = process.env[k]; });
np
we got a test out of it
:)
that sucks
wow, so at least as far back as 0.7.1, node's been pretty completely busted on solaris
then most node users doing http client stuff would just get it automagically by default
I mentioned it to mikeal, he'd take a pull req to do it, but it's not a use case he uses, so it's not a priority
that could work well.
i think request can take an agent argument.
neat
ohh, ok.
want to try an npm patch to add this?
also, there's a new request released today, i think.  might be worth updating in npm as well.
gotta run, i'll be back online in a little bit.
yeah
that's why npm bundles its deps, because it needs them to install itself.
now all we need is libuv bindings in php, and you can have node.php
this is hilarious.
which runs on v8!
$ php test/test-tcp-ping-pong.php
Segmentation fault.
The beauty of open source!
ben's a riot.
haha
yeah, it's nice
Good morning
what's *not* causing it?
if you think it'd be worthwhile, i can raise the flag for help from some joyent folks who know much more about solaris adn compilers, albeit much less about node.
./node (no args) hangs.
afaict, the last time it worked was compiled with waf
[root@c39aafb8-5e89-11e1-8f82-5b087ed1ba6a ~]# gcc --version
fascinating!
gcc (GCC) 4.5.2
testing with his patch now..
    at Module._compile (module.js:443:26)
    at Object.<anonymous> (eval at <anonymous> (eval:1:82))
    at Object.<anonymous> (eval:1:70)
    at node.js:551:3
    at startup (node.js:76:27)
> [root@c39aafb8-5e89-11e1-8f82-5b087ed1ba6a ~/node]# ./node -pe 'new Error("foo").stack'
and make test doesn't break everywhere.
works.
-O3 is too high for sunos gcc 4.5.3, i guess?
i believe so.
in this case, with this code, with the planets in their current positions, etc. etc
which is a notable improvement.
no
otoh, but a gcc 4.5.4 is probably easier than updating the whole system to 4.6
since it already appears to be fixed in gcc 4.6, i wonder about the value of reporting it.
building with -O2 now
and building --without-snapshot has the same problem as -O3 when using -O2
i mean, those optimizations are kinda important.
they optimize stuff :)
yeah, i'm going to upgrade v8, take this patch, and then whine about smartos being broken to the people who can dig deeper, now that we have a better clue to the issue.
anyone around to review this? https://github.com/isaacs/node/compare/json-api-docs
bnoordhuis, piscisaureus, igorzi: ^
:)
i plan to go comb through it, but wnat to get the basic refactor out of the way
lol
here's what we get out of this: http://static.izs.me/json-api/all.json
cool, i'll bug him about it
looks like koichi is fine with it
ok, i'm gonna --no-ff this in.
but specifying it is best.
i mean, that's how cp works.
not a bad idea.  i'd take a patch for it, if you feel like doing that
it's dumb having two different dirs for this
it's even nicer having someone else do it ;)
hehe
that doesn't sound right.
pushing, publishing, 0.1.13
thanks!
yeah, pulled in
kewl
godo idea.
then it won't be exposed at all.
i mean, it's not a terribly conflicting, just a few hiccups
i'll migrate it to master.
k, cool
thanks!!
s/ansi/ascii/
but a slightly different one, which also is a superset of ascii
i didn't think that v8 had any special anything for ansi strings.
it's just that ansi IS a character encoding
ok.  i'll try to keep remembering that :)
like, † is 0x86 in ansi, but U+2020 in unicode, and nothing in ascii 
i see
right
:)
because -O3 is probably nice.  3 optimizations are more than 1
crazy
really, th big difference is between -O1 and -O0
well, maybe we test anduse -O2 (which also breaks now)
i see
ahh, i see
hm... how come apache22 does it way faster than us, then?
so, it's doing the $Magic?
i see
awesome.
oh, yeah, i think i saw that a while back
$ gcc --version
Copyright (C) 2007 Free Software Foundation, Inc.
This is free software; see the source for copying conditions.  There is NO
hm.... no, i'm not sure of that.
how would i tell?
i686-apple-darwin11-llvm-gcc-4.2 (GCC) 4.2.1 (Based on Apple Inc. build 5658) (LLVM build 2336.1.00)
warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
$ gcc -dumpversion
4.2.1
but that'd still register as "gcc_old" here, because gcc -dumpversion is 
i see.
sothat's why it works?
so we should perhaps test gcc<4.6.0 and non-llvm as "gcc_old"?
heh
:)
gotta run, i'll be back in a minute or 15
honestly, i could not care less, as long as it works.
and options is the arg you pass to http.request()?
oh, wait, yeah
ooohhhh.
becasue req.uri.protocol is https:
but i'll make sure of that
nono, i think i'm using https.request.
    at Object.onanswer [as oncomplete] (dns.js:140:16)
    at errnoException (dns.js:31:11)
  agent: false }
  method: 'CONNECT',
  path: 'registry.npmjs.org:443',
  port: '3128',
making CONNECT request { host: 'localhost:3128',
onError { [Error: getaddrinfo ENOENT] code: 'ENOTFOUND', errno: 'ENOTFOUND', syscall: 'getaddrinfo' } Error: getaddrinfo ENOENT
i got a bit further
oh, right
still failing, though :)
kewl
which is a separate project
what's the bug in findPrefix_?
so it tries to go up to c: or something rather than stopping at c:\?
== sic?
gotcha
oh, ok
what's sic?
doing that now.
so it loops there forever?
that's not good :)
yes.
ohh, ok
right
yeah
because foo.txt is not executable
it should be smarter
right... but that's not what i want this lib to do :)
because when windows "runs foo.txt" it's smart enough to open up Notepad
interesting
landed b708c1e5f9fd9be7f0daa6efe92461d5961c3215
thanks
meh
yeah
but whatever.
though that will try to run `a.txt` rather than `a.txt.exe`
hm... no, that's a problem, because windows can't run programs that have no ext at all.  ie, "node" vs "node.exe"
pushed to npm
    return process.env[name] || orig
  return f.replace(/\$\{([^}]+)\}/g, function (orig, name, i, s) {
  })
it doesn't replace it with ""...
and you want to use it?
what *should* it do in that case?  throw?
what if you have a folder named '{APPDATA}'?
exactly!!
hahha
then you have to set APPDATA={APPDATA}
er, APPDATA='${APPDATA}'
maybe i should make sure that the $ doesn't have an odd number of \ chars in front of it
almost anything is valid in a filename.
but really, ${FOO} is the standard way to put an env in a config.  unix users immediately grok this.
$ FOO=bar npm get foo --foo='${FOO}'
$ npm get foo --foo='${FOO}'
bar
(or care, i guess :)
*afaik
but that's the only thing remaining for 0.6.12, afaic
i'm adding it to request.  that's going to land today, perhpas by floating a patch on npm's request.
so, it's blocked on me.  which is good :)
are they looking at it?
i mean, not that it's blocked, but that it's blocked on them.
that's good news.
yeah
^--review
(unless youer' just adding that now)
i think https://github.com/davepacheco/node/commit/c08405590daadd83e766cbf3935a6cd5d7c72d15 might already be there
kk
$ npm cache clean; npm view request version --https-proxy http://localhost:3128 --proxy http://localhost:3128 -s
2.9.152
proxying https registry req over squid on http
can you guys hit http://registry.npmjs.org/?
i'm getting ECONNREFUSED
EVERY TIME that gets me.  EVERY SINGLE TIME;
oh, wait, i'm retarded.  /etc/hosts testing.
for example, if you want to do infinite keepalives, AND tunnel https over http, you're out of luck 
the only thing is, if we keep going in this direction with extending http.Agent to do stuff, we're going to run into trouble.
works pretty awesomely, too.
so we ought to think about a better api for this at some point, like 0.9ish
but yor'e in gouda?
nono, i know that, but i thought you were in amsterdam specifically.  i could be mixed up.
heh
in what now?
oh, gopher support
sure, why not.
we can add xmpp and webdav while we're at it
and pull in that ustack thing dap did.
bnoordhuis, piscisaureus_, igorzi: anything else outstanding for v0.6.12?
i'm going to do the release tomorrow morning, now that the npm stuff is finished.
right
but diesn't 'cflags': [ '-fomit-frame-pointer' ] do something awful?
like, disable all the jsstack stuff?
wait, that's right, piscisaureus_ sent me something about that
but if it is SunOS you get '-O3', '-fdata-sections', '-ffunction-sections', '-fno-strict-aliasing'
er, -fomit-frame-pointer
ohhh, i get it
so if it's not SunOS you get -fno-strict-aliasing
sorry, missed a !=
yeah, -fno-strict-aliasing fixes it as well.
ok
sure, whatever.
i've gotta run for a few hours.  i just made a note of this, i'll check it out and read the logs when i get back.
ello :)
er, merging in the last few things
good, good
how's things in omsk?
just cutting 0.6.12 now
so, anything else for 0.6.12?
review, please: https://github.com/isaacs/node/commit/35b36394f16c4e5eb08fa4fb21d797ac11439dc9
test, please: http://nodejs.org/dist/v0.6.12/node-v0.6.12-RC0.tar.gz
ack, tabs in the changelog.  fixed: https://github.com/isaacs/node/commit/v0.6.12-release
bad dreams?
oh, heh
the if there's no problems anywhere, i just strip the RC from the filename
fat magic: cafebabe :)
woohoo!! [01:14|% 100|+ 337|-   1]: Done
release going frighteningly smoothly.  wanna check windows?  i've got 11 failures, but down from 15 in 0.6.11, it looks like.
test, please: test, please: http://nodejs.org/dist/v0.6.12/node-v0.6.12-RC1.tar.gz
it's kind of a joke
ohh, ok
what's it do?
but like, that'd be basically a rewrite, to do it properly.
it'd be nice to port v8 to a clean C api
(/opinion)
yeah
it's a good example of how you can create really good software, even in an objectively bad language.
annoyed
rc2 comin right up!
ugh.  documentation css bug.
ah
haha
and merge in
kewl
once it finishes building the msi etc i'll upload
awesome
i bumped v8 between 0 and 1, so it's good to know that didn't break anything
0.6.12 is out.
retweet every tweet! https://twitter.com/nodejs/status/175692884320849920
dunno if ircretary told you, but that compiler thing looks like it's just for master, right?
:)
also, i released 0.6.12 already
don't sweat it
no, it's apparently working by accident
wasn't required for 0.6.12?
it's not worth having a 0.6.13 to fix a bug we only have in theory :)
he seemed to think it was simply a matter of apache2.2 doing its rsa calculations in a multicore manner
hm
yeah, a little bit
oh, also, he suggested that we probably ought to update our openssl version that we bundle, since it's 1.0 now, and we're on like 0.9.2 or something
right ^
BAM
i'd pulled it, but didn't push yet :)
igorzi, bnoordhuis: can i get a lgtm? https://github.com/isaacs/node/commit/master
how do you feel about tests that hvae to be run as root?
thanks
that's what it would take to prevent problems with chown 
meh
we can just not deprecate it, but call it unstable :)
igorzi, bnoordhuis: wasn't there some problem with fs.watchFile on windows?  I remember talk of replacing it with a StatWatcher in some situations
i see
man, file watching is a mess :)
*update
and then merge it into master.
btw, i'm planning on pushing an api doc updat.
haha
the one with caps?
kqueue = bsd, event ports = sunos?
https://github.com/bnoordhuis/node/compare/pkcs12 <- final review?
one more thing: if you do `fs.watch('some-file.txt', function (change, filename) { ... })` then will filename ever != 'some-file.txt'?
ok, that's what i thought.  i'm going to clarify the caveat a bit, then
those things have a way of failing :)
wowzers
phew
still, not good :)
skjdhfjksdshf?
i do like the space, though.  shows the passage of time :)
#stackvm less to the general node/uv community, but it's a good local oakland-node-javascripters hub.
to me, at least
iriscouch is the company that hosts the npm registry
oh, i see
So scratch "when watching a directory"
k
but that won't use no.de for deployment anyway
just logs are probably fine
nah
but with a bit of color
slurp might even be too fancy
yes, they are nice
thanks.  i miss your lovely baritone.
yessir
it's one of SubStack's
toss yes
uses limechat
er, U+01FFFF
even in the presence of U+10FFFF chars
singleByteService.pipe(httpResponse)
that has to work ^
this does not affect writing buffers
so write("foo\ud800") then write("\uffed")
yeah, let's punt on that
kewl
ah, yikes.
thanks for catching it
yui had something like that
really, ti'd be best if github just did this for us.
*source
i was playing around with a bunch of stuff in that thing, trying to find the soure
er, with a larger number of requests
if you do a run with a smaller number of requests (regardless of how many you tell it to run at once) you get dramatically higher latency
yikes
but what you instead see is this huge jump.
more-or-less stacking
so 1000 100 10 should have roughly the same values for the first 100 as 100 100 10
so, you'd expect that that would throw out 100 requests at a time, since that's the number of sockets it's going to open at once
then the second batch of 100 should be longer, etc.
this is totally killing the joyent portal right now.  basically, they're stuck on 0.4 because of this.
you mean, expected to go up as you go down the list?
but each batch of <numRequests> will stack upon one naother
teh pattern is for numRequests to not affect latency overmuch.
the values are: numRequests numSockets numRuns
but you can also run it with 1000 1000 10
results are still roughly the same
so you should see something like [1,2,1,1,2,1,0,1, ...] for the first batch, then something like [2,1,2,2,4,2,2] for the second, etc.
regardless, the first "batch" (ie, the first <numSockets> lines in each column) should be roughly the same, no matter what the <numRequests> is set to
so, 1000 10 10 should look the same (in the first 10 lines) as 100 10 10 or 10 10 10
it might get *a bit* slower, with more js objects etc being thrown around, but this is way more than expected.
so something is going on
yes
(provided you have node-gyp installed, of course)
yes
now i just need to make it fail gracefully when you don't :)
because then each batch will be more distinct
http_server_lag.js is useful to suss out socket-waiting queue behavior
of course, there's still a million other issues to deal with.
interesting
it'll be like 10,10,10,20,20,21,...
ooh... that's not so good
it just exits completely
ie, if B fails, then it failed.
that's the return value i care about
in bash-land, i could just do `node-gyp clean; node-gyp configure`
without any fancy || && magic
seriously, windows does not make it easy
ugh
:)
ERR! cwd \\davidebb-main\d$\test\NpmTest 
'\\WIN-7KF3EPK4B6V\$C\Users'
CMD does not support UNC paths as current directories.
er, should be C$ not $C, but still, same error
oohhh.... ok
so... how do you run npm in a UNC path cwd, if you can't cd into it?
'\\WIN-7KF3EPK4B6V\C$\Users\Isaac Schlueter\project'
(empty)
CMD.EXE was started with the above path as the current directory.
UNC paths are not supported.  Defaulting to Windows directory.
that's hilarious
and when i invoke it manually (c:\....\node c:\...\npm\cli.js install) it works fine
if we own them, anyway
he said he's invoking it from powershell, but he's gotta be invoking it with the full path to the npm js file, which must be super painful
is there some kind of like npm.psh that we should be providing along with the cmd, maybe?
right
          rimraf_(p, CB)
        // try again, with the same exact callback as this one.
        busyTries ++
        return setTimeout(function () {
        var time = (exports.BUSYTRIES_MAX - busyTries) * 100
        })
      if (er.code === "EBUSY" && busyTries < exports.BUSYTRIES_MAX) {
      }
wait, that code is not doing what it ought to do...
oh, also, this dates back to the cygwin days
kewl/
(no, that doesn't work on unix)
why is it not empty?
bnoordhuis++
srsly?
;P
interesting
is working on setting up a few build slaves on JPC
becasue that shit is making me crazy.
i'd like to have a service where we can push a branch, and then compare benchmarks between then
the first step is to automate a lot of the manual steps that go into making a build.
and spin the disk a bit.
meh
the only hazard of testing for UNKNOWN is that it might take a second longer to fail
yeah
mother nature's too high and mighty.
needs to be put in her place sometimes.
people drive cars.  whatever.
it's like a 20 like module, man.
it's weird
ew
how do you reproduce the problem?
kewl
that sucks
hmm..
hm.  maybe it's just that my windows is in a VM, but it works 100% of the time.
yt?
  // Stat test2/file9. This often fails, even if readdirSync reports the file
  // is there!
  console.log(fs.statSync("test/file9"));
or test/file9?
ToT
o\
o\
and that should actually work
but bigger fish to fry
i mean, node should be able to rename directories, though
unless this is breaking something badly
i guess i better just work around it in npm, then
igorzi piscisaureus_: oh, so apparently that's broken in .NET/C# as well?
either add some flexible timeout buffering, or just do like I ought to do, and unpack right into place.
i see
hey, guys.  sorry i've been kind of awol.
this npm _users db thing looks like it's finally simmering down.
feh!
i've been busy doing security scrambling :)
oh, you mean I'VE been lazy
yeah, that's in the queue
!!!!
awesome!
nice
faster is better, always.  but the promise of making this behave correctly will make a *lot* of subtle problems disappear.
the fact that node only ever sends utf8 is a feature.
this is really great.  thank you very much for pressing on it
but if you really need to do that, there's bnoordhuis's iconv binding
i've been on the web since the dark ages.  so far that i've seen, choosing the encoding is only a path to pain.
it *would* be nice to be able to *read* alternate encodings.
afaik, most unixes are utf8 by default nowadays.
i don't recommend using package managers for python
oh, for python
they're all really bad.
(and i'm actually of the opinion that rubygems is pretty good)
it doesn't handle deps, or versions, or uninstalling
also, when it fails, it leaves a lot of litter behind
makes a note for the new npm site...
that's weird... none of the pages actually say how to install it
sudo easy_install readline <-- seems to be working
*recovering pythoner
s
*platform.
always pointing the fingers.  "That's not pythonic.  That's not pretty enough.  That's not canonical.  Print must be a function."
it's always everyone AROUND python.
the problem is NEVER python.
any time you value anything more than you value winning, you start losing.
oh, so, that reminds me.
this dir renaming stat thing..
what's the best way to work around that?  assume that i cna't just unpack into place.
yep.
if that's the only reasonable fix, then i'll bite the bullet and make the changes necessary to do it
'm actually trying to do
but if i open it for writing... i mean... that's not what i
i'm trying to get its contents.
oh, right
you mean, rather than stat() or read() it?
right
> 1000ms = "forever"
how long of a lag is there?
like, 100ms, 10 hours?
that the stat() is cached for
ugh.
wel... if it's NOT there, then i need to fail.
yeah, that's WAY too long
"it's configurable" = "it's almost always the default"
*json
and then immediately reads .../foo/package.js
right now it unpacks tarballs into .../__foo.npm then moves .../__foo.npm/<folder> to .../foo
so... i guess i'll just unpack in place.  just requires touching node-tar a little bit to add --strip-components behavior
i think the workaround would need to be 'a', not 'r+'
bnoordhuis, piscisaureus_: review? https://github.com/isaacs/node/commit/a10cfba766e2d219b311f12d7854ff448d0d3490
just a *little* terrible :0
so it won't be *completely* terrible.
sure
benvie, mmalecki: it's our way of getting everyone to `npm install eyes` instead
i for one really like not dumping the whole Buffer to stderr
the custom inspect method is used on a few internal node objects.
i'm lost.
end = exit + stdio closed?
got it
oh, child.on('exit') and child.on('end')
so, stdio can only stay opened if a grandchild shares them, yes?
fucks up?  how?
Hm.  so, in 0.6, it doesn't emit exit until stdio closes, yes?
it might be good to have 'exit' mean 'the process exited' and a 'close' event that means exit + stdio closed
sort of like how streams have 'end' and sometiems also 'close'
it'll be the same thing in the vast majority of cases anyway.
let's do it
yeah, exit + close.
i'm going to branch tonight
kewl, thanks
piscisaureus_, bnoordhuis, igorzi: anything you want in 0.7.6, land in master now.
i'm going to try to finish that npm windows thingie first.
it's not actually that hard.
maybe also the node-gyp stuff
0.6.13 will basically just be dependency updating.
:)
i thought you meant the "try again until it works, for 5 seconds" workaround
right :()
* 3733a85 Bert Belder (HEAD, ry/v0.6, ry-push/v0.6, v0.6) Windows: include syscall in fs errors (5 days ago)
* daaccc7 Bert Belder uv: upgrade to 1ac71a31 (5 days ago)
yes, i will
it's handy for some meta cases, and for building alternative module loading schemes.
somewhere along the road, it disappeared in a refactor.
meant to just pull in Lukasz's url parsing thing, but i was being lazy and not branching
kew
yeah
np
but if you want to resolve symlinks and such, it can be a bit more complicated.
no one to blame but himself...
the change to tar was like a 5-line thing.
the change to npm/lib/utils/tar.js is a huge cleanup, though
nice big red section there :)
i think i put that code there
lol
perfect
and where "node <noargs>" kills the process, it should kill the connection
i'd say (what it sounds like you're already doing) a good constraint here shoudl be that you can use it over a TTY or socket nicely, but also, there's no observable difference in the normal "node <noargs>" behavior we have today
but, you can just run "node" to get that
oh, ok, i get it
yeah
yeah
should be -i, though
sure, patch welcome.
Whoops. https://github.com/joyent/node/commit/bcb0cc0b184c61313541002e504948ed21f59dad
luckily both bugs were already closed :)
should really change the commit messages to isaacs/npm#1234
test, please: http://nodejs.org/dist/v0.7.6/node-v0.7.6-RC0.tar.gz
found an npm bug.
one of these days, i'll do it perfectly, and rc0 will be the release :)
it took me 2 years to actually deliver a working js glob implementation, but i did it.
that's coming, dude, i swear
you know you don't have to do that any moer.
and .gitignore is never put into a package (it's renamed to .npmignore if present)
any .npmignore (even a blank one) will keep npm from reading .gitignore
also, with this release: `npm install jsdom` Just Works, on Windows and everything
Let the binding.gyp pull requests begin!
yeah
bnoordhuis, igorzi, piscisaureus_
skype?
k
i'll try to get bac on the weekly or biweekly release schedule.
yeah
bnoordhuis, piscisaureus_: check out the comments the bot posts.
check this out: https://github.com/mozilla/pdf.js/pull/1320
ok, last chance: anything that ought to be in https://github.com/joyent/node/commit/v0.7.6-release and is missing?
the mac binary fatso is building, then i'm gonna drop the email etc.
sweet
yeah, this is The Too Tall Release, for sure.
*cool
npm explore npm -g -- npm link ~/path/to/node-gyp
and (for now at least, maybe temporarily) it rewrites any blahblahb.gyp to binding.gyp
:)
but like, several parts of that sentence don't exist yet.
we should work out an easy way to update it at the top level
C++ has a crappy module system.
i like process.shared.zlib === false
in general, stuff relating to the way that node was built should be on the process object, i think
but the prospect scares me a little bit
no
speaking of which, we should probably update openssl
no
(i presume)
a bash child process
bash uses gnu readline
nave puts 2 dots, because it's a subshell called from within a script, which itself is a SHLVL=1
Hm.  Maybe we ought to think more about what we want to have to expose the various config options.
it'd be nice to have something that just tells you every single one of them
rather than these sort of ad-hoc things
something like :version in vim
bnoordhuis, TooTallNate: thoughts? ^
etc.
exactly what i was thinking
process.config = { 'shared-ssl' : '....' }
but it sounds like something fun for you to figure out :)
if we add a flag in the build process, it shoudl be pulled into process.config automatically
me neither.
     …
   { cflags: [],
> JSON.parse(fs.readFileSync('config.gypi', 'utf8').split('\n').slice(1).join('\n').replace(/'/g, '"'))
{ target_defaults: 
is that enough?
hm, also, we should probably change the 'false' and 'true' to actual booleans
'false'
> process.config.variables.node_use_system_openssl
is that really all o fthem, though?
--no-ssl2 --debug --shared-v8-libpath etc
it looks like there are a few that don't set any default in config.gypi
ones that are just ignored if they're not set, rather than explicitly being set to 'false' or 'null' or whatever in the config.gypi
or, i guess, those get added to the libdirs and whatnot?
:)
?
and should not have 'false' strings
well, whatever the case, process.config should always have the same shape, just different terminating values.
:)
hahah
nice :)
it IS rather odd.
sqlite3 has no dependencies
hi
there's not too much to it
tomorrow?
got anything you wanna make sure gets in?
i'mma pull that into npm and push 1.1.9
don't see anything else in node-land slated for 0.6
oh, yeah, tons of stuff..
k, testing now
i'm gonna update that, too
had pretty much written off 0.6 as a lost cause some time ago
just the one failure on 0.6 os x
wow, lots of tests passing now.
it's pretty common to end up with a process that doesn't die and no idea why
(get it?  normal for you or normal for us)
;)
good morning!
Test, please: http://nodejs.org/dist/v0.6.13/node-v0.6.13-RC1.tar.gz
can you give me a better ChangeLog entry line for it?
ok
maybe this? * Fix ENOSYS errors from fs.watch on older Linux kernels (Ben Noordhuis) 
or * Fix ENOSYS errors from fs.watch Linux kernel version mismatch (Ben Noordhuis) 
or, * Fix fs.watch ENOSYS on Linux kernel version mismatch (Ben Noordhuis) 
i'll change it in RC2.  please still test the code, though :)
ok
compiling smartos on 32 cores
remembered he works for a hosting company...
JOBS=32 not make -j32
oh, wait, no i'm not.
shakes fist at waf
there we go
as far as any process knows, its env is just an opaque list of key-value pairs
doesn't know where they came from
all failures are in debugger
os x: [02:05|% 100|+ 335|-   3]: Done
all smartos failures are in fs.watch names not matching.  those just strike me as invalid tests.
and the cost of fixing it on 0.6 is higher than the value
has been saying that for the last few releases...
v0.8 really is right around the corner, too
YOU NEVER KNOW!
lol
no, it'll be a few more weeks
same thing, basically ;)
time-wasting, always broken, talked up by nerds for no real reason, etc, etc
i thought it talked over dns
assigns copyright to the massachusetts institute of technology
oh, ok
the c-ares license is kind of weird...
which i suppose IS the original MIT license, but it's odd.
most MIT-licensed software is not copyright MIT
require("dns").createServer(function (req) { ... })
bnoordhuis, piscisaureus_: also, iirc, c-ares insists on using /etc/resolv.conf, and on os x, getaddrinfo is more reliable than that file.
occasionally, resolv.conf will not be updated when the network settings change
so, switching to VPN for example makes dns queries all start failing for several minutes
piscisaureus_, igorzi: wanna test out the x64 build for 0.6.13? Use your windows powers to find problems with it? http://nodejs.org/dist/v0.6.13/x64/
i'm still a bit hesitant, though.  i think i'll just leave it out of the announcemnet.
email in just a sec
so they have their own env
oh, ok
right
$ env | grep foo
$ fn () { env | grep foo; }
$ foo=bar fn
foo=bar
seems like it still works, though
had to clean up the merge a little bit
yep
but it's only grown more delicious having had some time to age :)
ok
investigating
wait, wtf?
d'oh.  fixing.
whoops
yeah.
thanks
there is a bit of oldness that i need to correct, though
oh, no, nevermind.  i was thinking that it needs to be a new Timer() but we weren't doing that unless its after=0
test-dgram-pingpong is very noisy
review, plz ^
ok, back to just the usual test-debugger-repl failures.
then you can keep clobbering it until it's ready to merge in
yeah, it's handy
namespacing with _ is fine.  we've done that in a few places already.
the single level of native modules is good, i think
if it contains that many files, then it ought to not be in core, i'd say.
say what?  leading _?
sure, if it's not intended to be used as-is
but if it's possible to clump them into, say, dns_server.js dns_client.js and dns.js or something then that'd be fine.
but at the top level, there should be a single dns.js that exposes everything you need sensibly, and only a small number of dns_*.js files.
it'd be nice to do that with http as well, actually.  it's unwieldy to handle a single multiple-KLoC module
like, 2-4 at the max.
:)
DNS is a core internet technology.
i mean, not 80 files.
dude, you land gopher support and i'll have to go all caddyshack on that commit.
hahahaa
every internet program uses dns.
(hence, dns)
no one's launching their startup on telnet.  and even if they are, you're telnet'ing to a hostname, not an ip address.
telnet is strictly geek-niche stuff.
re gopher support in node-core: http://www.imdb.com/title/tt0080487/quotes?qt=qt0484905
kewl
oh, ok
oh, right
so it's just 2922 remaining for voxer's repl to work as desired
right
right
I think this is a desirable feature.
it's basically not adding any features, but just making it work as one would expect.
one nit, and one additional request:
additional request: docs and tests.
i figure sigwinch might happen less often than getWindowSize(), now that i think about it more, so nevermind.
nit squashed :)
and an example of changing some stuff in a running program would be really helpful, but you could ask mjr_ to write that ;)
there are some repl tests that start node in a child proc right now.  add some that run a repl in a net.Server
also, we have the info, so may as well.
since tests will always run in a place where you've just configured
but that's fine 
what's that actually breaking?
why don't we want the EE listeners array to be lost?
oh, i guess it does look that way in the docs...
and we have some optimizations in there for a single listener, right?
deleting an array is faster than emptying it
let's "fix" this by changing the docs, then
function, you mean?
k
(re listeners() returning the same array all the time)
bnoordhuis, TooTallNate: k, whatevs.  i'm ok with it.
great.
or is that already in?
summercamp is fantastic
after that :)
merging v0.6 into master.  please don't land anything for a few minutes.
*docs
it's a bit late since v0.6 is probably done with, but i really gotta get the version numbers out of being hard-coded in the dos.
makes merge commits even more tedious
er, https://github.com/isaacs/node/commit/46376888cd2afb5d34bfdb08ba7f9d1b4c6b5d4a
review, please? 46376888cd2afb5d34bfdb08ba7f9d1b4c6b5d4a
thanks
hm.  maybe we should just exclude v0.4 docs in the robots.txt.
bnoordhuis and igorzi are also quite involved with libuv.
i try to stay more on the js side of things, but i do get pulled into c++ more often than i'd like.
hi :)_
;P
awesome.
kewl
yeah, there's some kind of weird race going on.
but some pointer or comment at the very least woudl be really nice.
don't feel too obligated.  if you decide to keep cranking on candor instead, just lmk, and either i or ben or someone else can dig into it.
thanks :)
but not all the time
it actually isn't just a race condition in teh test, as i'd originally thought.
just most of the time :)
the debugger itself seems to miss debugger; statements encountered on the first-tick.
i suspect a v8 change made it from a rare occurrence that it breaks, to a rare occurrence that it works
kewl
non-array option-5 is out.
so, yeah, i'm reworking this stdio.js proposal based on some of your feedback.
also, that allows spacing it out.  like, if you ONLY need to set fd=5, you coudl do streams:[null, null, whatever]
i think this api is definitely capable, and only has a few edges to sand down from a usability pov.
at the very least, we can do the same pipe_wrap trick we use for child_process.fork, and just stream.pipe() it together in javascript land.
the big question is whether or how it'll work for windows.
which will be a little bit slow and terrible, but i really think most windows programs are not doing this anyway.
and that perennial nodejitsu complaint can finally be put to rest :)
the other advantage of this will be that we can implement child_process.fork all in JS, by using this API.
oh, right
oh, that'd be fd=3
yeah, working on that :)
or something
var child=spawn(c,a,{streams:[null, 'stream']}); http.createServer(..).listenHandle(child.streams.anonymous_4)
and then a stdio member for the others.
but i guess it is a bit of a clumsier api that way
if we were *only* doing stdio 0,1,2, then the stdio:{in,out,err} would be nice
yeah, so, that's what the array was, but i'm bumping them up by 3
and you don't pass numbers in it, though still?
but i was mostly keeping this separate and name-oriented for your benefit :)
hahaha
ok, so, i'm going to udpate it then to just be an array called "streams"
your = windows
and we'll just map child.stdin === child.streams[0] for compatibility
but if you want to look at some other stream, look in teh child.streams array at the fd
like, pass in a fileReadStream or a socket or whatever.
or the stream from another child proc
it should be a Handle object.
yeah, if we really want to make this robust, we need to get rid of fs.open returning an integer.
since it does actually return an int
true.
set up a pipe_wrap pair or something
in the child proc
spawn(c,a,[null,something]);  // in the child...  http.createServer(..).listen(process.streams[4])
fair enough
right
how would a program normally detect this?  like, not in node?
k
so you just say "I know that FD #4 will be a thing.  Use that one."
rigth
k
so, we could have something like: server.listenHandle(createHandle(4))?
createHandle(4) i mean
ok
what would that do on windows?
so if that fails, we throw or emit('error') or whatever, and it's up to you to deal with that.
sure.
so you do net.Socket(fd...) or net.Server().listen(fd...)
but i guess it's more consistent
or we could do net.connect({fd:4})
that's a departure from listenFD()
but like, either in the .connect() and .listen(), or in the ctor
is it possible for a server to listen on a fd, and also on a port?
oh, right
damn.  yeti probably got 'im.
aha
well, listen() doesn't return the server, i don't think
hm, no, they can't
it just silently doesn't work
the API doesn't really make you aware of that.
well that's shitty :)
resisting the urge to try to solve every problem ever
lates
ok, have fun!
stay away from yeti
they're roudy drunks
but in a way that plays nice with windows and isn't quite as ugly
if you do: spawn(c,a,{streams:[,,,null,'stream']}) then you'd set fd=3 to /dev/null, and have a stream object in teh parent that corresponds to fd=4 in the child
at least, they pretend to be.
fd's are numbers.  sockets and pipes and files: all the same kind of thing, for the most part.
it's really very simple on Unix.
windows wins in some areas.
one sec
kewl
yes, should be one commit, ofcourse.
baller!!
ah, ok, kewl.
er, no, i'm thinking of process.config
doing taxes.
trying to figure out how to deduct time spent in IRC as a business expense..
taking a look now
i get it a LOT on OS X, but only very rarely on linux
lion, sl, leopard?
which os x?
i wonder if that has to do with it
i'm on 10.7.3
i've got a 10.6 mac i can try it on
interesting.
bbiab
tnx
i can land step 6 into master first if that's easier
i'm getting a merge conflict
ok
step 6 = disconnect stuff.  step 7 = kill workers when master dies
kewl
ok
k
fair enough, i'm convinced :)
hahah
:)
i'll land in a minute if it's working
or comment.  but you can go to bed, yes :)
thanks
simple/test-child-process-fork2 fails for me sometimes, too
which is... weird?
yep, only simple/test-eio-limit is failing now
yep
also, some other random failures still.
fork2 and debugger-repl
hola
but unpacking it twice is not ideal as a way to solve that
hm.  yeah, we could unpack it directly in place, as well.
the problem is that if there's more than one top-level thing in the tarball, it'll break
can you post an issue, with these links?  i
ok
i'll fix it tomorrow
without a temp folder dance.
all the cleanup happens in the pack or unpack now anyway
yep
fstream has a few blank spots that need to be filled in first.
so that the filtering can happen in the fstream.Writer
k
windows users are starting to realize there's this "npm link" thing that they dont' get.
extracting to a folder
tar.Parse will always show you everything in the tarball.
to do otherwise would be a lie :)
0.1.14
it does now :)
just published a new fstream
but!  it HAS stopped at the debugger; statement!
it just doesn't show it
STL.
ugh.
i'm not really convinced that including STL stuff is a good idea.
it opens the door to a lot of c++ wankery.
there is pragmatism in not having std::blerg all over our codebase.
we have to think of the social ramifications.
yes.
node should try as hard as possible to be as pure-C as possible.
we can't do that, obviously, because of v8
but stil, don't go there.
yes, i know, there's that one cafe in that neighborhood that's really good.
and we've got plenty of reasonable c++ good-parts in node already.
i'd be ok with that.
in fact, it could simplify a lot of things.
that's wrong
ugh
ahh, i see
the delete thing
can you and/or he squash and rebase into a few logical commits on master?
i see
it works for me on windows now
i meant to go through and fix that other AV thing.  tuesdays suck, man.  every meeting happens on tuesdays
and no warning about the symlink not being acceptable.
oh, weird...
:)
nono, i'm reproducing
fc5b53c
 	 107	
 	 108	
+        // FIXME: when #2922 will be approved, change this to
+        // output.on('resize', ...
+        self._refreshLine();
110	 109	
as long as #2922 removes that //FIXME i'm ok with it ;P
ok.
indutny_sleeping bnoordhuis: either of you around?
a heist?
and i can't seem to find out how to tell when someone connects.
but the v8 debugger api is very large.
i'm not happy with this fix.
oh!!  like, in real life, where you are?
anyway, the debugger-repl races have been very exciting.
no wonder you're up in teh middle of the night
that's exciting.  not entirely in a good way :)
wow
and the third is the race to kill teh child before the parent dies.
the first is the race to connect to the debugged process before it emits the line=1 breakpoint
the second is the race to get the "Can't backtrace now" message before the test gives up
there are THREE race conditions that led to orphaned processes from those tests.
depressed, in fact.
the changes to the tests are fine, but setTimeout(Module.runMain, 50) is an admission of failure.
what would be better would be some kind of global.v8debug.onFirstConnection = Module.runMain
there's this wait_for_connection boolean that allegedly tells it not to go until there's a connection, but it seems flaky
50ms seems like a reasonable amount of time to wait, though.  it's short enough that a human won't notice, but long enough that it's plenty of time for the server to be ready
i'm not 100% opposed to landing this.  i'll just have to drink to soothe the pain.
it seems like the alternative is to wade into the v8 guts.
which is alwasy unpleasant.
ok.  whatever.  i'm sick of this test failing every time.  i'm landing it.
THATS WHAT REVERT IS FOR!
dinner time.  g'nite heroes.
it's sending the breakpoint message
er, not watched the tcp.  dug into the bit that's trying to do the sending.
it's just before the connection happens
it's retarded.
that's why teh 50ms thing makes it work
yeah
hola
but it looks like v8 sends the "breakpoint" message for line=1 before the client is ready to receive it
ha
yeah, it *shouldn't* be necessary
so i added a timeout before we call Module.runMain()
hm.
if you feel like doing a patch for this, then that'd be fine.  or, we could just figure out why it's hitting the breakpoint before there's a message.
like, it'd be nice if we could do something like: global.v8debug.DebugServer.onConnection = Module.runMain
or something like that
that sounds more reliable
i'm not very familiar with the debugger api, and it's kind of huge.
ok
sure
yeah, i guess.
i dunno if they've been added recently, or if there just wasn't any desire for them
test/simple/test-dgram-pingpong.js is my next victim.
scope, scopes, gc
getting this from here: http://code.google.com/p/v8/wiki/DebuggerProtocol
gc would be cool
that isn't important, though, really.
the more important thing is to work and not break the tests half the time ;)
hi
c781f17
git revert c781f17
is it possible to just infer --debug-repl-start from --debug-brk?
oh, i guess not..
since it doesn't mean that w're necessarily going to get a repl connection immediately
so, let's say, yo udo `node --debug-brk foo.js`
right.
the issue, then, is that you might be about to connect with node-inspector, or some other debugger client?
which doesn't know to send a `c` to start?
oh, i guess it doesn't matter... since you're just going to "continue" right into that anyway
*hold on
and there's really nothign controversial between there...
ok, it passes meat-brain scrutiny.  pulling and testing now.  hold one
  3   var i = 10;
  4   while (--i != 0);
  5   debugger;
  6   return i;
  7 }
$ ./node debug --port=13683 test/fixtures/breakpoints.js
(^C again to quit)
< debugger listening on port 13683
break in test/fixtures/breakpoints.js:5
connecting... ok
debug> 
debug> 
  1 debugger;
  2 function a(x) {
  3   var i = 10;
  3   var i = 10;
  4   while (--i != 0);
  5   debugger;
  6   return i;
  7 }
$ ./node debug --port=13683 test/fixtures/breakpoints.js
< debugger listening on port 13683
break in test/fixtures/breakpoints.js:1
break in test/fixtures/breakpoints.js:5
connecting... ok
debug> 
i sometimes also see this:
like, it misses the one in lib/module.js, hits line 1, continues past it
but it's not much less hacky.
the approach seems like it might be a bit more efficient than a dumb 50ms timeout
i'll try to ping some v8 guys and see if there's a hook we're just not aware of
probably lazines.
oh, hahahah
she should not make notes of when requests.
like, instead of getting 'PING' or 'PONG' it gets a buffer of length=0
it's very sporadic.  happens for me ~1/200 times
thanks!
i like it
is that some kind of krazy nordic word?
and provide a clearer failure
interesting
for sure.  apparently this is not one of them, though.
oh, it's on master.
blazow.
thanks, bnoordhuis
yeah, we need that in v0.6
one sec
great :)
i do a little, yeah :)
it's a wart.
sorry :)
where's that at?
it's a fanTAStic language.
nah, python and ruby are lost causes.
algol, man
it's great.
too much synchronicity in their core stdlibs
it got a lot right.
i think i might be only like 25% kidding on this one, though
sometimes can't tell when he's kidding and when he's serious...
i did not know that.
  writeReq.cb = cb;
  writeReq.oncomplete = afterWrite;
oh, wait, we do, nevermind
right
    return false;
    this.destroy(errnoException(errno, 'write'));
  if (!writeReq) {
  }
i mean, it seems straightforward enough that we have to either call the cb(er) all the time on failure, or only call it when it succeeds, but not both.
ok, kewl.
piscisaureus_, igorzi: i lean that way myself.  ok.  so, we need to call the cb every time.
unless it's extremely obvious that a function was called inappropriately -- wrong args etc -- then we should emit('error') rather than throw
and, actually, there's a lot of cleanup in .destroy() that we're skipping as well.
that's not great.
just in case you'er swallowing 'error' events
*risky
it's not particularly riky.
error events are catchable
throws are not
yeah
it's pretty clearly winful in this case, i think
but for now, it just makes issues harder to handle in the wild.
https://github.com/igorzi/node/commit/f8932effcddd1a0ee07e3d3dfd68fcfd1d6824bf#commitcomment-1121404
bnoordhuis, igorzi: it should probably be a errnoException('ECONNABORTED', 'write'), too
better to keep the same error in v0.6
though actually that would perhaps change error handling logic somewhere
hehe
oh, ok
yes, 0.6.14 is waiting on that, and igorzi's socket connect queue throw, and i'm just testing a pretty minor npm bugfix release to put in it
> require("os").networkInterfaces
[Function]
> os.getNetworkInterfaces()
os.getNetworkInterfaces is deprecated. It is now called `os.networkInterfaces`.
{ lo0: 
releasing npm 1.1.11
very auspicious version number!  lucky!
auspicious version numbers be damned.
d'oh!!
forgot about that.
publishing 1.1.12
i thought it was a separate thing
oh, ok.  i didn't realize that
the built-in debugger is nice.
oh, right, duh.  v0.6
heh
wow, that's super old..
sweet :)
should have something very soon
ha!  no, it doesn't.
unlink and del traverse it
can we make it work the unix way in node?
er, unlink gives you EPERM
also, lstat needs to say that it's a symlink.
as of 0.7.6 it's still claiming to be a regular dir
nope
well, considering that isSymbolicLink() is the only difference between stat and lstat, yeah ;)
but i haven't found any other problems yet.
i forgot to update the AUTHORS, so there'll be an RC1
k
you get a chance to test 0.6.14?
oh, or http://github.com/isaacs/node/commits/v0.6.14-release
about to update authors and force-push there.
kewl
i'd prefer not to do it in 0.6 for philosophical reasons anyway
it's a change to semantics
k
i'm on it
wll, i wanna get it in the release.
all the links i see point to http://nodejs.org/docs/v0.6.14/api/fs.html#fs_class_fs_stats
i think it's already fixed, maybe
fixed there ^
it's good everywhere
nothign relevant
oh well.
oh, whoops, i left the date as 3/22
:)
never on windows
"there aren't even that many files on the whole machine!"
pretty wild, huh?
who'd ever need to open more than 256 files!?!?
-- Some Forward Thinking SunOS Engineer, ca 1980-something
so, yes, we need to do that there, then
yeah
(exiting with no error)
and vt00 is too geeky
i think calling it "terminal" is good.  "ansi" means a LOT of things.
sorry, just got back
*vt100
and hard to type
sure, that's fine,too
it's not a webpage.
meh
returning a new emitter seems awkward for a thing that's actually happening on the existing stream
s/connects/wraps/
in this case, it's just "oh, also do this other event"
we could even just hook onto the "on" method, and only emit if there's a listener.
but yeah, keypress parser should be an implementation detail.
let's actually hide it
yeah, we could even just patch the readline object in repl.js
actually, scratch hiding it.  that's too agressive, probably
sure
if you don't think it's worth patching in libuv, we should pull artur's workaround into lib/fs.js, i thikn
it's confusing to have fs.unlink not work when rm/del would work
hm.
it'll prompt you
rm won't either, unless you add -f
hm.  i see.  so, rm without -f prompts, but unlink(2) just goes ahead and unlinks it, if you have write perms on the dir.
i agree
but if it gets in, i don't think anyone will mind.
ie, i'm not going to do a node release just for this.
it doesn't rise above the v0.6 waterline, though
this would also be confusing in other libuv's
yeah
then it'd also be possible to do something funky like {input: fileReadStream, output: fileWriteStream }
why not just explicitly specify input and output streams?
{ input: socket, output: socket, ... }
instead of { stream: { stdin: fileReadStream, stdout: fileWriteStream }, ... }
still reading
Good morning.
bnoordhuis, piscisaureus_: an OOP "file as object" API would be nice, but i don't know that we need to majorly overhaul fs for that
ryan and i had talked about a promise api a bunch of times.
or whatever
the idea would be something like:  fs.open("path").write("foo").close()
i don't know.
that's what jquery did
there've been a few things, but they focused on the wrong parts of jquery
nquery is jquery over dnode
that example above would be better done as fs.writeFile("path", "foo") anyhow
the thing is, you don't often just open a file, write one thing, then close it
:)
:)
or that, yes ):
yes, that would be nice, though
my only beef with candor is that it's taking indutny from us.
*mistake
the arguments.callee business was a huge mistane
look at SubStack or tj or mikeal
or, creationix, for that matter
the thing is, though, you don't really HAVE to be a node-core committer to be a big deal in node-land.
though he's left us for other *uv's :)
we're not going to turn away committers because we have enough committers, unless there are so many active committers that it's a problem.
but like, if pquerna or felixge or ryah want to come back, they'll be welcome.
v89 = v8 + fat finger
awesome
sucks, i know
sure, one sec
running make test now
gonna try the repeated abusive test...
one sec
tests seem to pass ok
whoops, had a stray v0.6 node runnign
i think that might be a bug in the new repl stuff, though
stdin closes, but the debugger doesn't quit.
looks like a little thing, probably
right, so i think maybe the debugger isn't catching it, or it's not getting emitted
yeah
100 tests in a row passed with it
and it's the least hacky
it's not a possible fix.  Have confidence!  it IS a fix!
please change the message
so i'm convinced
yes.
for sure
lgtm, though
thanks!
:);
more so than before
travis has been pretty pleased with us lately
code looks good, and test ++
if not, that's fine, too
ew
 	 173	
 	 174	
+    self.emit('exit');
+    self.rli.output.write('\n');
hm.  yeah, i guess that's true.
so just do this in there instead of emitting?
what's wrong with emitting 'end' there?
maybe add a readline.end() method
so, instead of this.input.emit('end') just do this.emit('end')
just emit on the rli itself, and exit the repl based on that
yeah, don't emit anything on stdin.
hi
it just says, "Hey, request, use this proxy!"
oh, ok
:)
sweet
(would be surprised if it did.)
as long as it doesn't break anything else
yeah, seems uncontroversial to me as well
g'nite bnoordhuis
*thought
    curl: (23) Failed writing body (0 != 5437)
yeah
whatever it is, it was broken in 0.6
yeah
not high priority.  maybe someone else will fix it :)
post an issue i guess
*it
yes, axe _charsWritten unless koichik speaks up to save t.
  '0.2.0': '2012-02-22T11:04:45.694Z',
  '0.2.2': '2012-03-22T05:22:24.613Z' }
not a big deal, but probably unnecessary
there were some slight api change.s
matchBase means that "*.js" will match if the basename matches, so "x/y/z.js" would match
without that, it'd only match "x.js"
> m("x/y/z.js", "*.js")
> m("x/y/z.js", "*.js", {matchBase: true})
false
true
yeah
i should add a .defaults() method on minimatch, like how request has.
it's handy
huzzah
ok, minimatch.defaults(opts) works now on 0.2.4
and it'll use those opts each time
haha
so you can do: mm = minimatch.defaults({ matchBase: true }); and then later, mm(p, "*.foo")...
now i just gotta have npm use ansi for its coloring
i'm planning on writing a blog post on "the modules of npm"
like, the things that it uses
yeah, in the process, i've been pulling stuff out like crazy
i really want npm to be this thing that basically anyone could write, by mostly assembling pieces.
:)
or, just use bunyan or stoopid or something
the logging stuff needs to be pulled out as well.
honestly, that's enough for the vast majority of programs
yeah
hm.
what do you need a data store for?
but i guess if you want to query, then that's not so great.
like, fs.createWriteStream() and keep writing to it
oh, i see
you know, you could just like, write to files.
what's up?
that test is a poor substitute.  but, for the moment at least, it's the only substitute we've got
yes, we need CI and time/memory tracking of startup
the switch is especially weird
i se
i see
yeah, kill it
or move them into pummel
rage starts around 200ms for any given test
the crypto-dh.js test always takes like a second on my system
we should clean up some of the slower tests, too
huzzah!
thanks
I'm going to make 0.7.7 today, release tomorrow
anything else that ought to get in?
i'm just waiting on dap's dtrace fixes which should be coming today
ok, and tls fixes :)
weird
it's odd that it's only off in the last byte
got up to 490 before failing
i=0; while ./node test/simple/test-crypto.js  && [ $i -lt 1000 ]; do let '++i'; echo $i; done
nic
nice
any idea?  it seems to work here, but travis always fails on it.  linux breakage?
hm, actually, looks like it's timing out
eeewww fs.read(fd, 1024, 0, 'binary', function(err, chunk, bytesRead)
old skool
man.  it would be *awesome* if our tests passed on travis almost every time
then failures would actually be relevant.
ah, ok.  that logging was unnecessary this time, it seems.  it's failing way sooner than that
oh, no, .7 landed today, apparently
which is the latest "version" tag.
oh, wait, it seems like it's working..
the times are just too wild.
we might have to not have fedor on it
6pm UTC is i think 11 here?  or 10 maybe? that'd be awesome.
yeah
heh, indeed.
isn't 6pm utc pretty late for fedor?
like 11pm or something?
omsk
by "dutch saying" do you mean "a thing you said one time"?
that's a dutch saying?
because it's not going in 0.6
i mean, not unless they're willing to not work on 0.6
i would probably keep using module.exports, becuase i frequently have require() cycles
note that fs.open(); fs.stat() CAN enoent, since you can unlink between the open and the stat, so the fd now doesn't have an entry in the file system list.
just orphaned in hard disk limbo
then if it doesn't have a path, it's gone
yeah
i see
wow, that's kinda dumb
and we should not mention it until 0.9
so we can say "What do you mean?  That's been there forever!!"
yeah
ok, dtrace stuff is out for 0.7.7
we've got a make race
i'll have a tag to review in a few minutes
anyone care to review? https://github.com/joyent/node/commit/v0.7.7-release
i guess those two other commits are fine on master.
i've gotta run.  i'll drop an RC tonight or tomorrow morning.
c++ is ugly by design
it's all those beers.
piscisaureus_, bnoordhuis: is it necessary to use Local<Value>::New(..) for Null() and Undefined()?
i mean, if it gets gc'ed, it'll just be Undefined() anyway
ahh
but if you have a Local<Value> foo = Null(); then that creates a local value, right?
or do you actually have to do Local<Value> foo = Local<Value>::New(Null())
c++ is always ugly
hm.  ok
it's all those beers
yeah, guess it's just ugly noise.
the SlabAllocator is nice.  very simple.
hah
just checking
that test is super annoying.
that's different
fair enough
haha
so, if it's not debug, then we call context.Dispose()
oh, right
should we be V8::Dispose()ing before the locker dies?
4b64542
oh, derp.
right
less morbid, more like ChildProcess
yeah, that makes sense
close is when the stdio is closed.
exit is when the process exits
yes
or the ChangeLog?
sorry, i should've caught that
yeah, having a 'death' event is unnecessarily increasing the semantics.
Debug\node.exe test\simple\test-repl.js fails
but, as far as i'm concerned, i'm pretty much ok just saying that cluster is rewritten, and a new thing now, so read the docs.
it's mostly compatible, but the 0.6 cluster doesn't really have much to it anyway
# CHECK(entered_contexts_.length() == 0) failed
# Fatal error in c:\node-v0.7.7\deps\v8\src\api.h, line 453
and 2) it's an unstable release.
fix for 0.7.8
it's only broken when in debug mode (but indicates a bug, no doubt)
so, let's log it as an issue and move on, i think.
but i am not going to be spending jsconf doing a build :)
no, it's jsconf on monday
some breakage, some of it silly, some of it concerning, but none of it new except this
but if this takes a few days to fix, then it gets annoying.
but if it's breaking node, then really, i could not care less about fibers.
yeah
but really, supporting multi-threaded extensions is pretty far down on the "nice to have" list, imo
sweet :)
that's really really awesome
just thinking outside of the box, and in a different box.
but imagemagick is not
some things, of course, like inotify or zsock, are just fundamentally platform-specific
and even more of the world's non-developers use windows, and will become developers if we make it easy enough.
ok, i'm renaming death to exit
review? https://github.com/isaacs/node/commit/73fc34b857b7f80886c1de79f63b670b8bef219e
oh, hrm
right, because of stdout.
yeah
and stdin
no, it'll only happen once
if we want to put backwards compatibility, maybe it should have a custom .on, but then that's getting a little too clever.
if you wanna take it out, then you have my blessing.
alright, they're rotating: http://nodejs.org/
thanks for merging that, bnoordhuis
hahah
it's been lovely, thanks
what's up?
ie, get people onto v0.8 as fast as we can
roughly the same as v0.4 after v0.6 came out.
we DO have a lot more users than we did with 0.4
i'm sure joyent and voxer and yammer and others would as well
let's not declare it dead, but just declare it sleeping
like, if there's a major bug that's easily fixed in a very low-risk way, sure, we'll do a build for it
yeah
but it must be low-risk
sure.
unless you're really THAT much of a masochist that you really enjoy doing maintenance builds, though, i don't want you spending a considerable amount of your time doing this.
by automating a lot of it.
i'm working on getting the maintenance builds to be virtually zero effort.
we need you pushing on master.
like, *everything*
once we get the CI stuff set up, it's going to be easier to track test results and performance.  then the next step is a way to say "Make a build from commit cafebad08080", edit the commit message, and then it does everythig
the blog post, the tweet, the emails, the tag, etc, etc
if we have something like that, then a) weekly releases are not hellish, so we can move master faster, and b) 0.6 maintenance is a lot easier.
k, what do you have in mind?
*security
i'd like to base the dates off of whenever 0.8.0 comes out.
like, 6 months for any bug fixes, 9 months for critical securyt
yeah
I'd like to be release-worthy by June 1
and that :)
domains and new stdio child_process api
that's a big new feature for node :)
but the things that we're actually committed to are domains and stdio fixes
my feeling is, if it's a good idea, and it's done in time, sure, throw it in.
a first step should be to expose the open handles from libuv somewhere in node.
sorry, not open handles, open requests.
the rest of what we need is pretty well finished and working at this point
like, "why is the event loop not exiting"
domains is shaping up to be something that we can do largely at the JS layer with API.  i'll take a swing at it.
it's a major pain point
that will be very helpful for debugging.
but it's not like that's really a bottleneck most of the time
just habit
also, no way to break
and Object.keys(..).forEach(..) automatically implies that
it's pretty common to do for(i in obj) if(obj.hasOwnProperty(i)) { for safety
speaking of fast, and break, i'm off to breakfast.
i'll be jsconfing today, online sporadically.
in the binary?  like, as a string?
bbiab
and yes, there will be a new 0.6
ryah, piscisaureus_: We should shoot for May 1 v0.8 feature complete, and try to release v0.8 by June 1
if nothing else, then just to update npm to 1.1.15
:)
Node has my permission to not show the npm license in the node installer.
tyanks
dunno
haha
are you talking about the effectiveness of your knowing, or the moral character of the knowledge?
then it's Very Important to use them well.
unless you're an asshole.
but seriously.  this is like a who/whom thing.
no one outside the royal family and a few lonely high school teachers actually cares.
probably you meant "well"
yeah, then it's "well"
i likes me some grammar, too.
whomever enjoys most well the grammar, knows who is good.
what do you need Wix to do?  just display license? and not to ask to "agree"?
"all right" is fine.
or "alright"
calling, one sec
"is that w"?
oh, ok
but otherwise, have it be a property of the pipe handle.
hm, right.
so let's add 'ipc' which is a createPipe({ipc: true}) or something.
hahahah, it's fine, that's what this exercise is for.
paints his bikeshed in piscisaureus_'s favorite color.
sure
well... we do this now.
ok, sure, let's remove that.
sure
yeah, i guess we just set this in the JS layer now anyway
but they're still otherwise just normal duplex stream objects.
right, ok.  that makes sense.
sure.
i see, yeah, we just communicate over fd=0 with child_process.fork()
but i think we ought to promote Pipe to a first-class citizen.
it should return a Pipe object, like it does now.
it's more that the Pipe object is not well documented.
just, instead of new Pipe(ipc), it would be new Pipe(options)
what about something not-so-opaque that can primarily be used by spawn?
because you do something like:  var p = createPipe();  spawn(..., { stdio: [p, ...]}), right?
but the stream emits data
the handle is used by spawn
p.on("data", (d) => console.log("child proc wrote: ", d))
then i want to do stuff on "p", and have it show up on stdin in the child
right
I'd like to do a v0.6 release tomorrow or monday.  anything pending to get into it?
yeah, that's a big part of the motivation, actually
mark was pretty cool about the whole thing, but i do feel kind of bad that we raised his ire even a little.
i'll create a test for the large file
so we have a month to bang on it and can brag about how awesome it is at NodeConf on July 2
kewl
so, i think you probably know the procedure.  needs a test, and docs, and no added lint failures.  squash to probably one commit (unless it makes sense to be multiple things, but like "X" and "Test for X" should be together) and push.
TooTallNate, igorzi, bnoordhuis ^
can i get a lgtm? https://gist.github.com/2321917
it IS an error condition, most likely, but an error event is the proper approach.  (also, sketching out domains stuff, which will be a bit easier with error events than throws)
if the intent is to decode utf8, then naively appending each string is not so good
which guy?
oh, ok
you can do that as a separate commit on top of it.
dumb question :)
is it a problem in 0.6, though?  should we port to waf-style?
nvm
oh, right
:)
i guess we can just try not doing it.
or you can try out the 0.6.15 pkg on leopard!
see how that goes.
making sure i got it all over properly
testing out the port of the license stuff right now
we can review over the weekend
oh, ok
igorzi, bnoordhuis: hey.  i started working on a js-only api-adding Domains implementation last night. https://github.com/isaacs/node/compare/domains-wip
*ominous
*on 0.6.14
but instead the cb never gets called.
which seems rather ominoux
worked on 0.6.154
yeah, this is just doing fs.readFile("does not exist"...) and asserting that there's an error.
bisecting
interesting
yes, bisect agrees
hm.  yes, so if it doesn't have an fd, then destroy will close() on the 'open' event, which never occurs, because it was an error opening.
got a fix that makes the test pass.  running make test now
but normally, yes, fd will be null, or a positive integer
i suppose you could be running fs.readFile on stdin
once the file is opened
great, thanks
if there is a read error, but the file is open, then we need to close it before calling the cb
this regression happens if the error occurs before the file is opened, in which case, there will never be a close event
care to test? http://nodejs.org/dist/v0.6.15/node-v0.6.15-RC0.tar.gz
hm, should probably make the capitalization consistent in the changelog
(no, it borks the terminal)
sounds like a bug.
weird
oh, that's why it sounds familiar
anything else that you think belogns on the changelog? http://nodejs.org/dist/v0.6.15/email.md
it seems to wokr
did one for 0.6.14 and 0.6.13
none of those files are there yet, obviously
Also, 0.6.15, about to push it out.
Anyone around to review this? https://github.com/isaacs/node/commit/06ada03ed93d6f81caef24c6dade6e616fd843b1
aspect oriented programming
original = obj.method;  obj.method = function() { do some stuff; return original.apply(obj, arguments) }
yeah, you shouldn't punch monkeys
actually, there are special classes to do this sort of thing in Java, it's just a lot easier in JavaScript.
around fs.open
grr... recompiling, that means. ;)
testing now to make sure it didn't introduce any errors in 0.6, then i'll build and push an RC2
node-gyp is part of the npm family now :)
so it Just Works
(os x)
;)
k, kewl.
worth getting into 0.6.15, or can it wait for the next release?
ok
"broken"?
when did we have a passing travis build on v0.6?
oh, right, the doc patches fixed some bugs, apparently.
bnoordhuis, piscisaureus, TooTallNate, igorzi: feedback welcome^
still kind of messing around with the api and the approach.
and it's still 100% JS
but i'm focusing more on trying to solve the problems that people have, without introducing more.
there's no data stuff tied to a domain right now.
var d = domains.create({ hello: "world" }, function(a) {
EventEmitters and timers get added to the active domain.
well.. that's the rub still :)
when a timer dings, or an EE emits, it enters the domain, runs the cb, then exits
there's api for manually binding a function to a domain
which sort of sucks
yeah, i'm thinking similarly
either that or hook into the ReqWrap class
what you really want is to bind the cb to the domain as it's going to the thread pool, since that's where you want it connected to
also, automatically grabbing the error args is pretty problematic in a lot of cases.
ie, sometimes you don't bother Stating to see if something's a dir, you just readdir and if it fails, it's not a dir.
it's super handy sometimes though, and easy to do, so there's api for that as well.
right
good morning
i'll check
yeah, that's kind of dumb.
i'll fix it for the next release, or before.
thanks :)
man, javascript is super annoying sometimes.
Thou Shalt Not Modify the EventEmitter Constructor.
i've managed to get almost all the necessary features of domains implemented, without performance falling off a cliff, except for the auto-adding of EventEmitters to the active domain.
that cuts http_simple bytes/1024 in half.
er, wrong thing
0.6.14?
ok, cool
but the function names are valid
g'nite ben
:)
AOP is actually magic.
er, return orig.apply(this, arguments)
oh, actually, that stack trace will dodge your code
here's the thing you only have to do once:
require("module").wrapper[0] += 'new Error().stack;'
anyone else seeing like almost every test failing in master?
on osx
piscisaureus, bnoordhuis: any idea on this? https://github.com/joyent/node/commit/0db4dc0024eaa538bf4913d6bf256a18126de2ba#commitcomment-1196660
i can bisect through the libuv commits if necessary, it's just a bit tedious.  if you have a clue that would help, please share.
(the last libuv update before this one)
i'll bisect
seems like it was good on ab8c3b8
is there a way to just clean uv and build a new node on top of it, without having to do distclean?
rebuilding v8 all the time is awful
bnoordhuis, piscisaureus ^
ed395e0619ab50d86c960e839525a0a5e8259b66 is the first bad commit
at least, on os x.  if you're seeing random crashes on win32, then that's a bit odd, since this only appears to touch unix
if it's easy, sure.
supporting python 2.5 is not a goal, though
iirc scons and waf are boht either broken or weird with it
python 2.5 will crash in many other places, i believe
yeah
yep.  this needs to be fixed now-ish.
nope
wait a minute, that makes no sense...
but it's super busted in os x
i'm assuming that this works in linux.
right
yeah, ok, looks like ed395e0 was the first bad commit, but not the last one :)
k.  i'm going to run an errand and get some lunch.  i'll be back in a bit.  feel free to revert node@0db4dc0 if you can't figure it out easily.  that's why we upgrade our deps atomically :)
off to put food in the neighbor's cat.
thanks
plan9 is planed for version 9
along with multics
MUST BE GOOD
yes, it does
SHIP IT!
that's test driven development, right?
kewl
sure
bnoordhuis, piscisaureus: we've got the status call tomorrow.  if you could take a few minutes to think of what is outstanding from v0.8 FC status in your opinion, that'd be helpful
feature complete
i think we should aim for FC by May 1, release by June 1
we're close already
bnoordhuis++
thanks
i just did `make distclean` and `make`, and then `make test` is rebuilding it yet again
wth
are we touching config.gypi in the test?
that doesn't make sense
sure
*what email address?
hat email address?
hm..
couldn't find you via just bnoordhuis, had to use the full address.
google's not so good at searching, these days
k, you're both managers
builds fine
clean checkout, run `make`
omg this make bug is killing me
run `make test` BUILDS ENTIRE PROJECT AGAIN
are you guys not seeing this rebuilding craziness?
ok
this was not broken on 3ec84a1
it wasn't broken this morning
nuh uh
apparently
thought for the life of me, i don't see why
but i'm not hopeful.  it makes no sense
i think this is random.
no, i mean bisect found that.  i'm reverting it and trying now
but i wasn't even seeing that error on my machine
since that commit does nothing to change any files or build things, unless that error was somehow blocking some kind of bad behavior somewhere
puzzled.
trying again, jsut to tempt the randomness gremlins
but it's so easy to screw up the dependency set
i have a lot of disdain for everything that wraps make.  gyp is the least terrible.
yeah, i don't doubt it
that's definitely it
ugh.  why does every build system suck so bad?
yeah
do you get an error or something?
what does it do?
hm.  i see
bnoordhuis, piscisaureus_: review? https://github.com/isaacs/node/commit/04271a5e9394e6dadf6c5172bcfac1d5f086db8f
call time
chuckles.  "Reboot my pc"
heh
yessir!
;P
i hate it when they do that!
oh, really?  did someone from apple install windows on your pc?
it's almost like they *want* it to fail
or are you using quicktime or itunes or something
yeah, apple software on windows kinda blows
boolean api trap?
meh
oh, right
wait, what?
"setSomeBoolean(value)" is fine
but yeah, a setOptions(true, false, true, true, false, false, true) is hellish
java-esque, even :)
i see
oh, haha
i sometimes do the double-negative thing so that i can have falsey values be the default always
right
then anything that isn't set is automatically the default
glob/minimatch does that
sweet, now getting just slightly *better* performance in http_simple on the domains-wip branch.
though i'm totally cheating, because i also updated MakeCallback to take a symbol rather than a string, so there are a lot of cases where we're cutting out a char*->v8::String conversion
i mean, that's essentially what fstream does, and why it's better to use fs.WriteStream rather than just fs.write directly
that's not such a bad idea.  but that's not something we'll do for 0.8
but there'll always be cases where for some oddball reason you really want to do the lowlevel stuff, i imagine.
but what if you don't want them to be serialized?
right
then what?
hahah, good answer :)
see, now you've offended my robot.
true, if not by us, then at some point by the fs, most of the time anyway
i mean you SAY that disk heads don't warp to two dimensions, but what about a fuse mounted thing?  maybe it's not a disk at all, but just a disk-looking abstraction around network operations.
oh, cool, i had that tab open and had meant to pull it.
thanks, whoever did that :)
review plz? ^
because nothing else sets the errno, so you get a "errno is not defined" error
it must have passed by accident originally, or maybe i just missed it when i ack'ed it
      return;
      this.emit('error', errnoException(errno, 'kill'));
    if (r === -1) {
    }
in child_process.js
thanks
Good morning!
piscisaureus_, TooTallNate: Either of you interested in banging out the child proc stdio fd refactor?
haha
that's actually kind of awesome
usually that stuff is like __CFRUNSSAFXP10EEFOPEN__ or something
maybe we can add a global switch that'll disable nagle?
bnoordhuis, igorzi, TooTallNate: can you review and weigh in on this?
sorry, paste fail :)
have to run out for a little bit.  i'll be back in an hour or so
i'll patch to fix it later
:)
C and C++ make me so angry.
oh, right
going to do a 0.7.8 release today
good morning
bnoordhuis, igorzi, TooTallNate, piscisaureus_: Can I get a LGTM on domains?  (I'd smoosh some of the commits a little bit, or maybe do a --no-ff so it's easier to revert if we have issues later)
but it could!
rad!
oh, whoops, and d74e6508c5fbc3f2dba877c6b8977b8539fe9212 is wrong.  should return after FatalException
ok, fixed on 09f5816224158e6f7b2afab3766b61ad9e400cb2
you'd call domain.dispose() when you want to clear/close/destroy all the *explicitly* added EEs and timers, and prevent any more activity from happening on that domain
i suspect that we can go a bit further with uv_walk, but i'm not sure.
so, any other stuff that comes back, when it sees that the domain is disposed, will just stop.
hahah
that's so dangerous!
honestly, i figure we'll find out all sorts of problems with it and have to change it significantly in v0.9
i'm ok with that.
we just have to deliver *something*
inspection?
shrug
i guess it could be hidden, or at least _pseudoprivate
there was some reason why it needed to be exposed originally, but that idea ended up being scrapped
nope.  no reason.
in fact, dinking around with it is very hazardous
it should be hidden, i think
oh, ok
sure
604a39d3c5a8aee4ec4f80b2022ea3e229d8a3fc
kewl.
lemme know if any tests fail.  i'll brb.
commutes
"most patches merged"
now THAT's a service to the node project, for reals.
yeah
*landmines
sure
uppercase filenames are landminew
with notable exceptions: README, Makefile, etc.
ok, i'm gonna clean up the domains3 branch a little bit, and land it
so slow and hard to optimize
with -- indeed
with --no-ff
bam.
anything else that need to get in 0.7.8?
we really need to get this ENOSYS working.  I'm going to temporarily just revert the 10.5 thing on the v0.7.8-release branch, unless that libuv merge can come sooner.
kewl
kk testing
thanks
the fix was obvious, i hope.  there's no #if for the #else to hook onto, so i presume it's fixed right to remove it
os x: [02:00|% 100|+ 393|-   0]: Done                                                
what's this?
at least, not on unix ;)
it's not THAT expensive.
maybe on windows :)
mmalecki, piscisaureus_: also, i couldn't even detect any diff from removing the process.env in http_simple
test, please: http://nodejs.org/dist/v0.7.8/
oh, ok
oh, snap, thatnks for reminding me, I need to update AUTHORS, too
k, updated
Good morning
about to ship it
any last minute changes needed for 0.7.8?
kewl.
tagged commit^
they have a bunch of symlinks in there.  windows hates it
buongiornop
hip
looks like v0.6 hasn't been merged into master for a while
?
k, thot so.  thanks :)
kewl.
it still worked fine, just didn't unpack error-free on win
v0.6 mereg
and lib
i don't really care too much about test
it's big and slow.
maybe we should just not jslint test.
and it's not like it actually matters, as long as the tests work
cia's lagging today
review?
kewl, pushed
eah, could be
ah, cia woke up
nice
Anyone wanna fork this and either add to it, or suggest some answers?  https://gist.github.com/bfb47daac7b2f7be3840
hola!
ah, there we go
igorzi, piscisaureus_: skype?
k, i'm gonna post one.  you mind if i assign it to you?  you still interested in doing it?
great, thanks! https://github.com/joyent/node/issues/3137
good morning
ran out of swap
looks like we already map it for Windows, but not unix
github really ought to require an email address.
reported for jury duty, now gets to maybe report again in 4 hours
and if it threw, i killed the connection
it's been working fine for a while now
no, i just wrapped the offenders in try/catch
well, it only happens under load, if that's what you mean
except for the upgrade stuff, i guess, that gets a little more complicated
i mean, that should be a 5 line program if we did it right
it's kludgey and ugly, though
oh, ok, yeah, now i'm on the same page.
oh, that was just a problem with the http client, not with proxying
the http client slows down dramatically if you make a bunch of requests that should all go in parallel
hm.  that does match what we're seeing occasionally at joyent.
i think we worked around it a different way
i'm not sure.
yes, that's the way to go.  tick ftl
making actual websites in node is way way too hard.
not even because of the callbackitis or whatever.
can you try rejoining?
i can't seem to figure out how to unban it.  it says it's not +b now
sweet
lol
i guess, huh
oh, you guys are on 0.4??
since you had sendFD
was there even clusterability back then?
awesome.
er, not just increasing, but changing
if we're going to add a writeSync method *somewhere*, then that's fine, but it should be internal, and only for these specific cases.
even for pipes?
i mean, really, the issue is that "Stream" doesn't imply blocking or nonblocking behavior.
is there any way to make stdio *always* blocking, no matter what?
but most streams are nonblocking, because there's little benefit to doing io in a blocking manner.
but yes, "streams are nonblocking except stdio except when it's a pipe" has 1 too many "excepts" in it
making stdio nonblocking is painful, because you lose output when the program ends.
we could make it blocking if we could prevent that, but that seems even more kludgey, and stdio is usually super fast anyway
but i guess if you hook a pipe up to stdio of a child proc, then it could be the handle of a server, and then that kinda breaks the whole "node is evented io" thing
hmm.
what does that test do on unix?
i dunno.
ideally, it should not return true if it's actually not flushing, since that's a lie.
yeah
memory's pretty stable
i do :)
losing the last write to a log file is a pita
damn.  crazy night owls.
get some rest, man :)
good mornign
npm uses that like crazy
hmm
weird.  yes, that appears to be broken.  wth.
yeah... that's super broken.  and a problem.
              ^
        throw e; // process.nextTick error, or 'error' event on first tick
$ sudo ./node test/disabled/test-setuidgid.js 
oh, no, that's a different test
but no uid/gid
cwd is there.
env is there
yeah, looks like that behavior never got ported to libuv
yes.
i'm writing a patch now.
it shouldn't be too hard.
but a) libuv 0.6 needs to support it, and b) node needs to be built with that support
but a public-facing change
it does change the abi, because it changes the uv_process_options_t
no, not too invasive.
we can't break them, either
well, other libuv users would use that structure if they use spawn :)
so, for node v0.6, you can spawn a node, then process.setuid/setgid, then spawn(process.execPath, process.argv)
which is annoying, but whatever
yeah, or use su
i always forget
or is it -u?
or sudo -i, sure
oh, i guess on solaris derivatives you can set an explicit setuid perm bit
should not be ints
yeah
yes, that's true
$ id -- -2
uid=4294967294(nobody) gid=4294967294(nobody) groups=4294967294(nobody),12(everyone),61(localaccounts),402(com.apple.sharepoint.group.1)
yes, that's a separate concept, for sure
well, skype decided we're done, i guess :)
*stable branch
each stable release moves a deprecated things up one level
i'll release it tomorrow
but we have to give you some reasons to upgrade to 0.8, don't et? ;)
i mean, i agree, it's *good* :)
i remember there was some reason why 0.7.8 was still a bit lacking, but i don't remember what it was.  maybe dtrace.
yeah, good luck there :)
ipv6 is so terrible
g'mroning
also, how can nodejitsu (the company) be up for an award...
should be a diff category or something
though, the fact that it takes a whole company to rival marco or me is pretty badass, i must say ;)
cloud9
et.
maybe msft or others
ie, fs.open('file that the os decides should take 3 hours to open', function () { why isn't my program exiting? })
i think it's nice.  very simple.
;P
igor's code is always so beautiful.
not for any purpose, i mean, we already have good http and stuff.  just to look at it.
we should just port nginx as a module.
but yeah, reqs are less important.
which isn't a big deal, unless you're expecting to restart a server or something very soon.
right
but then the forked process returns -127
i mean, i'm not strongly in favor of keeping that, necessarily
it's just the way it's alwasy been in node
i mean, instead of failing with -127 on all of them, fail with -127 on one, -128 on another, etc.
the tricky thing will be if there's some system where like ECONNABORTED is -129, then you'll get really confused about what kinds of connections your child proc was trying to make :)
so the proc could lie about it anyway
yeah
awesome :)
i wanna drop v0.6.16 today
k
yes.
k
i like the flags approach.  lgtm.
pesky rogues.
ah, kewl
always stealin my coppers.
oh, probably because i ifdef'd it out :)
really?
right
well, the patch got you to do it better, so it had the intended effect, i guess :)
updated. Passes on linux and windows
i'm testing as user first, to make sure it didn't break anything else
or at least, nothing that wasn't already broken
yeah, i saw that
=============================================================
=============================================================
Assertion failed in test/test-fs.c on line 194: req->result == -1
Assertion failed in test/test-spawn.c on line 63: exit_status == 127
Assertion failed in test/test-spawn.c on line 63: exit_status == 127
Output from process `fs_chown`:
Output from process `spawn_setgid_fails`:
Output from process `spawn_setuid_fails`:
[%   0|+  77|-  12]: spawn_setuid_fails
[%   0|+  77|-  13]: spawn_setgid_fails
[%   0|+  88|-  14]: fs_chown
`fs_chown` failed: exit code 6
`spawn_setgid_fails` failed: exit code 6
`spawn_setuid_fails` failed: exit code 6
as root
exit_cb
exit_cb
fs_chown should check for root-ness
hm.  right
i.. guess so?
which actually looks expected?  since it ought to work, so the failure test fails?
but it does indeed fail properly as non-root
or it's skipping it or something
i guess.
os x allows this.
yep.
$ id --  -424242
so, id is getting an enoent there
that's not what the man page says it does, though
getuid shows -424242 as the uid
     [EINVAL]           The value of the {group,user} ID argument is invalid and is not supported by the implementation.
hm
it says that it'll fail with einval
smartos is the same as linux
and probably freebsd, i'd guess, though we don't officially support it anyway, i don't think
in this case
so darwin's the only odd duck
detached processes would be nice, yes
BY THE WAY!
FC is slipping about a week.
feature complete
feature cutoff
i've been hesitant to announce a release date until we can declare feature complete.
so we're not quite out of time yet :)
as it stands, there's still stuff to get done.
but, my goal is to get v0.8.0 out June 1
maybe a few weeklies before NodeConf
(in master)
*never go out
off to review it now...
I didn't say drunk.  I said happy.
If all people had to do was get you drunk to get features into node, it'd be php i no time.
setsid is/was a boolean that tells it to set a new session id
uid
uid is an int that sets the uid
for 0.8 it should be back if it's not too hard
oh, yeah, for 0.6, no
i thought it did in 0.4
=============================================================
Assertion failed in test/test-spawn.c on line 519: pw == NULL
Output from process `spawn_setuid_setgid`:
[%   0|+  80|-  12]: spawn_setuid_setgid
`spawn_setuid_setgid` failed: exit code 6
  ASSERT(pw == NULL);
  pw = getpwnam("nobody");
yeah, certainly looks like a typo :)
thanks
yeah, lgtm
reading
ok, anything else to go into 0.6.16?
even though it would be nice :)
kewl
wonderful
yep
*s
on several different machine
works for me
yep.
considering dropping this thing monday morning
no worrie
i owe you all a status update email as well
oh, missed the test thing.  yes, that should not be there
shrugs.  actually, whatever.  there's not a lot of stuff in the changelog this time anyway
i also want 0 failures in 0.8
we're getting close
Good morning
:D
in master we use the bundled one for everyone, right?
it's using the system openssl
oh, lovely.
wtf apple.
yeah
whoa indeed!
AsObject, ToObject, JustFreakingGiveMeAnObject
interesting
*talk
was just watching substack's nodeph tal
lets leave it out of v0.6
lgtm for master.
sure
test, please, either the branch or http://nodejs.org/dist/v0.6.16/node-v0.6.16-RC2.tar.gz
(doc update only)
er, rc3
building all binaries!
ah, crap.  the date.
grumble grumble
about to push website and email
alright, last chance.
IT IS DONE!
yep
ahh, i'm testing for !== null, but not for undefined.
derp
fixes this
hm.  this is a pita, though.
grrr
alright.  fuckit.  forcing.
i tested the new stuff, but not with the version of npm that's actually bundled with node.
no, no, i'm growling at myself
stupid.
tarball pushed, building binaries
no website stuff changed
so, once that's all up, i'll force-push the repo
which always sucks.
VELOCIRAPTORED!!
hehe
ok, pkg uploaded
has a crush on every fhwqwgads
THAT explains the lack of peasants.
no two peasants are not on fire.
i'm about to head out for much-too-late lunch
k, bbiab
:)
big backlog
it was in my "to be reviewed" stack of tabs in chrome :0
but i always catch them!!
it was just a joke
perfecto
rimshot
yeah, ben tries to slip throws past me
get it... ben TRIES to slip throws past me but I always CATCH them
omg it's getting EVEN LESS funny
it *should* never happen
the console.timeEnd thing is a good example of that.
though, domains make this less of an issue, of course
yeah
right, but getWindowSize only gets called from SIGWINCH, which you don't control
rouge?  like... a red one?
oh, rogue
we are just a bucket of puns tonight
oh, no, not sighup
on sighup i'm gracefully restarting them one by one
gracefully one by one, still
sigint i'm killing them all.
this doesn't help me if i throw an error or something in the master
well... it'd be nice if we could guarantee that the process exiting always kills them
but if the master *dies*, then it'd be nice if that could automatically take out all cluster workers
re-read the config file, restart all workers
We will continue to support bugs in 0.6 through the end of hte year.
but improving cluster?  no.
v0.6 cluster is a proof of concept.  it is not ready for prime time until v0.8
*^_^*
whoops, forgot to push that yesterday
assert.equal(nexits++, 0);
that's hitting more than once
well, it's calling it recursively
it's not :)
yeah
simple/test-cluster-worker-death looks like it's failing now, too
thanks :)
:)
code change is pretty uncontroversial.
undefined is falsey :)
yeah
you have most of the more important fixes in it
weird
yeah, suresure
         parser = null;
         parsers.free(parser);
       if (parser) {
       }
     var freeParser = function() {
     };
+        parser.socket = null;
+        parser.socket.ondata = null;
+        parser.socket.onend = null;
+++ b/lib/http.js
--- a/lib/http.js
@@ -1128,6 +1128,9 @@ ClientRequest.prototype.onSocket = function(socket) {
diff --
diff --git a/lib/http.js b/lib/http.js
diff never pays his tab.
index 3986709..9aaff7f 100644
seems to work
this is what i'm doing:
the socket
and we can't give up the freelist thingie, because making parsers is expensive.
if you throw out the freelist bs, the problem goes away, but we lost performance
oh, ok, so, no, the issue is that we're recycling the parser.
right
if you do req.removeAllListeners(), then the problem goes away, but that's dumb.
yes, we are all fond of performance :)
right
because most people's servers talk to web browsers, which don't randomly kill connections when they go into elevators.
so, this socket error code path is much more rare
it's gonna be sweeet
yeah.
especially if those objects have references to other objects that you DO need to have cleaned up
true
we've eaten a LOT of bugs for the performance increase we get from reusing http parsers.
Good morning
bnoordhuis, piscisaureus__: Is there ever a case where you do socket.setTimeout(msecs), and if there's a timeout, you *don't* want to destroy the socket?
bnoordhuis, piscisaureus__: Alternatively, if there is such a case in raw TCP, is there ever a case in HTTP where you don't want to .destroy() the request if it times out?
it looks like we do a socket.destroy() on timeouts in the server, but if you setTimeout on the client, we don't, and then it leaks.
bnoordhuis, piscisaureus__, TooTallNate: review, please? https://github.com/joyent/node/commits/http-memleak
top 3 commits
i don't have a test yet that doesn't depend on node-weak and --expose-gc
maybe we should have a separate of gc tests?
er, piscisaureus_
so ready to rip out this FreeList bullshit.
GC only works if you don't keep objects around forever.
it's crazy-making
either that, or we need to not attach anything to parser objects, ever.
it's like we've resurrected the ghosts of IE6's terrible DOM.
this whole class of errors that should be dead.
at the very least, though, we really need to not attach a bunch of garbage directly onto the parser object.
it'd be better if there was one parser.data object or something, and we just set that to {} in parsers.free
kk
no igorzi this morning.
because he's working on our symlink in windows issues.
but it's a happy thing
yeah
call tiem nao!
anyone wanna review? ^
so now we have a place to put "I think this leaks memory" type tests.
tests still pass, and `make test-gc` added
picks "tonight"
though i guess "tomorrow" is probably still before i wake up
but it seems to work 100% of the time on my machine, even with 500 requests
just ran it 100 times with 5000 request.  100% success
sorry, s/500/5000/
ha, spoke too soon :)
i'd like to get 0.6.17 out asap.  natives are hollaring.
great, thanks
but whatevs, it works, surprisingly well, in fact.
it's a bit silly to download headers when you're sitting right in the nodejs source tree :)
yeah
if there's any problems with the http-memleak branch, then this whole release branch will have to change,of course :)
voxer runs it like crazy madmen, floating patches and testing out bugs and craziness
yeah, true that
I think it might just be running out of resources or something.
test/gc/test-net-timeout gets a ECONNRESET occasionally.
it'd be nice to replace all that bs with a node test runner.
since it happened sporadically, each tiny fast buffer would be attached to a *different* slowbuffer
which drastically magnifies the problem.
again, meh.
also, AssertionError: "rename" == "change" on SunOS
  ares: '1.7.5-DEV',
  openssl: '0.9.8r' }
  uv: '0.6',
  v8: '3.6.6.25',
$ ./node -pe process.versions
i've got this:
{ node: '0.6.17',
about to drop it.
nice!
thanks
      61
$ npm search =isaacs -q | wc -l
has been busy
judging by http://registry.npmjs.org/-/by-user/isaacs, there should be 60
i have a few that are old and busted.
unless maybe it's filtering out deprecated ones?
goes off to reduce his score a bit..
oh, also a few of these are tests that should be unpublished.
i'm merging 0.6 into master.
if you have anything to push to ry/master in the next few minutes, please lmk.  it's a bit of a gory merge, with the http refactoring
the --no-idle-notification flag
just dont' land it in master right now :)
#	deps/uv/src/unix/linux.c
#	deps/uv/src/win/threads.c
can i delete those?
piscisaureus_, bnoordhuis: Hey, i have these two untracked files in deps/uv.  i think probably just old garbage, any comment?
i think probably a mistaken import or something.
ok, kewl.
they've been sitting there for a while
$ echo deps/uv/src/win/thread*
deps/uv/src/win/thread.c deps/uv/src/win/threadpool.c deps/uv/src/win/threads.c
k, it's bogus.  thanks :)
yeah, it's thread.c now
check https://github.com/joyent/libuv/tree/v0.6/src/win
but soon.
heh
monday?
we could do another one today if you want.
https://github.com/joyent/node/pull/3220 <- opinions on this?
g'nite piscisaureus_
448 fails
549 fails
So, this is really weird...
but 500 requests fails.
but if i up the number to 550, or drop it to 447, it works.
those gc tests?  one of them is failing in master.
anything else seems fine
everyone else is pissed
haha
joyent thanks you
there's also a 'merge v0.6' commit...
100% tests passing on master again.  love it.
it's just that CIA only showed the top one
cesu-8 kinda fits in with that bunch
meh.  if we're gonna do it, we have UTF16 be and le, and UCS2, and UTF8.
+0.2 i guess :)
and, it's a pretty common way to handle high-order chars across platforms.
not quite exactly, but in a way,  cesu-8 : utf8 :: ucs2 : utf16
it's only relevant if there are chars in the astral plane
yeah, lgtm
orly?  you did?
ryah, i think
b58db3cd lib/http.js (Ben Noordhuis       2010-05-23 22:48:50 +0200  218)   418 : 'I\'m a teapot',              // RFC 2324
i knew it was around a long time
indeed!
nice
worker.emit('foo', x, y) ==> cluster.emit('foo', worker, x, y)
and var x = function <-- ugh, hate, don't know why, but hate.
i'll fix.
node style is no space between name (or 'function') and the opening (
oh, yeah.
doesn't care.
function x(..) <-- makes me feel warm and fuzzy inside for reasons.
knows this is irrational.
we need a way to lint the docs.
arg!! syntax error in the doc.
hate that.
omg
the family are all asleep
ok fixed
ok, i'mma land it
it's called signalCode in the code, which is indeed weird.
function fooFunctionCode (argumentZeroArg, argumentOneArg) { return returnValue }
heh :)
it's good to call them all codes in the code, so that you remember that it's the code.
otherwise you might get confused, and think your'e reading the docs.
Good morning heroes.
and it has to know, for example, how to run all the tests in test/gc/ with --expose-gc
(though, of course, the testCfg.py files could be replaced with a json or something)
and it must be tiny, and not require changing any of the tests themselves.
for example, they all listen on the same port
actually, parallel tests are usually a bad idea, imo
harder to debug failures.
the GC tests also can't run in parallel
the nice thing about a getter is that we can make our benchmarks faster while making node actually slower.
so that's always fun and ironic.
but you never know, there might be some super valid reason to make it worth fixing rather than axing
doubtful, but worth checking
it will have to be documented on the wiki if we do that
thanks
it's easy enough to implement as a decoration later anywa
res.write = function (o) { return function (c) { res.bytesWritten += Buffer.byteLenth(c); return o.call(res, c) } }(res.write)
April 17th
but 0.6.16 is not as awesome as 0.6.17
oh, also, i think 0.6.16 actually has the fix
yeah, we fixed it in the code right away.  matt pretty much told us exactly what to do
and it was a one-char fix
and probably wrong.
bnoordhuis, indutny: really, this is something that should be tracked at a much lower level using dtrace or something anyway.
if you want to track bandwidth stats, doing so at the app level is a bit odd.
true that
oh?
grr.
oh, i see.
do you ever want the socket after it times out?
oh, it's not just that it's destroyed.  it's that socket destruction sets the req variable to null.
(as seen in this bug)
the only reason to add a timeout listener is typically to destroy it
right, but the timed out socket is not going to be reused between batches
you can still do that by setting a timeout on the connection directly instead.
we can revert that, but we should not do so in such a way that leaks socket objects.
yes, that's true
THAT bit of the behavior was changed on purpose.
good news!  remove the self.destroy() call in emitTimeout doesn't break the gc tests.
running other tests now
but those two are debugger tests.
shakes fist at the debugger
Yes, it's super handy for debugging memory leaks, but it's very easy to get the object trapped in the cb.
weak(obj, function () { neverGonnaLetYouGo() })
but we've gotten a few issues like, "This and that leaks memory!" when really it's just the weak usage that's leaking
nope
i also saw a case where someone actually referenced the object in the cb.
like... no.
that doesn't work
weak(obj, function () { console.log('just released', obj) })
interesting
hang the function off the object itself
just have to not keep a persistent ref to the function.
so, yeah, there's no reason why you couldn't make weak(obj, function () { no traps, please }) work
function foo () { } weak(obj, foo)
it's nothing in js
of course, that's leaking 2 kb on every object.  not sure why, yet.
i guess ffi is a pretty valid case.
i guess, whatever, go ahead and land the __proto__ thing, but put a comment explaining that this is frowned upon, and a rare exception.
yeah, i tis
g'morning
great
yeah, reading it now
yeah, this is good.
but domains use it
i know
yeah
and with domains + cluster, you can easily run a server that gracefully exits after sending a 500 response to the request that got the error, without disturbing the rest of the site.
in fact, with domains and the cluster-master module, you can find an error in development, fix it, and press cmd-R to refresh until all the busted workers are dead and restarted :)
since this changes the reported stack of the error
kewl
make test-all should catch them.
yes.
as long as there's no other code changes required, though, go ahead and land it.
i'll merge it in from 0.6
it's pretty simple and clearly winful.
ryah_ and i think alike, apparently
actually, it's a bit more thorough than that: https://github.com/joyent/node/blob/v0.6/test/simple/test-next-tick-errors.js
yeah
bentomas and i think alike, then ;)
just the message tests might have to change.
oh, haha
the tests we have are sufficient, i think
kewl
more tests isn't always better.
nah
thanks felixge :)
what's the issue?
you'd expect the require('./a.js') from b.js to re-load it?
cuz i think it module.js says that a.js should be cached ;P
hrm...
since it's getting cached.
where?
who says that modules that throw are not supposed to be cached?
    delete Module._cache[filename];
    module.load(filename);
    throw err;
  Module._cache[filename] = module;
  try {
  }
  } catch (err) {
k
this bit?
ohh.... i see.
or that their children won't already have a reference to the module contents that were in the cache in the first place.
so, modules that throw ARE removed from the cache.  however, that doesn't mean that all their CHILDREN are removed from teh cache.
  '/Users/isaacs/dev/js/forfelix/b.js' ]
after first require, cache= [ '/Users/isaacs/dev/js/forfelix/main.js',
ok
this does seem like a bug, but it's enough of an edge case that i think we can justify not fixing it, maybe.
well, i have a small fix that seems correct.
enjoy your food
but i don't think there's a way around that
i've got a fix that i think makes this work like we all want.
unfortunately, it changes module.js /o\
it tries again
which is what it would have done last time, as well, except that the *child* caused another cached copy to be created.
and by awesome, i mean, "don't ever do this ever"?
gets skipped over
the key is that the line after the load in the try block
0
100
> var y; function x () { y = 100; try { return y } finally { y = 0 } }; x()
> y
function x () { y = {foo:'bar'}; try { return y } finally { delete y.foo } }; x().foo
oh, yeah
so, pop quiz: does this eval to 'bar', or undefined?
piscisaureus_++
the semantics of return are that it marks the object as the return value, then evaluates the finally block, then resolves to the eventual return value
however, it's not a matter of moving the finally block above the return statement
right
simple values are not changed
0
100
> var y; function x () { y = new Number(100); try { return y } finally { y = new Number(0) } }; +x()
> var y; function x () { y = new Number(100); try { return y } finally { y.valueOf = function () { return 0 } } }; +x()
assigning the ref to a new thing won't chagne it
the return statement captures a reference to a specific object or value.
try { return node } finally { parse(node.children) }
uglify abuses this trick like crazy
it subtly changes semantics.
oh you
real quick: yeah, my module.js thing cannot be done in 0.6
you're heading offline
it's like actually a completely valid use case for exactly what try/finally is *supposed* to be used for: cleaning up after an error, without trapping the error itself
it's not allowed change behavior in 0.6, even if it's right.
yeah, i'm quite proud of it :)
have a good evening :)
thanks
i think maybe my patch on 0.8 is not so great.  i'll try a re-merge once i review felixge's more.
      parser.socket.ondata = null;
      parser.socket.onend = null;
    if (parser.socket) {
    parser.onIncoming = null;
    }
g
i have to run to a meetin
so how would ondata get called when onIncoming is null??
looks like we are also seeing a different error that seems related:
back
i want to rewrite lib/http.js so bad.
it should be lib/http-server.js and lib/http-client.js, for starters
it's just so awful.
it doesn't need to be *this* awful
nice
oh, hey, there was a bunch of conversation i missed.
agent doesn't do anything with its errors.
there we go: https://gist.github.com/2640679
ah, no, it was newListener tripping me up ;)
heh
i guess the whole point is to NOT throw.
because if you dont' have an httpMessage right now, then it means that somehow there was a socket somewhere in some unknown place, and the error would be otherwise lost.
i guess the thing to do in that case is to emit it on the Agent object, since that's right there.
oh, right, i remember
      self.emit('error', er);
      this._httpMessage.emit('error', er);
    if (this._httpMessage) {
    }
    } else {
  var onError = function(er) {
  };
at the very least, the agent should know to remove it.
      onRemove();
    } else {
oh, no, should be       onClose(); 
the more i look at this thing, the more the rage swells.
1600 lines?  srsly!??!
a js file should be like 1/10th of that.
i think now we know what features node's http lib should have, and what should be done in something like request
also, that might eventually shut zed shaw up about how we stole his parser.
i think a good first step will be to rip out http-parser.c and replace it with a js thing so we can throw away parser objects instead of keeping them around.
but i might just be frustrated and fantasizing right now.
puttin all the features in the vaporware
have a good evening, heroes.
ok, commute time.
*effective
i don't understand how vert.x can possibly be 10x more effecie.
it has to be caching the file.
of course, this is ab on 127.0.0.1
so basically, what's happening is ab is taking one, the server is taking the other, and there's no load balancing happening
with cluster, it's still only maxing out 2 cores.
yeah, the lb is shit
but this of course is not a rigorous benchmark, so don't read into it.
with ab -c50 -n10000, it was roughly the same performance
with ab -c50 -n100000, it was significantly worse
but i think the numbers speak for themselves.
:)
great!
and the couch itself will go from being like 12gb down to a few hundred mb, maybe
so that'll make replication WAAAAYYY faster
CDN-style
then you'll fetch the tarball from somewhere, compare the shasum, etc.
and for the majority of npm replicators as well.
at least, that's the vision.  we'll see how it works out :)
but it'll be transparent, i believe.
it'll just be magic that moves the attachments out of the couchdb on the server-side.
we *will* have to have some way to replicate the full thing with attachments.
if you dont do that to your couchdb, then it won't matter.
so, we'll be making that work a lot better.
and it's gonna make iriscouch the (even more) obvious place to do your couchdb stuff.
i'm really excited.
jason has some good stuff planned for npm registries.
lemme go review that ;)
git show, etc.
oh, no, that's a bad idea.
when will i learn that hacker news commenters are incapable of basic mathematics.
"Herpdeederp! JVM is faster than V8, so it makes sense that a server serves 10x as many reqeusts!  I put ketchup on my bananas!  Where am I?" -- typical hacker news commenter
to be fair, i suppose, it *does* take a bit of practice to get used to saying, "Wait a second... these are numbers.  I should probably do math, rather than try to use instinct here."
but it's not much more fleshed out than that
indeed.
after we release 0.8, i'll be much more available to get down and dirty with that api.
but we have to get this done first.
k
(function (exports, require, module, __filename, __dirname) { // Copyright Joy
d'oh
merging his changes into master, i'm kind of confused about test/message/stack_overflow.js
seeing that
it's like we're losing a stack frame
hm... i'm suspecting that this error reporting logic stuff will just have to be re-done for v0.8
just ignores the error entirely
which, i suppose IS implied by the spec... but it's kind odd.
wow, if you break or continue in a try{}finally{} block, it's super weird
yeh
it's like as if you had a catch(er){} in there
the thing is... any pseudo-goto that you do in a finally will prevent the error from being thrown
and we have this case where we catch and rethrow, so that if you do setTimeout(thrower,1);setTimeout(thrower,1) it'll actually try to call twice, if the uncaughtException handler swallows it.
so, we catch, check for a handler, then rethrow
because any timer-generated throw will show the line in timers.js, rather than the actual module
that sucks
yeah, i think we just need a catch/rethrow approach here.
                                                                      ^
            if (!process.listeners('uncaughtException').length) throw e;
but the TryCatch in V8 doesn't
hrm... whu?
nope.
so, for range errors, that's not so helpful
well, it does
you get this:
(function (exports, require, module, __filename, __dirname) { // Copyright Joy
*weird
^
which is also a bit misleading and weir.
with the port of felixge's stuff, as long as you aren't using a timer, you get this:
stdio and symlinks and refcount oh my!
by about 30%
for starters, the numbers that his client shows don't match the number of connections the server shows.
however, when run in that mode, it still uses 1710ms of cpu time per second.
second, he said that there was a "crippled" vert.x that was set to only run on one processor.
when he restricted it with pbind, the performance was cut in half, and wildly erratic
whereas node, by default, under load, uses exactly 1000ms of cpu time per seoncd
also, the fs.readFile in the response handler makes node's performaen die badly.
because the JVM does not like being on a single core.
take that out, actually restrict vert.x to a single core, and count requests properly, and node is slightly faster.
and more stable, and uses less memory.
it makes node 0.0 look like a cakewalk.
of course, the clustered node really ought to be performing much much better.
try installing it.
brendan did notice some interesting behavior in the node server while benchmarking it, though.
but it might've just been gc causing a few outliers
oh, it's awful
so this exercise may yield something useful.
the vert.x server's latency distribution was a bit wider curve, and not as fast, but didn't have the spike of outliers.
well, the bulk of the requests were much faster than vertx's, but there are a few that ran like 100ms or more.
which sort of looks like gc tracks, but maybe we can smooth it out or something
it's not a v0.8 fc blocker.
put it off a week if you can :)
yeah, definitely gotta fix that
i was saying that installing vert.x is harder than node 0.0
nono
used to be
but if that doesn't get sorted out, vert.x will never get off the ground.
if it does, it probably will still fade out, because that's what projects tend to do.
the guy is a performance scientist.
yes
if vert.x has managed to troll brendan enough to get him to poke his performance science skills into node.js, then i'm thankful.
Good morning!
it's right before mine.  that's why i like when it goes long.
kewl
piscisaureus_, TooTallNate, bnoordhuis, igorzi, indutny: reminder, skype in 0:20 
or however long it takes for teh c9 standup to finish
so what does \??\ mean?
yeah, i'm familiar with \\?\ because that broken npm in the early days of 0.6
but yeah, 256 chars is way too restrictive
yeah, it's C:\Users\ now
even running `vcbuild test` in c:\node-v0.6.17\ ends up creating files over that limit
so \??\ is a named pipe?
man, windows is so crazy!
but it's even worse without felixge's patches
but it sounds like you're basically already caught up with it
oh, right, there
or, rather, the line number comes back as 0
yeah, it's losing a frame for some reason
can i test a hypothesis?
one sec.
so... there is exactly one tick where it's still null.
*soon
running make test now to see if what i'm suggesting is even possible
but some tests fail if i just yank it out
there's some reason why we need a nextTick before assigning the listeners and emitting the socket event, i forget what it is
this nextTick is there to preserve an API behavior that was implemented before we had sockets being reused in teh agents.
can't wait to rewrite http.js
a lot of these features are kind of bolted on
really, the problem with this thing is that node wasn't designed with socket pooling and keepalives in mind from the start.
hearing mjr_ in the OH YEAH! voice
it's like it doesn't speak the same version of redis as my redis does or something
workign on http.js is so tedious.  change one line, make test.  change another line, make test.  change another line, make test, 8000 FAILURES OMG.  undo that change, read a hundred lines of code...
it's full on grimy now
bnoordhuis, TooTallNate, piscisaureus: review? https://github.com/isaacs/node/commit/e04de2de165eaeb3685a340a86971b6383214fce
benchmarks/http.sh didn't change.
this is also a somewhat cleaner fix to the memory leaks that we fixed in 0.6.17.
i'd avoided doing it this way because it felt less safe to touch so many lines, but i think it's actually a bit nicer.
parser.execute calls parserOnHeadersComplete
so, here's how the flow happens, as best as I can determine:
socket.ondata calls parser.execute
then that calls parser.onIncoming
1. the parser was never assigned to a socket in either the client or server
2. the parser was improperly freeParser()'d, but the socket kept writing stuff to it
in order for parser.onIncoming to NOT be a function, one of two things have to be true:
1 is impossible because the parser wouldn't be attached to a socket to parser.execute() it.
2 is impossible because we remove the socket/parser connection in freeParser (and socket.ondata)
*window
so! the only slightly less impossible theory i have right now is that the nextTick is somehow to blame, and there is a data event sneaking through in that windo. 
but ClientRequest.onSocket is called in a dozen different places, and just ripping out the nextTick breaks all kinds of stuff.
i do think this nextTick has to be remove.d
k
and if you replace this with a 1s timeout, it is very bad.
but it should still be *correct* behavior, jsut slower.
i mean, obviously, 1000ms is going to be much *slower* than nextTick
my rule of thumb is: if you can't reliably replace it wiht a setTimeout(fn, 1000), then you can't use nextTick
otherwise there's a problem.
that'd be stellar
it went away at some point, though
meat... bridge?
i used to like that show when i was half-asleep, back when i had tv
it's funny, i was thinking about athf earlier today
ohhh, i get it
i was wondering how much of my enjoyment of the show came from being in a weakened mental state whenever adult swim was on.
"used"
not wasted
is rather immersed at the moment in anarchist philosophy, preparing his tacoconf and jsconfar talks
work is the waste of time!
push more buttons!
the pattern of colored lights on the screen is ALL WRONG
yes
--tag=fitshaced
:)
i'm not drunk, but i am still pre-coffee
review? https://gist.github.com/2660566
in related news, you can make your carriages go faster with these new buggy whips.
kewl
oh, i see, you commented on the pull req
piscisaureus_, bnoordhuis: thoughts on this? https://github.com/joyent/node/issues/3170
did the cares update in libuv happen yet?  or still waiting on that?
which other os?  Looney OS?  the one with the W?
lol
aw, it's sad, we shouldn't joke.
i AM opposed to caring overly much about something that is trivial to work around.
it's not worth wasting your time on, imo.  if it'd be fun for you to fix, then don't let me stop you.
:)
cheers!
cuz the green went way way down!
ohh, i see, the onIncoming error is from the 10th, not the 11th
(which is possible, i suppose)
piscisaureus_, bnoordhuis: what is murmur3?
ic
yeah, it's a lot of green
has decided to start calling master "v0.8"
i think we can probably land it with that bug.  i wanna review what you did, and probably use that
oh, ok
or maybe have you review what i did :)
i suspect that something in there is reacting badly with the domains stuff, but i could be wrong
it's just a suspicion, no data.
yeah
you coming to taco conf?
it'll be fun
san francisco?
this weekend, it's free, just need cash for tacos, and a bicycle
you live in the west bay normally, yes?
i dunno why i always forget that
ohh, right
have a good night :)
if she's kinda nerdy, she might like the talks.  they're not all technology related, lots of history and culture stuff.
in fact, i think it might be mostly not-tech
ok, i gotta run
bnoordhuis, piscisaureus_: I'm going to land this, unless you have any objections: https://github.com/joyent/node/pull/2772#issuecomment-5686800
i think there was some discussion about that being a bit unnecessary, but whatever, we can always change that bit back later.
heh :)
i just wanna get the core feature in.
bnoordhuis, piscisaureus_, indutny: any objection to moving our check-in call to wednesday this week? 
yeah
awesome
indeed
k
kk
runs
thanks, i gotta run.
we can do it async :)
I'm going to prep a 0.6.18 release.
anyone got any bug fixes you wanna get in?
i don't think anyone's really using 0.6 cluster anyway.
we just have to get that fixed this month some time.
k, awesome.
* 52f0c37 Runtime_NotifyDeoptimized should search for function activation in all thread stacks. (vegorov@chromium.org) 
lovely
ok
ok, i don't think i care enough about that to put it in the changelog then
:)
hahah
i don't hate node-fibers either.
i just have a strong feeling of apathy towards it
is that unfairly biased, you think?
at least that's what the old korean ladies say.
but i'll never watch it.
i'm sure it's a great show.
like a korean soap opera for retirees.
test, please^
hm... that's so strange
i can make it fail, but not reliably
make test'ing
simple/test-child-process-fork2 failed
simple/test-http-response-no-headers failed
simple/test-regress-GH-1697 failed
fails on linux only, afaict
hm.
test/simple/test-http-response-no-headers.js  is super weird.
oh, shit, res.emit('end') is happening more than once.
very reliably, too
k
ohnoes!  console!
ok, this one
one sec
er, even worse, console.trace
srsly, though, yes, this is clearly a case where we're doing something sloppily.
thanks :)
but the "correct" fix is too costly at the moment.
i have a drawing of it on my whiteboard at home.
it's probably mostly fictional, but that's how whiteboard drawings are.  they're just a place to start.
it's sort of like sax-js
sure
though... i do kinda like that interface.
and, at least in theory, make our object trees less complicated, and easier to GC
but getting rid of that FreeList abomination would prevent tons of memory leaks we've had.
since we wouldn't be mixing old and new generations so much
still building on my puny linux vm
sweet!
passes here, too
anything anyone wants to get into v0.6.18?
piscisaureus_ ++
alright, i'mma push 0.6.18
k
literally murdering my sanity in the face.
man, this merge is killing me
will throw a party when we can refactor http.js properly
this is 0.9 stuff.
can't do everything all the time.  we have to space these things out somewhat, to keep it from becoming mayhem.
oh, well, the answer to THAT is because i'm busy doing this f*@#(ing merge.
even fixing bugs in lib/http.js is super hazardous and awful.
haha
however, if you just make one req, and it finishes, then it'd be surprising if your script doesn't exit.
it keeps them alive forever.
so, the agent should be able to see, if its sockets are the only things keeping the event loop open, then it should die.
nice.
yeah, i remember bnoordhuis talking about that.
some max number of sockets per server (browsers do 8, i believe?) and a reasonable timeout, like a minute, and let the program die if they're the only thing open
that's really what you want for keepalives.
man, i'm just going to have to re-do that http.js cleanup in master that i did in v0.6.  there's no way to figure this out.
every connect/upgrade test is failing otherwise.
you haven't found the others?
hahah
bastard
they still only eat brains.
are you guys merging stuff into master?
er, still landing stuff on node/master i mean
been kind of rough
i'm about to land merge-v0.6
kk
lots of http.js shifting around
whew
this is lib/http.js: http://i.imgur.com/wGUTG.gif
g'nite
dunno
sure, cut it.
still at the point of using cruder tools
and sunos sh is actually sh
so that outputs '-n -m32'
the -n thing was because there's an 'echo -n m32' in there
but, just upgrading V8 didn't fix it either :)
it wasn't actually ben's patches, afaict
bbiab
i'm gonna go grab lunch
i'd be happy to, if i can.
what's up?
yo
see!?  very useful questions!
    build: improve c compiler detection
commit c9676c9147e088171e60b1977ac239ded4f327df
and no you :)
don't feel bad, though.  there was a lot of tears, but i think we will pull through.
heh
so we were very sad.
i get in at 9:35 local time.
nice
no, tomorrow
±
c9676c9147e088171e60b1977ac239ded4f327df is on master.
v0.6 seems to work fine on smartos
it's pretty recent
yep
awesome, thanks, indutny
sweet
sweet.
ok, sweet, this works:
  ares: '1.7.5-DEV',
  node: '0.7.9-pre',
  openssl: '1.0.0f' }
  uv: '0.6',
  v8: '3.11.1',
  zlib: '1.2.3',
{ http_parser: '1.0',
just trying to work out what reverting that commit means
                      ^
(ie, it's failing because i changed the test to be the less optimal thing we're seeing)
=== release stack_overflow ===                                                 
aha!!
before
function stackOverflow() {
it gives the proper result on smartos now
failing test-dgram-ref on os x
bunch of failing tests on smartos, but about the same as before the update to v8
oh, wth.  wrong guess.  not strict_aliasing :)
false alarm :)
oh, erm, nvm.  forgot to push before resetting and pulling on smartos.
ok, [03:04|% 100|+ 411|-   5]: Done <-- smartos
*safe
checking now before the v8 upgrade, just to be save.
ok, same failures in the older v8.  landing it
but that array nonsense is work, and it's more than 0
granted, measuring a single fs.readfile is tricky
but if you read the same file a thousand times, boy, it goes SOOOOO fast
k, i'm convinced.
i should write a "win at benchmarks" module.
it hacks fs and http to cache everything in memory, memoizes all buffer creations, etc.
(the benchmark and the non-cheating faster fs.readFile)
hahah
k, i'm gonna land the other two, then
ok, i gotta go pack.  g'nite.
Hola.
it's plugged into a funny argentina thing, though.
no
like asking for directions in a language you don't know
sounds fun and adventurous
hm.
Buen dia
the wifi is actually really good
nono
there are like 6 different wifi networks set up, too
wishes he'd kept studying spanish.
why do you ask?
:D
yep
yo
"shared" is not clear enough
* `inherit` --> [process.stdin, process.stdout, process.stderr] == [0,1,2] 
that is, passing process.stdin is the same as passing 0
google lives in the future, they can throw engineers at making that a reality someday.
bnoordhuis, igorzi__, indutny: you too :)
i want to build a `make test-remote` (or something) that'll start up smartos, linux, windows vm's, and run the tests.
  ForwardAgent yes
  HostName 165.225.130.159
  User root
Host umcats
ok, add this to your .ssh/config:
the ForwardAgent is not strictly necessary, but i like it
*sweet
sseet
use it for good, not evil.
k
oh, you emailed it :)
ew, long google url
hahah
my public keys are very public: https://encrypted.google.com/search?hl=en&q=%22mah%20pubkeyz%22#hl=en&safe=off&sclient=psy-ab&q=%22mah+pubkeys%22&oq=%22mah+pubkeys%22&aq=f&aqi=&aql=&gs_l=serp.3...4945.4982.0.5166.2.2.0.0.0.0.0.0..0.0...0.0.eosI6BjGV50&pbx=1&bav=on.2,or.r_gc.r_pw.r_cp.r_qf.,cf.osb&fp=a814da15dae95afa&biw=1158&bih=626
but, i guess it falls a little more on the "behave the same as unix" side of the fence.
by default, anyway
even if that means slightly more magic
but lstat doesn't, and that confuses npm link super badly
readlink already works
right
right
sure
the biggest problem is lstat, really
what would be the noticeable effect in the "explicit" approach
eew
i see
yeah, a symbolic link is supposed to be symbolic :)
k, have fun :)
do you think we should care about simple/test-next-tick-ordering2?
hm.
so, nextTick would really be endOfTick or somethign
yeah
it was a libev-ism originally, i believe
right
i'd rather not change the semantics dramatically for v0.8
but before any IO happens
but it'd be nice to just call nextTicks at the end of each v8 invocation
it'd be faster for what you really want to use nextTick for most of the time, which is "do all your stuff, then do this thing"
what about making the semantics undefined for v0.8, and then making them defined to be that in v0.9?  thoughts?
k
*http agent
but in practice, it doesn't always.
or at least, it made them a lot harder to track down and debug than they should've been.
that's the source of some of the problems that we were seeing in the http client
pluck the array off, put a new array there, process the one you plucked off
but what we have now is a little bit too complicated i think
or we just say, fuck it, next ticks can starve the event loop, don't do that.
but in those cases, you actually want to get in before any IO
there are definitely valid reasons for a nextTick in a nextTick
yeah, i mean, it's no worse than a while(true), right?
and not miss any chunks ever.
this should work:  net.createServer(function (sock) { process.nextTick(function () { socket.on('data', handler) }) })
as it stands, you mostly miss zero chunks, until you miss one
ie, setTimeout pretty much will always miss a chunk
if it always was too slow, or always reliable, either would be fine.
but nextTick *mostly* works there, which is really bad, because it's not 100%
just like web browsers.
so, it *always* delays
yep.  100% refund :)
http is the land of failed dreams.
right
entertainment driven development
not because we need one of those, but it'd be funny.
HAhahah
maybe start off by saying "These aren't rigorous benchmark numbers, so don't read much into them" and then finish with "I think the numbers pretty much speak for themselves."
that'd be great
i think js is pretty good for doing streaming/async io, but it could be a lot better.
yes
compilation terminated.
compilation terminated.
ok...
  CC(target) /root/node/out/Release/obj.target/uv/deps/uv/src/unix/core.o
[root@6ab92b32-517e-43d1-a27d-564b8922b927 ~/node]# 
[root@6ab92b32-517e-43d1-a27d-564b8922b927 ~/node]# make
make -C out BUILDTYPE=Release
seems that way
good news is that i figured out how to deploy the node source using fleet, but it seems like fleet is designed more for websites than CI
i'm sick anywa
just a cold from going to a conf and staying up all night and then not-sleeping on a plane on the way back
nah
i'm almost done with it
and since it's node, it'll run in windows, too
it's all git-based and runs with node and dnode
ok, i'm out.  get some sleep :)
you just run `fleet deploy` from in the git repo
g'nite
right
good morning.
how are you gentlmen
good!  i have completed my conference cold successfully, it seems.
how are things in gouda?
oh, cool.
kewl
oh, ok
doesn't have to be 100%
of course, 100% failing is better :)
TooTallNate might be jetlagged...
bnoordhuis, piscisaureus_, igorzi__, TooTallNate, indutny: skype in 12 mins
and then set up mac address filtering, so that only they and you can use it.
hahah
make sure to change their router password.
that's the best
don't want just any old random person using their internet.
well, i mean, i care for my neighbors.
maybe 50-100 wifi networks visible, but all of them are locked.
most people in oakland have very secure wifi, unfortunately.  i live on the 7th floor of a building with lots of windows, in a neighborhood with very few tall buildings, so it's basically like being on an antenna.
hm.
right, so, like a JS bigint impl
or a int64 as a buffer[4]
igorzi, piscisaureus, bnoordhuis: review? https://gist.github.com/2783736
ircretary tell bnoordhuis review? https://gist.github.com/2783736
hola
got anything you want in?  now's the time
ok, now time to do 0.7.9 build.
kewl
that's what i mean
feels so wrong..
i'm just so used to only making builds when all the tests pass...
k.
jesus, this changelog is looooonnnnngggg
waited way too long to do 0.7.9
(haven't tried it yet, just writing changelog)
igorzi++
kewl
that's awesome.
yeah, it's one of those things... the only thing i could come up with was "Bert said it was important and would make stuff good... so... he did it... um..."
hm... ok
53?  i forget.
but that's still just 51 bits or whatever?
or something like that
right, i'ts like 2^53-1, right?
especially if it was like, no actual change in the language, just that math starts working right.
i would do a lot of things for a proper int64 type in JavaScript
anything missing?  anything you think should be omitted?  http://nodejs.org/dist/v0.7.9/blog.html
k
it's a good thing stdio didn't land in this release.
wouldn't've had room to put it in the changelog ;)
i think there's a line for that...
ah, yeah, there it is
also, it's not going out tonight ;)
oh, no, i think i might've deleted it
but i'll get it monday
is on a bunch of drugs, just had a wisdom tooth yanked out
good morning
wow, if you run `make test-all` in a child_process from a node server, it kills the parent server.
it's a bit weird that stdin is broken on fork'd children
would that wokr?
yeah
haven't done much
i had wisdom tooth surgery friday, been taking a lot of drugs and eating liquids
it wasn't too bad
kinda ruins your weekend, though :)
yeah
especially since i have good insurance here in the us
ahh, yeah, you mentioned the weather in moscow the other day
08047b78 libc.so.1`strlen+0xb(88a4b68, 8877a80, 8047ba8, 0, 8877a80, 0)
08047ba8 eio_finish+0x10d(8877ecc, 8047bff, 1, 548, 829bfc9, 8877d7c)
08047bf8 eio_poll+0xce(8877a80, 20, 4, 8877cc0, 8877cac, 8877cb8)
08047c18 uv_eio_want_poll_notifier_cb+0x37(8877ad4, 0, 80000, 8876820, 1388, 0)
08047c48 ev_invoke_pending+0x63(8877cc0, 8876840, 100, 0, 90250fdf, 137)
08047cf8 ev_run+0x857(8877cc0, 1, 88a5e30, 8400b01, 88a4e58, 88a4e44)
08047d28 uv__run+0x15b(88a9b10, 8047d5c, 8047d98, 824ba27, 8877a80, 88a9b10)
08047d38 uv_run+0x17(8877a80, 88a9b10, 8047ddc, 0, 8047e9d, 8047ddc)
08047d98 _ZN4node5StartEiPPc+0x1c7(2, 8047ddc, 8047d98, 8047db8, 8240d9f, feffb0a4)
08047db8 main+0x1b(2, 8047ddc, 8047de8, 8240db0, 0, 0)
08047dd0 _start+0x83(2, 8047e8c, 8047e9d, 0, 8047ed2, 8047ef8)
> $C                                  
ahh, here we go:
k
thanks
but i'm pretty sure it started with the last libuv updates
hopefully
now i just need to finish the hub
the drone totally works, except for the fact that on smartos it dies right now
the queen bee
ya
and centos is the one to check
but you're right, ubuntu will probably get covered by you messing with it
ugh.  centos is such crap.
centos is the windows of linux
it's hugely popular
it's nuts
like 90% or something
but off seems a bit... weird.
ee.off('event', someFunction)
it's cute, but not really clear.
do you guys have to pay to use node?  i didn't realize that.
maybe i only get it for free becasue i'm a joyent employee?
the thing that's kind of confusing to me is the assertion that he'd make node available for free
oic
should be getting a cut of that, wtf
anyway... i emailed him asking what he was talking about
since we break abi :)
yeah
i'd like to get it fixed before doing the 0.7.9 releaes
k
sorry, i think you'd told me that, but i was having trouble remembering
nono, they're disposable and terrible
i suspect firewall shenanigans
oh, got it figured out
Test, please: http://nodejs.org/dist/v0.7.9/ or 782277f11a753ded831439ed826448c06fc0f356
thanks :)
[root@a9c65738-3994-4939-ad4b-9711eeb44457 ~]# isainfo
amd64 i386
hi
[root@a9c65738-3994-4939-ad4b-9711eeb44457 ~]# pkgin in gcc47
calculating dependencies... done.
gcc47 is not available on the repository
gcc47 isn't in the repo
nothing to do.
pking no has it
see what that says
or #joyent
ok, if there are no objections, i'm gonna unveil 0.7.9
indutny, piscisaureus_: We only ever have one IPC fd.
i think just NODE_IPC_FD=3 should be fine.
we don't have to limit it in libuv, necessarily, but we ought to limit it in node
i mean, this ipc thing really only works if the other end knows what to do with it anyway
but people have asked repeatedly for it to be open to stuff other than node.
but this way, instead of "a special api for only running node programs", it could be "a special api that node provides, with some sugar for running node programs, but do whatever you want with it"
same as on unix, really
NODE_CHANNEL_FD sounds like it's the right thing for this
and the forever/coffee/jitsu folks can finally be quiet
:
:)
NODE_UNIQUE_ID is already used for cluster
that's why it's set to 42 now
but, i mean, we can put that off if we need to.
yeah
there's been a bunch of releases, and i'm hoping that this silly getter bug is fixed
kk
reviewin
hahhah :https://github.com/indutny/node/commit/68e04d4cc900f60efae9fe269871e24aab6081a6#L0L671
that error message is so confusing
in the docs we say it's deprecated, then in the error msg we say "not yet" as if it'll show up later.
i see :)
that's no fun
if you're not feeling well, you should get some rest, man.
but if it's backwards-compatible, that's important, too
indutny, piscisaureus_: it'd be nice to get some tests that leverage the new functionality
classic bikeshed problem.  don't worry about it.  the net result is that we're going to do what we're going to do, because it's the right hting to do, and people will deal with it
creationix and mikeal are being nice enough to handle the fallout.
upgrading it fixes a bunch of oddball issues.
wow, the v8 in 0.7.9 is weird
yeah, it'd be goodto get that in
k
especially the windows bits
igorzi, piscisaureus: can you guys review https://github.com/AvianFlu/libuv/compare/detached2
upgrading it fixes a bunch of oddball issues.
wow, the v8 in 0.7.9 is weird
yeah, it'd be goodto get that in
k
especially the windows bits
igorzi, piscisaureus: can you guys review https://github.com/AvianFlu/libuv/compare/detached2
good morning heroes.
call in a few minutes
once piscisaureus_ and bnoordhuis finish their standup and sign into skype :)
looks like something isn't getting ref()'ed that should be
piscisaureus_, bnoordhuis: https://github.com/joyent/node/issues/3355
AvianFlu, piscisaureus_: thanks, that's awesome
it seems like that'll break a bunch of stuff.
but a lot of packages won't.
hm.
right
they'll just mysteriously stop working in 0.8
yes, i agree.
right
sure!  i love supa cool stuff
reviewing
yes.  this.
but spelled properly :)
if (comstFds) stdio = customFds.map(function (fd, i) { return (fd === -1) ? 'pipe' : fd; });
but it'll also have .stdio[n], right?
undefined == null
*jslint
--- TIMEOUT ---
=== release test-net-pipe-connect-errors ===                                   
let's land it.  if anything else breaks, whatever, we'll just fix it
lgtm
you can do the honors :)
woot
we also have to take care of this ev_io breakage.  a bunch of modules use that, unfortunately.
at the very least, we have to not expose it, if it's going to be subtly broken
oh, i see
so if you do console.log() instead of vbeing ignored, it asplodes?
we could just make 'ignore' for 0-2 just create a pipe, and not do anything with it
yeah
maybe that should happen in libuv, though
otherwise lgtm
yeah, i'll be around probably]
but unix defaults to what we want without any extra configuration.
feels a disturbance in the force.
npmrc is a config file for npm
our windows install is a little peculiar (from a unix pov)
clearly this is not actually an npm discussin
ok, i'll duck out now :)(
but still, i'd better email Tjarda and discuss it.
ah well.  ip and trademarks.  fun.
hm.  no such notice on ffonts.net, and they have a link to the webfont there
wtf, no email address anywhere.
oh, actually, no, i got it from MyFonts
basically, it says that you can't put the file online, except via the specific instructions provided, which tell you to put it online.
but like... that's kinda how the web works... so....
i'm confused.
it also says that you can't distribute the font to others' computers.
this webfonts license is insane, though.
I think we need a better download page.
the #download popup is not enough, and the /dist/ folder is way too much
awesomesauce
kewl
sweet
reviewing code on paper is so last century
so, yeah, i've seen it in the wild with http proxies ;)
i don't know of any user agents that do that for a non-proxy request, but it IS legal
so, the sanitizing logic would have to check if it's a full url with url.parse (which is not so fast, but very sanitizing), adn THEN do parsed.pathname = path.join('/', parsed.pathname), and then req.url = url.format(parsed)
Also, a common one is that decodeURIComponent() throws if you give it bogus data
which is why you must use qs.decode() instead, since that wraps it
    at Interface.<anonymous> (repl.js:249:12)
    at Interface.EventEmitter.emit (events.js:87:17)
    at Interface._line (readline.js:502:8)
    at Interface._onLine (readline.js:183:10)
    at Interface._ttyWrite (readline.js:719:14)
    at REPLServer.self.eval (repl.js:110:21)
    at ReadStream.<anonymous> (readline.js:105:12)
    at ReadStream.EventEmitter.emit (events.js:114:20)
    at decodeURIComponent (native)
    at repl:1:2
> decodeURIComponent('%')
> querystring.decode('%')
{ '%': '' }
I'm going to try to release 0.6.19 today.  anything that you want to get into it, now's the time
*maybe* an 0.7.11
just for the 7/11 reference :)
maybe thursday
then 0.8 next week
even if that means doing it in node somehow
the cmd setting is unnecessary, too, i see that.
because we prune that handler, since it's no longer in use.
just send a Content-length: 1 header from a HEAD request, and then write a bunch of body after.
so, basically, i need to figure out why we're removing the error handler, but *not* removing the socket.ondata when it's through with the response.
and then the error happens right away
because it processes that bit of data before properly cleaning up
the http parser will say "Yep, this is done", and then the socket emits the res (since no body is expected)
test, please: http://nodejs.org/dist/v0.6.19/node-v0.6.19-RC0.tar.gz
oh, i think there's a v8 update.  shoot.
ok, there'll be a RC1 anyway :)
instead of snow, we have incredible mexican food.
Drs. P?
i'm a doof.
oh, wait a second, you already updated v8 to 3.6.6.25
i'm also seeing test-dgram-broadcast-multi-process fail on 0.6.18 and 0.6.19 on CentOS
 /Users is the giveaway
instead of /home
nice
i'm getting 0 failures on mac, actually, which is kind of odd and makes me afraid.
kewl.  yeah, it looks pretty good.
same 2 failures we always say, s/"rename"/"change"/ because apparently i cba to fix that test.
smartos ^
hm.
hm.  the debugger stuff is not terribly surprising, but the tls stuff worries me a little bit.
i'm spinning up an ubuntu drone now
it works on centos.
yeah, that's what's worrying
compiling the universe
ssl?  ssl-dev?  libssl-dev-headersopen++?
sweet, thanks
yeah, that would have to be it
hm
hm.
anyway, i'm out.  have a good night.
interesting
let's fix the test on v0.8, and call it a new feature.
0.6.19 tomorrow morning
a path inconsistency issue?
but i've been anti-path/fs.exists for over a year now
if it wasn't so entrenched, i'd cut it
oh!  lemme guess
oh, i was thinking that was a different thing
orly?
er, ls .
oh...
one sec
since it'd be like ln a/b/..
so you ln .
that should print out 'b'
what does win do?
but again, not a HUGE problem.
if it's hard, we can push it till post-v0.8
yeah, that's a problem
"that's how unix works" is always the best approach for path resolution stuff.
i think that history is quite clear on this point: the way that unix does paths is simple and correct, and the way that windows does paths is obtuse and unnecessarily retarded.
if someone's surprised, then they'll quickly come to love it.  they'll be more surprised if their windows desktop and their linux server behave differently
windows has many fine features.  but the path stuff is insane.
i force-push to vX.Y.Z-release branches
speaking of which... test, please: http://nodejs.org/dist/v0.6.19/
few relatively minor edge-case bug fixes, and an npm update.
there's hardly anything new in this release anyway
yeah, i just went ahead with it
v0.6 is coming in for a landing.
(that is, not for v0.8, maybe for later)
*really easy
so we'd have to do a bit of juggling to get that right
the tricky thing about ref/unref for timers/intervals in node is that setTimeout(fn, t) only creates a single uv timer for each unique value of t
unless it's really really
indutny, creationix^
but it just means it's a bit more involved, that's all
i mean, we can do all that juggling in javascrit
so the js timer object is attached to the unrefed timer
too late for that in v0.8
we just need to have one that's ref'ed, and one that is not ref'ed, and then move the cb over.
:)
but it's a nice api cleanup we can do for 0.9 :)
hi
but npm intentionally does not put its global modules in the default NODE_PATH, because you should not be using global modules that way
but i mean, it's not the worst thing ever.
thanks
it's just using node on the server, or on the device as well?
makes sense.
neat.  we were wondering that the other day at joyent
qv voxer, gather, etc.
totally
yep
it's basically what node is for :)
bad experience with ASP6 and PHP having easily sniffed vulnerabilities
heh
i've alwasy stripped off Server headers
res.setHeader('server', 'go fuck yourself')
the api looks pretty nodey
true that
*finally* pulled that backwards idiotic logger out of npm and into it's own module.
windows, you so crazy!!
you can cd into non-directories?
s/skytp/skype
i guess.
meh.
piscisaureus_, indutny, bnoordhuis: any objection to https://github.com/joyent/libuv/pull/437?
(that is, not just smartos, but the other ones, as well.)
i'm told by my networking friends at Joyent that it's safe for all versions of sunos that matter.
ie, opensolaris and illumos
gyp doesn't
waf set -DSUNOS_HAVE_IFADDRS for any sunos
from rmustacc: "It didn't exist in JPC 1 which is probably why that happened because Ryan had an old machine in JPC 1."
hahah
kewl, landing
jpc1 = solaris nevada-121
like, 2008 stuff.
no body uses taht.
ooollllldddd stuff
yeah, smartos is pretty magic/weird to me as well.
in my heart of hearts, i <3 the bsd
sunos is bsd-ish in many ways, but linuxy in others, and just batshit weird in others.  it's like opera, even when it's better, it's weird about it.
i've been slowly learning it and forgetting linux, though
pkgsrc
*especially* npm, but even more especially, all the other ones.
but really, every package manager makes me rageful.
review, please^
rolling back v8 to 3.10
that's probably my fault.
kewl.  i'm pulling it into my windows vm, as well.
really wants `make remote-test`
my windows machine isn't even done cloning
sweet, thanks, piscisaureus_
  'C:\Users\Isaac' is not recognized as an internal or external command,
  operable program or batch file.
ode\deps\v8\tools\gyp\v8_snapshot.vcxproj]
test/fixtures/deadbeat.js
but not as a normal user
i see.
ok, lemme try it that way
totally not helpful
 Schlueter\\AppData\\Roaming\\npm\\node_modules\\semver")
../AppData/Roaming/npm/node_modules/semver -> C:\Users\Isaac Schlueter\semver
AppData\Roaming\npm\node_modules\semver\bin\semver
npm WARN link fs.symlink("C:\\Users\\Isaac Schlueter\\semver", "C:\\Users\\Isaac
npm WARN linkPkg C:\Users\Isaac Schlueter\semver
it just means you can't move them around, but i mean, no one really does that anyway
and, the logic only relativizes it if the rel path is shorter than the absolute path, which it usually isn't for unix global links
cd /some/really/long/path;  link a b; expect a -> ./b, not a -> /some/really/long/path/b
er, link b a
silly backwards symlink argument semantics
hm, seems like the new symlink stuff is not understood by realpath... https://gist.github.com/2898421 
on it
  // Node doesn't support symlinks / lstat on windows. Hence realpath is just
  // the same as path.resolve that fails if the path doesn't exists.
  // windows version
(from fs.realpath)
hahaha
if (isWindows) {
looks great, though.  i'll land shortly.
ie, verify that it's out of the process group at first, and then that it's gone after being killed
it'd be nice to verify that there are no orphans
it's a shame that there isn't a cross-platform pgrep
or ptree
:)
a good concern :)
it's funny that virtually all of our performance in silly benchmarks is due to v8
wow, v8 3.9 is WAY faster.
while almost all of our performance in real-world stuff is due to real things like the number of syscalls we make and leaking memory and stuff.
but i've basically given up trying to convince people of this.
everyone just wants to see a big number from ab when they're returning a pre-rendered buffer.
it's also the least indicative of real-world performance.
but it's just pictures of their breakfast.
everybody things that their boring non-dynamic express site is going to be slashdotted and hackernewsed and show up on the front page of yahoo and cpan.
no one cares about your boring blog.
the performance impact that i care about is when i give it to voxer and jitsu, and they tell me its faster in real life.
i'd previously done 3.10
i'm about to land rolling v8 back to 3.9
just making sure now that i didn't fuck the build on windows
huzzah!
performance regressions.
in a few weeks it'll probably catch up and pass by, but we'll get that in 0.9
we'll pull it in eventually
hm.
i'd written the js realpath impl to match what we had from the c implementation
yeah
but realpath(2) is notoriously busted
or another case in test/simple/test-fs-realpath.js at least
since that'll break it
so we need to fix it without fixing it on windows ;)
yep
but i agree, realpath(x) should answer the question "what file will be opened by open(x)"
or more generally, "what file will be stat'd by stat(x)"
in fact, we may cause surprises by fixing it
so, you're +1 on the patch for now then?
we've been living with this edge case unix bug forever, i think we'll be fine with it for another release cycle.
we need to think of it as such, anyway
add tests, please :)
i was really confused that those tests weren't running, btw.  test-fs-realpath is 80% too clever.
kk, happy hunting.
`npm link` in windows lands tonight :)
ok, i'm heading out.  leave a message if there are problems from that realpath stuff.
has learned to be much more careful about upgrading V8
he pinged me about that after writing the test.  i told him to test on master, and it was working
it fails in 3.11.1, but passes in 3.11.7.  but we are on 3.9 anyway, which is stable
i want to get 0.7.10 out tomorrow morning, though, so that we can have a big "0.8 is coming soon!" blog post with good benchmarks and a version that isn't horridly broken
it can land in 0.7.11 (later this week)
kewl
ok, kew
but it's certainly not urgent
i suspect we'll be back-porting fixes for a while, and we can't do this in a stable branch
in fact, we probably want to either do it in v0.8, or put it off until v0.8 is pretty much "done" like we did with the JS when v0.6 had settled.
btw, i'm making good on this right now: https://twitter.com/izs/status/211609527995478017
it's IN FUCKING SANE
speaking of lint and style and such
when you have as many contributors as node does, linting IS valuable.  but it's not valuable enough to justify jeopardizing other things, of course.
and the code i'm refactoring into this style kinda needs ti
it's forcing a very high degree of discipline, though
omg, function, if, ACK! IM OUT OF ROOM
8-space is a way to enforce this
i figure 16-space will be twice as enforceful
yep
also, colorcolumn at 80 chars
*git checkout ry/v0.7.10-release
test, please: http://nodejs.org/dist/v0.7.10/
Anyone object if i remove the openssl tests from the release tarball?
has a bunch of symlinks in it
it's annoying on windows
tar complains
speaking of which, can you pull and test c48999bef31b36024b83dc7bc6fbc422106fa0b5?
you usually check out from git, though, right?
i do when i'm making builds, or for building on unix machines that might not have git
making builds in the src tree directly has a tendency to include the wrong things
good call
i dunno, i'll check in a second
frag.
ok
thanks
simple/test-eio-limit failed, and 2 message test failures (minor)
but it's been like that for a while, iirc
simple/test-eio-limit is a little concerning
kewl
and for unix, too
because there are no diffs between linux and os x and sunos ;P
yeah, right
ugh
that's odd...  it hasn't been touched since the last few releases.
sure.
we need to fix them this week.
what's your opinion?
yes.
haha, whoops
sorry for the noise everyone
do you?
i'll land that now
ok.
thanks for catching.  i don't think that's relevant enough to ammend the release.
that fixes it, yes?
didn't mean to
kewl
sorry i stole the impact points from you ;P
*less so
nothing else matters :)
ok
ugh
thanks.
right
busy atm.
cb = onlyCallOnce(cb);
function onlyCallOnce (cb) { var called = false; return function (er) { if (called) return; called = true; cb(er) } }
we don't clean up the writeStream fd on error?  i thought that was fixed.
shrug
right
so, the todo list for v0.9:https://gist.github.com/2911289
i want to try to not add any new features.
k
move those out of hte way, the rest is pretty minor, i think.
the theme of node v0.9 will be API cleanup.
hm.
right
yeah, that'd be good
cluster is pretty nice right now
only half-jokign
it'd be nice to expose more of the API that it uses, so that one *could* conceivably implement it in userland.
right now, that'd be too hard
though i think it's a bit high-level.
but that's just based on an env anyway
whatevs.
but it's not a strong feeling.  if you think it makes the implementation harder, then it's not worth it.
i like putting it in .listen() because that's where you'd put the port or socket.
so putting the FD there makes sense.
the API can be anything.
hm.  right.
plus, once someone gets a patch accepted, they're hooked, and keep helping us :)
some other folks have asked about it, as well, but it'd be good to share the load, that's all.
so that we don't catch it, but still do teh cleanup if we need to
?
the word isn't harkened all in internal of external operations program of batch stand?
<3 dutch
for me, reading dutch is like trying to read while drunk
it *feels* like i shoudl be able to read it, but i actually can't.
sweet
thanks, piscisaureus_
i see
123 bytes is not a very big webpage
i dont' get what the fascination is with bytes/123
why not bytes/12345?
yeah
but i suppose, since that was the only one that got slower on win32, it's worth having around as a test ;)
but not as well as bytes/1
clearly it's some sort of local maximum
i see
or minimum
kewl
yeah, i dont' grok the timer thing
heh.
> fs.lstatSync('/proc/stat').isFile()
it grates me a bit to have magic paths in fs.js, but i guess the magic paths are in the OS
true
i think we need to just say, if size=0, don't trust it
yeah
review? https://github.com/isaacs/node/commit/21163e48033e9fd1b5812dd6f4ca8fce7b9d5797
yeah, if stat is lying, i'd suspect that seek would be even more cagey
:D
*against
every race fails.  read always returns between 0 and 5 bytes.  stat() lies about everythign.  crazy stuff.
it'd do everything you're supposed to be careful of.
k, i'm gonna land this then.  it's a low-hanging win :)
I write this loop a lot.
how would you guys feel about a Buffer.flatten(array) method?
i'll fix that first :)
oh, more nits. nvm...
pass in an array of buffers and a length, and it'll return you a flattened one.
copying is not so bad.
yeah, i imagine.
agreement between humans or between platforms?
yeah, that's probably fair.
i see
yeah, this has 0.9 written all over it.
any way to make it sync on windows as well?  or is that the frustration you're talking about?
hrm... that sounds... not so great.
if the child doesn't pick them up soon enough
iiuc, then, the issue is that process.send is sync on unix, but async on win32, so if you send/send/send..., on windows, it'll eventually start dropping messages?
for cluster processes, i think sync message passing is not so bad.
sure
but it sounds like too much of an architectural change to even consider for v0.8 at this point
yeah, i really do not know why it's sync eihter.
put it off for a few weeks, or better yet, let more people get bit by it so we can get some data about what the best approach is.
bnoordhuis, tjfontaine: https://github.com/isaacs/node/compare/buffer-flatten
Concat it is.
bikeshed opinions?  flatten or concat?
is in the minority.
and yes, it is documneted.
oh, right, concat.
wait, wat?
igorzi, piscisaureus_: I build it with `vcbuild msi release nosnapshot`
e
that's a sham
oic
so the bytesRead returns 0 even though we knew the size
but usually only to set it to 0
oh! also, yes, we can test this, probably, by shimming fs.read so that it takes 100ms longer
that looks like a bug
weird
yo
heh :)
how strict is that is_readable flag?
if I create a new TTYWrap, it seems to want to be either readable or not.
well... should the server's fd be readable...?
TcpWrap, not TtyWrap
but yes, if guessHandleType returns 'TTY', then what?
isn't it duplex always?
oh, i completely misread your comment
or not?
i guess we can just throw.
k
is that already in libuv?  or no?
k
yeah, no uv_tcp_open in libuv atm
uh oh
what happened?
can you revert the whole commit and then do it as two commits?
ie, how "wrong" is the file?
force pushes are kind of unpleasant in a shared repo
on master anyway
that doesn't sound so bad.  just git rm it and push a fix.
hahah
we should make it easier to swap out the v8 that node uses, just so that the v8 team can make sure that all their releases are awesome for us
it seems like it'd be good to at least have the *option* to handle that in the idiomatic node way
it's an error connected to a specific node object.  if there are no listeners, it throws just the same.
well, i mean, just change the throw with .emit("error")
the try/catch is still valid
we throw in ctors, emit in methods
but i can see it's an edge case
how did v0.6 do it?
k.  whatever.  throw is fine, i guess.  lgtm :)
v0.6 threwq.
i think it might've been changed because of some cluster thing that's no longer relevant here, iirc.
5b43c63c yeah
sometimes commits are a bit TOO atomic ;)
and he said, "What about this one!?" and i said, "sure, lgtm" because in this case the reasoning for throw or emit isn't so clear.
i think it was AndreasMadsen's response to my suggestion that some other throws ought to have been error emits
and i'm capable of convincing myself in either direction, as you have no doubt noticed ;)
hahah
but if something that works most of the time suddenly fails once in a blue moon, that's an event
child.kill('SIGKILL') *usually* works.
if you call something with the wrong data types, throw immediately.
in general, emit('error') is better for things that are: 1. tied to a specific object, 2. asynchronously triggered, and 3. outside the control of the programmer.
and it's not really up to you to make it work if it doesn't
ie, sometimes you kill('SIGUSR2') to get it to do something
in this case, i may want to know that the child didn't get my message.
working on convincing myself the other direction, watch out...
and for exec()'s use-case, emit('error') is just as good, since nothing will be listening, and it'll throw
but *that* child is no longer doing his job as i expect.
if i get a ESRC there, i want to know about it, and it's tied to an object, somewhat outside of my control, etc.
maybe i'd have to know to spawn a new one, or delete some files, or whatever.
that's a message.
that's app-specific
try/catch feels wrong here.
"doing his job" might be shutting down
but it might also be something else.
it would've been good to have signals be one thing, and "shut down this process" be a completely different thing.
they try to do way too much
unix signals are the worst design api in unix.
but anyway...
maybe we mark that the ChildProcess had a kill error, and if you try to kill it and it fails, and it already has a kill error, we just return
just to prevent the child.on('error', function (er) { log(er); child.kill() })
none of the errors that kill raises can be fixed by killing again, anyway.
so if you've gotten an error from kill(), then kill() should now be a noop
oh, right, I forgot about The Moon.
ok, so, if we get an ESRCH or EPERM or EINVAL, then this.kill = function () {}?
it's safe to ignore.
should be treated like esrch
so the pid could come to refer to some process not owned by uid
right, unless you'er uid=0, which on most systems you have to be to do setuid, but not all.
what about if the process does setuid() to some other uid?
even though it's crazy rare
on sunos you could enable that specific permission
so, imo, we should probably not assume that eperm can't happen
and maybe impossible, or an OS bug if it does happen :)
the reaping case, yes, that is rare enough to ignore.
when does that happen?
because your program is doing a wrong thing
if we get an EINVAL or ENOSYS then we throw it
maybe we shouldn't try to pre-filter the signals, and just let the OS tell us what it can and can't handle.
ok
so, kill() raising ESRCH can only happen via race condition, correct?  the child has died, but the 'exit' event hasn't happened yet?
     [ESRCH]            The process id was given as 0, but the sending process does not have a process group.
oh, wait:
so, yeah, child_process.kill() should ignore ESRCH
youer' right
child.kill() ==> ESRCH, ignore; EPERM: emit; EINVAL,ENOSYS: throw
kewl.
process.kill should probably just, i dunno... throw everythign?
commute time.  bbiab
if you're not in a process group, then it's ESRCH
kill(0) kills hte process group
process leader
you did :)
about to go get lunch, though
back, actually
brb
isn't child.stdout/err sometimes null, if it's set to 'ignore'?
w00t
		--nodedir="$(shell pwd)" \
		--prefix="$(shell pwd)" --unsafe-perm # go ahead and run as root.
	./node deps/npm/bin/npm-cli.js install weak \
	@if [ ! -d node_modules ]; then mkdir -p node_modules; fi
	@if [ ! -f node ]; then make all; fi
i don't recall how to get the cwd in a cmd script
mkdir /p node_modules ; Release\node.exe deps\npm\bin\npm-cli.js install weak --nodedir="..cwd.." --prefix="..cwd.."
oh, ah, right
~0db%
did someone's cat step on the keyboard, and they decided that would be the token?
directory prefix?
does dp stand for something?
what does that mean, btw?
are these options written down somewhere?
neat.
oh, right, dir path
neat
call just ended
ok, back to it
i guess, whatevs, let's leave it
yeah
land it, then make tests pass, or if you find some moments, lmk where to go to add tcp_open
lgtm
ok, i like it
uv_tcp_open
i thought they'd get UV_UNKNOWN
maybe we can just make listenFD be a pipe thing?
w00t
(in which case, i'm basically done)
isn't that what it used to be?
right
i'd rather that it crash fast than behave oddly
right
so, i'm tempted to just raise ENOTSUP or something on windows, to be sure.
but listening on a pipe, is that going to be weird on windoes?
for now, let's unix philosophy this shit.
hm.
just try and do what we need to do, and see what yells at us.
let's assume for the moment it's only pipes that we care about
k
node is not your mommy.
hmmm...
all the uses for listenfd that i can find are either handled better with cluster, or are very illumos-specific
i'm having a bit of trouble coming up with a portable use case here.
yeah
ahah
i think i'll be able to do it
i'm trying out some thigns
just would prefer that it be closer to an actual use case so that i know we're getting it right, that's all.
and that ipc can only be over a socket
making an OS is hard :)
so the processes can only do ipc, they can't actually spawn one anotehr
well, they'd just use fork or cluster, except that the fd is being passed between zones
what about that?
iirc
what's the problem?
give it a break, it's like 40 years old
i dont' get the problem.
i've got these three cases working: https://gist.github.com/2920955
it doesn't sound too crazy to me.  maybe i'm just not seeing the problem.
maybe
maybe you want a few generations all sharing the same stdout or something
shrug
how would it happen accidentally?
so, just changing the default value from 'inherit' to 'pipe' or something?
as 29?  or as 3 or something?
did i give 29 to the child?
via a stdio or via ipc?
ok
so, child_process.spawn(c,a,{stdio:[,,,,,,,,,,,,,,,,,,,,,,,,,,,,,29]}) or something?
well, that's weird, but ok.
you keep welcoming me, but i live here.... ;P
anything outside of 0-2 should default to 'ignore'
k
ok, so, the "unix and windows" world is not very welcoming.
the default should be [0,1,2] or [-1,-1,-1], depending on whether you called spawn or exec
so, what has to happen to make this dtrt on both nix and windows?
unix + windows = "unpleasantness"
unix = yes.  windows = hmm... maybe.
hm....
i'm using it a little in this test, adn it's SO nice.
it's a NICE abstraction, i must say
it's like bash.
$ cmd &3< # boom, fd 3 is readable.
oh, i did that wrong
whatever, bash is ugly, i have to look up how to do it every time.
ok
you know what to do?
k
TooTallNate (or whoever's awake): How do you feel about moving ._handle to .handle
it's a bit like readStream.fd or something
it's not quite public... but we're sort of expecting users to at some point have some understanding of what it is.
right
.fd?  not really.
file streams have an fd member
i mean, the ._foo (to me at least) means "This is super off limits.  pretend you can't see this.  definitely do not write it."
yeah
you're welcome to look at it.
and have it just share the handle.
but like, i want to be able to do stuff like:  server.listen(otherServer)
but you shouldn't set it yourself, unless you sort of know what you' doing.
i guess we should probably put it off until 0.9
it's api cleanup.
shoudl be the same with .handle, i'd think.
sigh.
.fd?  yeah, should be.
hm.  no, it isn't.
i'm just trying to document listen({fd:n}) and kind of noticing the inconsistency
meh.  we can do it later, i guess.
it's a LOT of lines.
nah.
basically anything that wasn't promised a month ago is out.
gotta be saying no to more and more stuff.
we'll miss something.
:)
one sec..
plus we can land that right now.
well... ryah's a vip.
running tests with the listen-fd stuff
the fact that we dink around with it in tests sort of implies to me that it ought to just bite the bullet and expose it
windows HAS file descriptors.
they're just a bit less core than on unix.
had to force-push a lint fix
nah, just say it's good so i can blame you when it breaks shit ;)
oh, tests can be linty
new rule :)
thanks
good morning
"expand the object syntax there" ?
*mes
oh, right
yeah, that's a messa
doesn't matter
if the master has a fd open, then the children can listen on that fd
that's where it gets opened, and the handle sent to the children
the fd is only actually in the master process
the children don't actually have it, only the parent does
sure, i mean, they don't have an fd:3 to listen on
parent's
the master's
whatever fd=29 points to in the master
again, that's *very* unlikely.
cluster is already a much better way to share listening
it works just like listen port=8000
now, the worker says, "Hay, master, make a listen on fd=3, and gimme the handle"
so ti's the master's fd
the worker says, "Hay, master, make a listen on 8000, and gimme the handle"
this is only relevant in cases where you've received a fd from somewhere else, and want to listen on it
anything useful?
great!
kewl
does it break in an obvious way, or should we add a platform check to make sure?
ENOTSUP was the error i was hoping for
hooray!!
i was waiting for you to tell me there's no clever way to make it work
k, will do
orly?  worth doing, or no?
i'm totally fine with that
ok, kewl
right
yep
yep.
kewl
writing the doc now
bnoordhuis, piscisaureus_: thoughts on listen(0) in cluster?
i'm tempted to just document it now, while i'm here in the cluster doc, but it's not hte first time someone's complained, and there's a pull req to fix it.
if you don't want server sharing why are you using cluster?
let's say i want my http server to be shared across, and each cluster module to have a tcp server so i can repl into them individually
well, there are some valid use cases, i suppose
hm...
right, so the cluster._getServer would see port=0 and just not ask the parent.
well, another way you could do that is have the master manage who gets what ports
yeah
so, it's shared, but only with you
sure
:)
so, if it has private: true, don't ask the parent at all
sure, that too
i'm just gonna document that 0 is "the same random"
it's that it's not shared
kewl.
not the same thign
yeah, it's not that it's *private*
let's clean it up in 0.9
punting for now.  just gonna document the weirdness.
we can come up with something nice later.
?
(which yes, is a typo, i don't see any other ones)
fixed
k
ok, i'm gonna squash into one commit and land it.
oh, i should've split the doc patch out to be more git-correct and atomic.  oh well.
oh, right, that
don't directly address the packages that npm shows you :)
just call it "mocha" and get it from where it resolves to
that doesn't need to be in libuv
if the npm thing is brittle, we should make it not brittle.
piscisaureus_, ryah: Part of the goal of having a binary addon build in node's build process is to force us to make it a nicer experience.
it's just "oh, it built, ok"
it's not a real test if we're not actually using the tools to get something done.
if we're actually relying on it, then it actually bugs us when it sucks.
no skin in teh game.
teh presence of an addon build in my normal day to day tests has already helped us make the experience much better for our users.
but it needs to be a very noisy failure, that's all.
i can see the benefit of course of having it not prevent the running of other tests
hahahah
"We've replaced Node's BDFL with a robot that randomly raises or lowers its hand.... let's see if they notice."
$ npm owner ls weak -q
TooTallNate <nathan@tootallnate.net>
tootallnate <nathan@tootallnate.net>
and compilation !== works
hah
ok, wanna send a pull request?
yes.
"insanely broken" = "does javascript wrong".  random things being undefined right after you set them, etc.
but i suspect all that got fixed by now.
heh
nice
i see
i'd removed it, which is why it wasn't there.
er, 3.11
3.9 is going to not get as many fixes over the life of node 0.8.x
k
kewl
let's do it!
we should bet on 3.11 i think
before anything else, though, i just realized that i have not eaten since breakfast and it's super late.
to the tacos!
\o/
and i hadn't pulled the original, so i don't actually care
don't do that! ;P
oh, ok
sure
people see those CIA updates and are very attentive sometimes
you'd be surprised
awesome
btw, i've got some seriously hot stuff planned for npm init.
k
oic
or anyone else :)
good morning
how are things in the lands of neder?
oh, no, do you have to speak german now?
tut mir so leid für Ihren Verlust
Es ist sehr mühsam, bis Google Translate aus dem IRC zu wechseln. Jemand muss eine Übersetzung Roboter zu schreiben.
hahaha, indeed
i think that's a bug in v8, still
hm.  actually, the spec is notably silent on that point.
really!?
where?
:)
hm, indeed.
that is a convoluted bit of spec right there.
NonEscapeCharacter ::
SourceCharacter but not EscapeCharacter or LineTerminator
that's it.
1 hour from now
or whenever we're all here and ready
kewl, ok
looks like webkit just got that in a recent update, as well, which is the one v8 seems to mimic
bunch of failures around child processes, in fact.
seems like some new failures from child_process.fork()
simple/test-child-process-fork-exec-argv seems like the simplest failure case.  the forked process isn't printing its stdout or stderr
but that could be related, i guess
yeah, bisecting will be painful with the recent v8 change
the node installed in my /usr/local/bin doesn't have the error, but i have no idea when i built that
we should go back to putting the commit hash in node's version when IS_RELEASE is 0
goes a-bisectin
o/
09be360 is good
09be360 is the first bad commit
er, no, 37d75ba is good.  checkout out 09be360 now
but if it's going to take a long while, i can live with the inheriting fds rather than breaking fork
hep
testing with it reverted now, one sec
we should probably just fix the bug, not revert the commit
withthe reverted fd inherit thing
sure, one sec
can you try that patch?
by the way, the fact that readdir in os x returns alphabetized results is just so lovely.
i agree
it's the little things, you know?
not in node, but in the test runner
with linux, it's a surprise every time what order the tests will run in
anyway, yeah, that fixed it
nice
i feel like i'm not really the target market to decide, since i always know what module i want, and go directly to that html page.
or putting them in some sort of reasonable order?
speaking of which, how do you guys feel about alphabetizing the docs?
ok, same 4 failures on centos with that change.
or, perhaps, we could have a toc page, and an alphabetical index as the last page, or something
i'm gonna fix this message test
k
:)
message tests are kind of a pita, but they're nice so that we notice when we change error stack traces.
that's an important part of node's user interface.
i do not know
k
process.on('exit', function () { while (true); })
i see
wait wat?  there's a vcbuild upload?
oh, also, is there a ssh keychain utility for windows that's good?
oh, ok
on unix, you have a ssh-agent that adds your key and unlocks it, and then that session can keep using that key without typing the passphrase.
ssh keychain: well, every time i scp from windows, i have to type my key passphrase.
on os x, this is integrated with the operating system keychain, so it's really seamless.
i see
it's ok.  maybe i don't want my windows vm to have that.  it already has my private keys.
that's probably scary enough ;)
a build-time warning would also be nice.
this is why js bots are annoying.
because you JUST CANT HELP YOURSELF and have to figure out how to break them
i know, i do it, too
but we can update it to do that once we've written the wiki page :)
or later, i dunno.
then we rip it make it a build failure in 0.9 sometime.
yeah, probably
yeah
    copy(['src/node.d'], 'lib/dtrace/');
  // dtrace
  if (!process.platform.match(/^linux/)) {
  }
how's that?
HAHAHAHahah
aren't the porting dtrace to beos?
i mean...
k
but this is the big blocker
yeah, there are a few more patches and pulls to review, as well.
> exec('whoami /priv', console.error)
not sure, haven't built yet.  i'll let you know when i do
I will never get used to the backslashes.
it's SO WRONG
the backslashes.
here's why you don't want accidental handle inheritance
right
that sounds like something that we can potentially implement in a later v0.8 release, or in v0.9+
it'd sure be *nice* to make node's handshake performance better, but i'm not sure how essential it is to get into v0.8.0
we can just do it in such a way that it doesn't expose the session storage to the external apis.
great!
> fs.realpathSync('./test/tmp/node-test-realpath-abs-kids/a/link')
> fs.realpathSync('./test/tmp/node-test-realpath-abs-kids/a/link/c')
nk\\c'
if you don't disagree, i'll fix it :)
that seems like a genuine bug.
k, great.
otherwise i've got the test passing, and doing meaningful things.
hay!
i was savin those.
the bash realpath stuff was bs anyway.
's german is even worse than his dutch
in battlefields they have itchy mires in best beers 
nice
ALWAYS WITH THE SLASHES.
srsly.
found the bug in fs.realpath.  it's so dumb.
wrong slash being used in a regexp.
the backslash on paths is seriously the worst thing about windows.
but clearly the world decided this, long ago
i can't even count all the hours spent fixing bugs that came down to something like replacing [\s\/] with [\s\/\\]
and means nothing
and of course, on like every unix, \ is a perfectly valid character to have in a path.
.
given this:
hm...
windows resolves symlinks weird.
│   └── root.js
├── cycles/
└── symlink -> ../tmp/cycles/root.js
(this is in a folder named tmp, of course)
windows will throw if you try to fs.stat(symlink)
:D
SRSLY WHY DO I NOT JUST GUESS THIS NOW.
ohhh... it works as expected if you use forward slashes.
yelling isn't as much fun without a robot that yells back.
off to lunch
it's super annoying
ok, need food badly.  bbiab
0.6 is already mostly dead to me
;)
back
srsly
so it didn't break `make test`, but it failed running it explicitly (which i was doing in windows)
ha!
yeah
nope, that's it.
generating code...
an un-fancy way is fine,too
but, that's pretty fancy
like, a variable you can tweak to make it happen more or less
or just do it automatically and see who complains
if you're opting in to using a session storage, then maybe we could say that it's your responsibility to manage it
so an api is ok.
we can call that api automatically if it gets really extreme, i guess
10k objects is not THAT much, really
but i don't see that as an urgent issue, really
if people are using the path module methods, then they don't need this.
oh, hahahah
yeah, that's a big deal :)
another windows test bites the dust! \o/
ok
hm.  that's tricky
it's opt out, but potentially leaky, then
like, you might not know it's there, and then have lots of memory usage
ok, i'll shut up then
yeah
and we're limiting that to 10,000 sessions?
can you set the max number of sessions in that sessionStorage field?
k.
sounds very reasonable
bnoordhuis or ryah should +1 it.  or pquerna if he feels like getting involved :)
right
that's fine, as long as it's documented and can be modified, that's all i really care about
hm.  yeah, i guess, it's a bit tricky
how's performance with it?
well, bigger is better :)
can you share the patch in teh comments on https://github.com/joyent/node/issues/2846?
maybe one of the people complaining about it would be able to see if it helps them
a lot of tests do that
lgtm
(again)
everyone who sees it will see how much faster 0.8 is than 0.6
oh, i retweeted it
:D
chinamarket
html5
it's guerrilla marketing with social media campaign and big data
m2m
mobile
regretting what i started...
LOL
omg make it stop
that's the problem with social marketing, it goes viral
g'nite
overriding methods is one of the core things that you do in OOP
why?
i really want to revert this removeAllListeners change.
it's so subtle, and hard to even really explain to people
rather, changing it is unnecessarily expensive for what it actually does
we dont' have to change it
that's the change we need.  a change back :)
revert revert reapply revert!
we need to not not undo the thing we didn't do about deleting the thing we should keep!
ee = new EventEmitter; ee.on('ev', fucntion(){}); x = ee.listeners('ev');  ee.removeAllListeners('ev');  x.length
it's a change.
and we've put in the docs that events.js is frozen
i believe so.
that's how it was on 0.4 and0.6
x.length should return 1 in that example.
$ node
'v0.4.12'
1
> e.on('ev', function () {})
> e.removeAllListeners('ev')
> process.version
> var EE = require('events').EventEmitter
> var e = new EE()
> x = e.listeners('ev')
> x.length
[ [Function] ]
yep
{ _events: { ev: [Function] } }
{ _events: { ev: null } }
hahah
i thought it was pistols at dawn
or actually, to the extent that it is, the fuckup is exposing that array in the first place.
the point isn't that we should maintain consistency forever regardless, the point is that api chagnes to events.js are stupidly expensive for us and our users.
off to log it
or +2 it, i guess :)
g'nite :)
thanks
whereas before it didn't.
right
including many hot paths, where we do stuff like req.listeners(eventType).length repeatedly
it looks like readline is the only place we cache it anyway
if we're not caching in http, clearly this is premature optimization
not a hot path
right
just looking for a +1 on the docs, i guess ;)
tests pass
guys.
is really great.
limechat.
i can't believe i didn't hear about it until recently. it's like everything i <3 about colloquy, without everything i </3 about colloquy
is there any way to change the timezone that limechat displays the time in?
i work on a few projects with a bunch of people from Europe, so it's useful to display the timestamps in UTC so that i know easily what time it is for them without doing math.
colloquy and adium just can't keep up.
everyone wants limechat limechat limechat
we're talking up limechat in #node.js
you're taking over.
Just bought the limechat iOS app.  Not so much because I want to chat on IRC on my phone, as that it appears to be the only way I can express my joy at this application through dollars.
Thank you very much, Satoshi Nakagawa.
ha
indeed
i'm not a fan of the ## style irc channel names
one # is enough
interesting
official = registered with chanserv?
oh, ok
g'nite
(just curious)
but i think node's lib folder is pretty free of v8-isms.  it'd be rad if npm could run on luvmonkey
obviously any v8 or sm specific features wouldn't be
at least, in the JS layer
i mean, even, "use exactly the same lib folder and npm works on both"
just src/ would be different of course
right
pipe_wrap etc
that, too.
if there's no test for it, it's by definition not supported.
but sometimes they do some questionable things ;)
omg i just registered so hard it made nerdtracker three times as excited!
but i'll wait for a little while first :)
hahah
i'm going to tell everyone.
mikeal told me about it, and since he first told me about the idea, i've been eager to use it for the npm module website.
yes.
hm... piping twice to the same stream is kind of hazardous.
maybe not "osmosis"
that's weird
it's ok
somewhat failsome operationally, but the food was good.
CONSIDER YOURSELF TRACKED, NERD!
is back at the official Oakland Node.js Office
OO NO U DIINT!
I'M GOING TO SLEEP SO HARD LIKE A KING ON A MATTRESS OF LUSCIOUS PNEUMONIC FOAMS!
SPEAKING OF SLEEPING, very excited about my new bed coming.
i've been waiting for this for years.
boom-tsh!
bump-dadump-dum
fauxkland
dude, that's not the warehouse.
it's the OG DEN man
and i'm getting a little tired of beat
ok, i'm going to shower and head over.
has internet? power? seats?
that is very very compelling
AND IM IN HIS HOUSE
LINTIN YOUR NODES
nono, in mikeal's house
;P
bike mode activate!
heading to brown couch
DEAL!
My friend seldo has a bit of an accent, from growing up in Trinidad, and then going to college in London.
Once he commented on how he was short on "praw juice"
and had to go to the store
i thought he was saying "prawn juice" for the longest time, and figured it was some kind of disgusting island/briton delicacy.
i see
TapProducer is a stream that you write objects into
er, TapConsumer, i mean
mikeal, maxogden: you guys still at 504?
badumpa chumba beep buup badumpsh 
that's the the song that's playing right now.
it's a swanky pad for the distinguished waterfowl
and a giant bird made out of wood, which i assume is to scare the more unsavory types of birds away
hi
i need to print up a new batch of those things
need to get joyent to give me some node.js stickers, too
nice
but having a npm sticker is definitely more authentic :)
oh!!  i've biked past that place a zilliion times
a pianist walked in and asked if she could play the piano.
at Coffee With A Beat
she's very good.
she's with a boy.  he's very impressed.
afaik
this has never happened here.
this pianist is killing it.
the coffee with a beat, it has a beat.
:)
OMG she's signing.
er, singing
not signing.  that'd be hard to do while playing the piano
anyone else in this area want some coffee beans?
and nothign happens
anyone interested in thai food?  i'm heading to grand ave thai, i think.
now i'm very hungry.  thank you for reminding me!
THE DOTS SPIN.
THEY ARE HEXAGONS AND THEY ARE SPINNING AND NOW I'M HUNGRY AND FRIENDLESS.
I'm going to leave in the next 5 minutes, and it won't take me much thaim to get there
Hm... my 4sq acct seems to have fallen out of #nerdtracker
is at Merritt Station Cafe
Hate those things.
Man.  Fucking raccoons.
They're adorable until you realize what assholes they are.
i usually used a baseball bat.
or, occasionally, a super-soaker filled with my own urine.
so it's kinda just like speaking their language.
which sounds disgusting, but is effectively how raccoons keep each other in line.
to remedy!
are all in oakland!
also sfo
united?
SO_EMPTY
for a second, i thought that was some kind of socket option i wasn't familiar with.
tacos mi ranch tiem in a few minutes.
just finished my email rants for the day.
mfr mothafuckr!
is worn out from a day of san fran tourism
segways!
we rode around the park with marisa's folks.
yeah, it was fun
nice~
oh, that sucks
instead of my fork
now i can return to using your mkdirp
saweet!
Whassup, party people in the place to be?
no bart into sf today
(and not just because there is a sports)
nada.
the reason you need that, though, is because the tests are async, so it doesn't end when the tick is over.
tap supports timeouts
test("a test that times out", { timeout: 1000 }, function (t) { setTimeout(function () { t.pass("not soon enough"); t.end() }, 2000) })
4s is not enough
which *is* crazy long.
yeah
you can set it to whatever you want, though.  if you want no timeout at all, you can set it to Infinity
exiting nicely (and not timing out) is a part of testing the program validity, most of the time.
it's implied
the module.exports from tap is the GlobalHarness singleton
but, running each server in a nested test, that's fine, too
it's more common when you want to organize tests, and the time to set up and tear down is non-negligible.
sure.
i think we really do need to split it into tap and tap-core
in some joyent-internal cases, the time to set up the server is highly non-negligible.
it was a tough call to include nopt in tap
someone else with a less recent cache would see it right away.
great :)
it's like a browser cache.
sweet :)
funny
hahaha
i'm probably going to just take that and call it node-glob 3.0 or whatever.
if i didn't have a talk to prepare for heroku waza, i probably would have released a new node-glob today.
maybe if the conf is really boring.
that's funn
yeah
you can use http://github.com/isaacs/miniglob right now, probably.
yeah, i need to finish my tests for it.  i have a script that does what i expect, even on windows, but it's good to get it formalized into a `npm test` script so that i can dev on it more in the future without worrying about breaking it
but like, copy will think that c:/foo is an option
only programmatically.
and gets upset.
copy reads c:/foo as "c: /foo" and then doesn't know what the "/foo" option is.
copy, move, mkdir, etc.
stuff you type into cmd.exe
the really tricky bit came about because \ is a valid path char on unix.
by necessity, glob does a pretty considerable number of system calls.
doing that synchronously is kind of awful.
globSync is going away, probably.
i guess it's not the end of the world at startup time.
it's pretty hazardous anyhow.
yeah
yeah, that also will not work.
and maintain two parallel implementations.
basically, you have to write it twice.
but that's kind of insane.
i could have miniglob provide a sync option.
it's just that it's a lot of duplication of effort.
unless you do it the naive way, and walk the whole tree the first time, then minimatch on it.
npm is a command line util.
specious argument.
and it's all async.
but yeah
loves the & operator in bash
why?  because it has to do network stuff anyway, and it means that it can do stuff in parallel.
i can inject functionality wherever, it's very flexible.
it's actually really nice to have things be asynchronous and functional, once you start thinking in that style.
install two packages at once, clean them both up if one fails, etc.
it's all possible, it's software ;)
stuff that's kind of tricky or slow in sync world, i guess, not "not possible"
you can send the program flow in ways that just aren't possible in a sync world.
but if you're doing an openSync, there's nothing it can do.
that feeling is not in javascript.
the feeling is in you.
you actually have *more* power with async code, not less.  it's like a clutch vs an automatic in some ways.
you can do *stupid* things, for sure.
:)
but of course, like most things in js, the syntax is pretty terrible and ugly.
i've spent years in php and bash, js looks pretty nice.
it's terrible syntax if it's sync, too
programming isn't about syntax.
whatever.
anyway, gotta finish this talk.
you going to waza tomorrow?
$0.02
you'er probably not doing them any favors by keeping them.
no ttl, no disk overflow, no expirations
;P
no args necessary
there ya go.
(or at least, one that is the same as the .gitignore, except it doesn't ignore js)
put an empty .npmignore there.
:)
but it's really quite bad.
i didnt' see how awful this was until it got too bad
we learn from the best, and be better.
enjoy your terrible slow installations that fail half the time for unreasonable reasons :)
it was the default for a little while, and we all hated it.
big strokes :)
it's terrible.
no one uses it.
yeah
but there's some catch-up to do
is about to give a talk on this...
but fetching from a registry (or even more than one git remote) at deploy time is super hazardous.
so npm might have a place in the process.
you might have to `npm rebuild` to build any binary deps
or rather, the trade-off between a few KLoC in source control vs randomly breaking builds is heavily tilted in one direction.
but 0 and 1 are occasionally interesting.
so, the good stuff starts at process.argv[2]
(or v8)
also, stuff like --expose-gc is stripped off, if it's an arg that node responds to
to do it in one command
sure
sorry, i hope no one was excited about learning how to make lots of money working from home.
i don't follow
almost done with optional dependencies.
kk
node-waf will never be win32-compliant, i'm afraid.
also, node-waf is going away.
everything that gets compiled will be compile-on-publish instead of compile-on-install
(or something)
compile-on-install will be opt-in,and require that you've installed node such that you have a build toolchain
right now, too much of the pain of using binary addons is on the user, and not enough on the developer.
"just" a resource issue.
hah
feature flags!
just disabled by default.
most of the nuts and bolts are there already.
really, you shouldn't claim to support windows if you don't have a windows machine to test your program on.
*especially* if the code gets compiled.
is there any mysql addon will work win & lin ?
:)
i think you might need --force to remove it entirely, rather than version-by-version
then npm unpublish old-name; npm publish
 Can I do it using the streaming stuff?
or namespace or whatever.
nodejitsu does this quite a bit
just namespace it with your app name or whatever
cp config/package.json .; npm install
then rm package.json
;P
srsiously, try it.
that italicizes.
hahahah
is that not a thing that the kids do any more?
well, i mean, it's an art form.
OH crap, i missed a great opportunity there.  that sucks.
i have lots of practice.
oh well, next time.
with your mom
but something is busted.  fix that.
don't like it? configure your editor to not show them.
i like indenting with semicolons
do you really want indentation you can't even SEE?  how can you trust that?
explicit is better.
dude, super critical
.. Object.getOwnPropertyNames(global)
.. Object.getOwnPropertyNames((function () { return this })())
.. emit("hello")
.. emit.toString()
.. emitter
.. emitter()
thats... weird
i mean, not normally
this is fine:
a t.test() is treated as one "thing" for the purpose of the plan
no, i still only output a single 1..N at the top level.
tap.plan(1); tap.test("parent", function (t) { t.plan(2); t.pass("ok"); t.test("child", function (t) { t.plan(1); t.pass("kid's alright.") }) })
and adjust the numbers as needed.
i just juggle it all internally
oh, nice
so, in that result, the actual tap output will be 1..2
(well, it'll emit a failing test for that)
or if you do a plan in the middle of tests
but other than that, and a few other little things, it's remarkably forgiving.
you can emit no tests or tap output, and just exit 0, and it'll call that a success
0.6.8 lands as soon as we get the numeric key hash thingie in v8 3.6
cmr did something like that for the tap runner
ie, not user executable, but it is group-executable.
if you're the owner, you can't execute it, but if you are in the group, well, then you CAN execute it.
your code will abort there.
(ie, windows)
if (( (mode & 0100) && process.getuid && uid === process.getuid()) || ((mode & 0010) && process.getgid && process.getgid() === gid) || ...
i dunno.
i guess just put a non-executable file in the tests/ folder?
that doesn't end in .js
but i mean, that's the bad behavior you're preventing.
echo "if this tries to run, its a failure" > test/do-not-run; chmod 0644 test/do-not-run
that's the bug you're fixing.
yeah, it's just a negative test.
ahaha
:)
but it's async
or mention "npm"
yeah
and way less mary.
heh
npm help json is also good
haha
ok :)
>100loc is not "just" or "simply"
hm.  is there something i can install to reproduce it?
and there's a json-tool node program for doing json parsing, also has a cli interface for pulling out fields and such
(or tar -z if you wanna do it that way)
and you could curl/gzcat/tar the tarballs in the registry.  the url format is pretty easy to grok.
but even there, i could just do `npm update request; git add node_modules/request`
i don't really get the fascination with git submodules, though.
i use them in npm itself, and they're pretty bad, actualy
the only nice thing is that i can do `npm explore request -- git pull origin master` to update it
i'll probably ditch the submodules soon in favor of checked-in deps.
arg, node 0.4, really?
i mean, 0.7 is going to come out in a few weeks.
Submodules gives you all your first-level dependencies right there, the only thing needed for Node.js is consolidating submodules to the root path and specify compatible future versions, which I do in .gitmodules, module.package.version=4 or whatnot
the reason i whine is that, if it IS a bug in npm, it'd be a lot to fix in 1.0.
but this requires having a zlib binding.  so, no 0.4 support.
it uses node-tar, so i control the oddness directly :)
they ruin pretty much everything that makes git awesome.
goes off to strip out npm's submodules and put his code where his mouth is...
same with npm's releases.
there's a reason node bundles v8 and statically links to it.  because it's a downloadable application.
but seriously, 193M is crazy gigantic.
er, c4milo
haha
it's kind of wonky and experimental, but mostly works.
no shit.
oh, then gah!!
ohhhh, ok
what are you doing?
wth?
you know node-tap has coverage now?
(by default)
and your deps should not get their devdeps installed anyway
if you had to do the compilation up front, you'd never choose to do that.
opens the door for a lot of bad decisions like including spidermonkey in a node test harness.
expresso uses jscoverage.
it was a murky time, i'm sure.
most expresso users don't use coverage anyway
:)
but we'll see.
it's vaporware at this point, so i don't want to say too much about it.
miniglob/node-glob is very close to the finish line, though
moving to the "check in deps" model.
no more submodules in npm: https://github.com/isaacs/npm/commit/c1238f7b02ca079e270f66ff161050b825120f70
but it's just a JS artifact.
Aikar++
it's ~ or ~>
(or is that what TheJH suggested...?)
i see
isn't that kind of what xml2js does, too?
oh, nice
i see
s/metaphors/paradigms/
that's clever :)
waf is fundamentally tied to unix metaphors.
yeah
is mixing up his $0.10 words.
or something
it'll be harder to miss :)
but i figure, if you've got xml, and yoer' in a web browser, you've got all kinds fo tools anyway.  you've got a dom parser right there, after all.
i figured you built it
ohhh... now i get it
you tweeted it
cmr++
thanks
nave supports named envs now, too
YES, it's double rainbows!!
it's aMAZing!!
nave use someproject
then pick the version of node to use, and it'll set up a separate global env for just that project.
what does that even MEAN?
(in this case)
(or log in as root, perhaps?)
i debug 3x slower in CS
right
seems like CS is optimizing the wrong problem.
you spend more time debugging than writing.
because i don't know what you're talking about otherwise :)
are you sure?
(what i'd said pre-split ^)
are you sure?
it's not more debuggable.
brb
back
i use them a lot
the CS-generated JS clases are crazy, though
when reading CS code
i know, i'm agreeing with you :)
that just is a hazard.
you *always* end up leaking some garbage.
2008!!???
feels old.
my first language was Basic
10Kloc isn't that much 
is mlk jr day
:)
always good to get first-hand accounts.
kelw
but you should really never run `npm install` to set up a production dependency.
if it's just strictly js stuff, then you can skip that step
ftp!?
i don't know what node-proxy is
yikes.
:)
ftp is from the good old days when you knew everyone with a computer by their first name.
you should use something that goes over an ssh tunnel, even for playing around.
that way, if you have your deps in git, you can alwyas re-play the deploy, with 100% confidence.
that's a huge hazard.
you don't want to ever fetch from another remote server at deploy time.
what if the registry or git repo goes down midway through a deploy?
when you have more than one server, this is super important.
you probably deleted a different file, not npm-link.1
not npm
or binary installer
cd into the source folder, do `make install` again
ok
ok
* installing deps/npm/node_modules/tar/tar.js as /usr/local/lib/node_modules/npm/node_modules/tar/tar.js 
don't
no
if you want to get a newer one, you can do `npm install npm -g`
bedtime.  good night.
(or are currently in the process of being loaded)
so, __filename will always be in that list.
and aren't loaded from the filesystem, so they're essentially "free" to load anywya
and memory overhead.
that is, no IO, just JS parsing costs.
+1?
chrisdickinson, tjholowaychuk ^
man... --dev should only be one level.
ok.
you know, btw, `npm install` installs dev deps one level in anyway
but not the dev grandchildren
extremely useful.
if you really want mocha's devDeps
lol.
should pulls in expresso
yes, it SHOULD.
│   └── expresso@0.9.2 
│ ├── commander@0.5.2 
│ ├── debug@0.1.0 
│ ├── growl@1.4.1 
│ └─┬ should@0.3.2 
├─┬ mocha@0.10.1  extraneous
98or, just write it in js)
foo)( wrapped in () ==> (foo)()
 /msg sh1mmer yo
 /msg sh1mmer nice hat.
;P
so put connection.close() (or whatever is appropriate for your specific db binding) at the bottom of your script
(i know you know, just being precise for tech support value)
lol
it has to be explicitly closed.
since that has some edge cases and exposes a lot of manual work to the user, which i didn't want to do.
yeah, it's not full-on gnu-style
tap tap
thanks, SubStack.
i really gotta finish this harness rewrite so that bailout can work properly...
that fills me with warm joys.
hi, astropirate
hands westc a lozenge
i am so unreasonably happy about node-glob being all js now.
no early bird for me.
oh well.
for real
a lot of things, one being setting up a work poll for a thread poll, to handle computationaly expensive parts of requests for my server
child_process lets you send a message to a child, I'd rather have the children 'wake up' once a condition variable is set to let free ones know theres is more work
likely in a month or two.
is 0.7 stable or still in development, the latest download on the side is 0.6.7
er, then there'll be 0.9
if you'er in development, and not releasing tomorrow, i'd recommend using 0.7
that's a ways off.
which will freeze in either 1.0 or 0.10, not sure yet.
I also couldn't find isolates in 0.7 api
but we'll see if that's feasible or not.
the goal is for 1.0 to be api-frozen forever.
there's a lot that we want to get done before then.
i know that process.binding ate my babies.
in fact.
there are absolutely zero guarantees about process.binding results being consistent.
and kindles.
anyway..
haha
it also eats ipods.
srsly.
YOUR cookies, yes!
haha
because it returns internal, undocumented types that should only be used by node core modules basically, right?
why do you need to do that?  why not let them get an error?
env.PORT or some such.
what's wrong with telling the program what it's doing?
env.PORT0 env.PORT1 env.PORT2, ... env.PORT20
give them a range, then
so?
and hijacking process.binding("net") isn't?
you get to listen on those ones.
:D
i'm listening on some other port instead.
if, somewhere else in my code, i do net.connect("localhost", 12345), what happens?
otherwise the magical lie becomes a source of *later* failure, instead of failing when you know it's a problem.
then let me handle it.
why not just break the world up front, by having the listen fail?
back up.  unwind the use case further.
really, there are many many ways around this problem that don't involve hijacking node's net binding.
when you assume that the known-unsafe approach is just not an option, other solutions become more visible.
and really, they're not bad.
if you want apps to be isolated *for real*, then that's how you do it.
well, a vm (or better yet, sunos zone or bsd jail) is a bigger solution.
you give them each an *actual* network stack, etc.
and it'll just be out in the wild.
then open up http://localhost:1337/index.html in your web browser.
your reasons for not using semi-colons are all technically correct and everything, but I'm thankful that most people use them to end every statement because most of the Js I read is spaghetti and at least I can quickly tell if a statement ends on a line or not.
I can write code without semi-colons, but I'm talking about reading it. I like reading code that has semi-colons because it's more precise.
here's why I don't like it
;)
right?
then you'd *always* know when a statement continues to the next line, because there wouldn't be 80 semicolons there.
:)
you do this F-shape kind of thing.
everything should be cut-and-pasteable anywhere.
*consistently* ending with them fixes the problem.
a lot of languages have optional semis.
that's why making them optional was a mistake
and worked on several different js projects.
but there's a value in actually seeing the subtle differences it makes.
if you still hate it, fine.
rather than just saying that it's not precise.
I think that's a good enough experience to know how I like to read code
I've been reading javascript code for 15 years now
there are lots of languages that have lots of warts to
(well, not all my life, just the last 30 years or so, and for the first few, i sucked at it)
i've been speaking human languages all my life, doesn't mean i'm qualified to comment on chinese.
no?
it may mean that you're qualified to speak on the value of writing python without semis
but you need experience, and i mean REAL experience, doing real work and tracking down bugs and thinking in the new style, to even really begin to properly compare them.
if, of course, you've actually spent any considerable time writing python WITH semicolons.
and go, "that's annoying.  that sounds bad.  i don't like that language."
hahah
or at least, before you can expect any parisian to agree with you.
well, unless you actually understand it, adn use it for a while, you're not really qualifed to say.
you sound conflicted :)
you don't have to speak it fluently to know that
you don't have to travel to france
no, you have to actually use it.
that is exactly the kind of bs that they teach students of linguistics!
I do understand it (your argument against semi-colons) and I do not have to use it for a while to be "qualified"
as a student of linguistics, I would know whether the language is bad or not based on a number of factors
bs.
if you're a human, it'll take a bit of time for your brain to bend to it.
it takes about 1000 lines of code, a few closed bugs, etc.
it's a qualia thing.
that takes a few months.
because i'm a freaking lightening rod for these conversations :)
i'm not saying much about it.  i'm just disregarding your surface objections.
no, i said use it for a month.  i said write 1000 lines of code, solve a real problem, and release the project.
wait until you can say something deeper than "it's not precise, because <desert island comment scenario>"
and changing *you* takes time.
it's something that exists in you.
well, i also made the case for where you *must* use semicolons as prefixes, and ought to even if you're not using them minimally.
because you're not a robot :)
there is, i'm going to do my best to tell you, so that you can disregard it, and justify not doing this experiment of youres.
why do you not use semi-colons though? I see all your reasons why it works, technically, but why do you do it?
then i suggested that you actually use it, so you can see what it actually feels like.
we're making a lot of noise, but little content.
I just want to know the pro's of it, not the con's.
k, please be patient, this will take more than one line of message.
when reading code, or prose, or poetry, or signs, or anything, in left-to-right languages, the eyes track across the top of a block, and down the left side.
i came upon the decision to try this style out in npm about 2 years ago, when i spent 2 hours tracking down a bug that was the result of a missing comma on the right-hand edge.
i had a function that takes a list of arrays, and one of the calls was chain([a,b,c,]\n[d,e,f],\ncb)
\n is a line break
cb is the callback at the end
i mean, there was a indent or whatever in there
instead of chain([a,b,c],\n[d,e,f],\ncb)
that resovles to ([a,b,c])[(a,b,c)] ==> ([a,b,c])[c] ==> undefined
and i tracked it down with the debugger, added logging, etc.
couldn't see it
so, i decided to try comma-first on my arrays and function calls.
so, i had this list of 5 functions, and after the third one, it was throwing, becasue it was trying to call (undefined).forEach() or whatever.
stared at hte cocde.
as i was rewriting it, the error jumped out at me, and i was convinced, "ok, this is better"
i realized that the issue is having relevant tokens on the ragged right edge is actually the problem.
while i was at it, and making changes, i thought, how did this actually happen?
i'd previously tracked down an issue (though it wasn't as annoying) where a leading [a,b,c].forEach() type thing caused problems because i'd forgotten the semi on the line above.
so, i decided to always put relevant semicolons on the left.
and, in fact, tracking them on the right side took noticeably more work to read large blocks of code!
i foudn that i was *looking* at the right side a lot more than necessary.
since the ones on the right were no longer relevant, i started realizing that they were just clutter.
now, this isn't a huge relevant cost in reading *new* code, becasue you have to read that slowly anyway.
removing all the semis from the right side (since they were 100% unnecessary at that point anyway) reduced the physical eye-motion required to read code.
since you'er taking in the concepts.
which i had never noticed until i started putting commas on the left.
and by that i dont' mean "it's preference there's no right answer blah blah"
but if it's something you're familiar with, that you maintain yourself, then it's a more significant savings.
so, when i say "it's delightful" or "refreshing", etc., what i mean is, it's more convenient and easy to scan the code and see what's going on.
i still maintain a lot of heavily semicolon'ed code, of course.  node uses the gjslint style, and the trade-offs of having a linter are well worth it.
it's more ergonomic, once i got used to it.
since node-core gets a lot more contributions than npm does.
but in my own modules, i go with the way that feels better.
I don't think that it's been proven here that there is indeed less physical effort put forth in debugging semi-colon-less code. For you, that one situation.
it's not a cheap experiment.
and politics don't change if no one changes :)
luckily, most of my modules are one file, and i wrote it.
if they start the line.
really, though, even if you keep always using ; at the end of every line, i'd strongly suggest prefixing [ and ( with a ;
unless you *want* it to be a function call or property offset.
yes.
if you can prevent an error with one char, why not do it?
it makes your code safe to concat, copy and paste.
put a ; before it.
right
that kind of stuff.
why not?  it's more precise.
i'm just saying, if you ever see a line that starts with a [, refactor it, or put a ; in front of it.  otherwise it's a time bomb.
same with (
(and with + and - , but that's *very* rare)
if you don't use semicolons at all, then do you just not use for loops?
you HAVE to, otherwise you're not writing correct programs.
i mean, as far as the actual syntax of the language, it's a delimiter, not a terminator.
it's a delimiter.
it's a more reliable solution to put it with the line that it affects.
though the two concepts are related, of course.
but, unlike in C, for example, for (i=0;i<10;i++) { "hello" } is a valid js program
in C, ; is an actual terminator.  every statement continues until it reaches it.
technically, ; in js is the "null statement"
which never continues the previous statement or the next one.
just to be clear - do you prefix ( and [ with a ; in your npm code? Or is that something you recommended to make an example of over-defensive coding (i.e. using the semi-colon)?
or here: https://github.com/isaacs/npm/blob/master/lib/utils/read-json.js#L485-487
note the ;
because otherwise, it'd be a line starting with (, which is not allowed
i mean, sure you CAN do it, i GUESS.
it's like pooping in the street.
no, i meant "not allowed" as in "you should not allow it"
and that's kind of a good thing.
but, still.  ew.
you can probably even get away with it, or find places where everyone does it every day.
node's a bigger project, bigger team, more investors in it, etc.
"making it comfy for isaacs" is lower consideration than "automated lint and more eyeballs"
but for node-tar, or glob, or graceful-fs, or npm, that's not the case.
yep. I'm actually building a program that is similar to node, that gives the JS the same API, but I am not jumping through all the hoops that node does.
No matter what I say, I hope you know that I have the utmost respect for your intelligence and I truly thank you for npm - it's a great app
at the cost of a bit more chaos.
but it makes node good for very small use-cases, where ruby or python are kind of bloated, especially in mobile and devops worlds.
(or get 1000 people to all vote on it, ugh)
also, it leaves the door open for someone else to write a much beter glob implementation, and take the top spot, without having to update the core binary.
i'll bug felixge
see where it's at.
Yes I love peaceful anarchy :)
nice
if you're in the repl, then it's: require("./test.js")
yeah
he's in the REPL by now.
bur really, we'll have to see what folks do once the data is exposed and easier to mess with.
i think this will encourage people to *un*star packages that are no longer relevant to them
my hope is that there'll be some interesting stuff coming out of it.
and there's a lot of overlap, obviously
i think that that IS happening, for example around substack's stuff, or express plugins, or hookio and other nodejitsu tools.
or you might find people "clumping" into cliques around certain packages, where for instance, all the users who star X and Y also are interested in Z, so if you like X and Y we can show you Z
opt-in as well as log trawling
there's a little joyent corner in the node module ecosystem with joyent-created smartos stuff.
i think that's why religions do so well.
it has all the features, and none of the bugs.
or you can just install with --node-version=null
to not check the node version
.. x = {} + {}
.. {} + {}
are you saying i smell?
cries.
oic, when it's the program, but not when it's an expression.
that's funny.
you know what's going on?
.. ({}) + ({})
.. +{}
.. +{} + {}
that's empty block, +object
that's not (object + object)
block syntax, man.  third worst idea in javascript.
you don't get there except by ignoring all the others.
d'oh.  nodeup live is hte same night as my first day of ASL 3
iife = immediately invoked function expression
(wtfjs?!?)
*not* a function expression
<PROGRAM>function () {}</PROGRAM>
but you can't invoke a function declaration
it's a valid program, but putting () at tne end of that is not.
right?
that is a function declaration.
because being on the RHS means that it's coerced to an expression.
etc.
same if it's wrapped in (), or starts with ! or +
x = function () {} () IS valid, however.
it's easy to cast to an expression
that's an IIFE
the canonical way is to wrap in parens
yeah
at least, all the times i've heard it
usually pronounced "iffy"
:)
so, it's in the symbol table, "defined" with the special magic value "undefined"
for example, this is hazardous:   if (true) { function foo () {} } else { function foo () { throw "on noes!" } } foo()
hi, internet.  way to fail.
or are you literally suggesting that you replace "git commit" with "npm publish"
:)
(but how can it write to it if it's somewhere nobody can write to!?)
rimshot
you can always sort of fake it
npm install thing-that-needs-04 --node-version=0.4.12
csv is surprisingly hard to parse correctly
exploding on , is not enough
you know you can quote and escape stuff?
'x,a",b","c\nd""e"\n'
if you're doing windows-style quote escaping
should parse as ["x", "a,b", "c\nd\"e"], i think
valid csv^
you really need a state machine.
Test, please: http://nodejs.org/dist/v0.6.8-RC/node-v0.6.8-RC1.tar.gz
that's odd...
yeah, me too.
(watch as i turn your bug report into a way to get you to do my bidding... mwahaha!)
or pastie or whatever you prefer
and zlib-dev
sorry, no: libssl-dev
we ought to really use the bundled versions, though.  otherwise that's just silly to bundle them.
(i'm guessing)
sweet
retweet every tweet! https://twitter.com/#!/nodejs/status/160210072805453824
since we add one, it was preventing the master from crashing, so we'd crash it, but now we check for others.
heh, yep.
but i just tested with my non-admin account, and it worked fine.
since now everyone has seen your code, and can't claim we didn't steal it even if someone else writes the same functionality.
sweet.
it's recent
"i like publishing npm packages because npm is awesome" is way more secure and easier to remember than "zni3@4@~!+%%xz@?"
because that's the first thing everyone guesses.
of course, not that one.
possibly many bugs in all of those :)
hi yawNO
damn.
resolves to stop getting drunk in public.
regardless of whether you terminate lines with semis or not, you must prefix any line that starts with ( or [ with a semi.
works for me
*(*
this is the rule of minimal semicolon usage: you must use them when they're necessary.
so... i'll ping dap and see if koichik's bug affects his tests.
i want to see the effects first.  but i'm pretty confident it'll help.
it's just a boolean expression statemnt.
but whatever.
it'd be really nice if function declarations were also valid function expressions, at least if unnamed.
.. (0777 & (~(022))).toString()
.. (0777 & (~(022))).toString(8)
.. 0/0
.. 0777 & (~(022))
there ya go
 i mean like binary types, like if i wanted to make bitmasks
Ie, instead of doSomething(f.FOO | f.BAR), use doSomething({foo: true, bar: true})
numbers are awkward and aren't obvious at first
because if i only need an int to store somethings, why waste more space ?
:D
im not actually optimizing, protocol dictates this in the end
no, but that name sounds like i will love it
and the handling of that is extraordinarily fiddly
for some protocols that matters.
i don't know if it does sub-byte stuff, though.
i just have like 4 bits that dictate some stuff in a message over a protocol, and I just wanted to make the api for setting those bits easy. I could use numbers, but I would find later on that if i could just use constants with the actual bit flag that they set it would be more obvious
or, you can do exports.FOO = 1 ; exports.BAR = 1 << 1; exports.BAZ=1<<2, etc.
and there's only Number, no int8
but you do have | and & and ~ and <<, so that's enough.
etc.
have fun :)
0o777 is a bit less pretty than 0777, but still better than parseInt("0777", 8)
cheers
right
ie, npm rebuild -g
or npm rebuild
(second one)
;)
er, not checkout
from years ago
git clone
i always do that.  svn muscle memory.
either of those approaches are a bit nicer.
if you think you need this, you probably need two different modules.
one which is installed globally, the other which is not.
with good reason :)
and i <3 using programs i wrote.
"-f is for fuckit"
and npm 1.0
nave use 0.4.12
inorite?
it'll install npm 1.0 in the nave 0.4 subshell
when you "exit" or ^D, you'll be back to node 0.6 and npm 1.1
and add/drop membership, shtylman
sweet, dgram.setMulticastTTL and dgram.setBroadcast return in 0.6.9, thanks to bnoordhuis and wankdanker
thanks
stdout is used by tap
npm bin -g <-- will show you where bins are
hiya
 thanks :)
RLa++
keep it real, man.
.. x = 0; [1, 2, 3, 4, 5].forEach(function (n) { x += n }); x
array.foreach is synchronous
:D
np
Download.prototype.insertOne = function(stock, exchange, cb){ 
that's what i'd do.
ie, that^ is then what insert() is
insert(stocks, exchange, cb)
stocks.forEach(function (stock) { self.insertOne(stock, exchange, then) }); function then (er) { handle error, count down, call cb }
but you have to do that once for each stock, right?
ok
separate and simplify.
so process *one* stock (two queries, one query, whatever)
then apply that function to each stock in the list.
write *that* function.
(a serious one that i strongly doubt could possibly have been missed all this time)
i want to have some interactive features.  login, star, unstar, see who's starred what, who wrote what, etc.
something like what the current search.npmjs.org does, but not crappy.
(andnot run at all, if it's a child test)
interesting
.. function foo (title) { title = title || "default"; return title } ; [foo(), foo("not the default")]
0.5.6 is old and unstable.
0.7 is still unstable.
a deb just landed
i'd go with 0.6.
everything
ls
(obv)
1) gogoasync, no knowledge of anyone else, hazardous to run two at once.  2) doThing_ private bit that sets the guard.  3) doThing public function that puts things in the queue.
and have the contract that the cb will happen some time in the future.
note that all three are of the form:  fn(arg, cb)
really, doThing_ and doThing could be the same function, but separated for clarity
in your package
er, "bitwise and" rather
(maybe that's fallen apart, though.  didn't really keep paying attention to it)
will this work the same in node.js?
hi
epipe is the error you get when writing to a pipe socket that is no longer open
i just assign a listener to stdout.on("error") and ignore EPIPEs
this will happen 100% of the time, for example, when piping to `head`
you *can* do something interesting with it, like stop writing.
:)
but 0.4 ain't changing
i dunno
shrugs
so... yeah.  deal with it, buddy.
oh, so, you could probably process.on("SIGPIPE", dont write any more)
i sometimes actually dig mikeal's approach of just having a bunch of shell scripts that either run, or throw errors.
the more superfluous anything there is around writing tests, the less you'll write them.
even though for a lot of things, that ends up being *more* ceremony than a few good tap tests.
yes, please blog about this.
and igor and felix and a bunch of other people i'm missing of course.
but, if it's a good idea, and something different, then it just makes things harder.
if it's a good idea, and fits with the problems that node aims to solve, then yes.  do that.
experimentation has been fruitful.
not complaining.
there's a lot of enthusiasm, and people trying out things, but we're all going in completely different directions.
just that it's time now to shift gears a little.  i'm going to get joyent to throw in some time with our designer, get some proper IA thought on it, etc.
couch is a great db, and highly versatile, but it's somewhat limiting for some of the things we want to do, and having the site not be in node prevents a lot of potential contributions from the community.
it's erlang in js clothing, whereas node is c is js clothes.
since noders know node, and less of them know couch, and it's a completely different paradigm.
;{P
(is this a node test we're talking about?)
hold up
oh, so it's only realpathing the argv[1]?
ah, yeah, it does.
s/url/path/
ok, lgtm
also, maybe spawn(execPath, ["./symlink.js"], { cwd: path.dirname(symlinkPath) }) to make sure it works with relative paths too, for when we break realpath
spawn(process.execPath, [symlinkPath]) and verify it exits 0 or somethign
:)
it just can't set up the breaking stuff, because it's realpathed in the eval argument, but not in the argv array?
but fix the typos and style :)
or do you have another way to test it?
or wherever the build ends up putting it
or send him a pull req or something on github if you can find it there.  (doesn't look like it's listed in teh package.json)
even if it's moving slowly
it's very subtle.
it's idiotic.
we should never have done it.
and like, for what? so you can do "require('./app')"  to get app.coffee or app.js?
how is that valuable?
it adds a crazy amount of completely worthless complexity to the module loader, which is already necessarily complicated anyway.
at least we don't *throw* when you have the extensions any more.
but like, man... so bad.
it's too late to change.
yes, it is the downside.
test, plz: http://nodejs.org/dist/v0.7.1/node-v0.7.1-RC2.tar.gz
but the main text is black on white
but yes, the dots should be brought down a bit.
i agree there.
it makes my eyes physically twitch.
i do like a light-gray on charcoal for terminal, and basically the reverse for irc.
limechat here: https://github.com/isaacs/limechat-theme/raw/master/screenshot.png
i've heard that high-contrast light-on-dark is good that way, too, but it just hurts too much
limechat, i mean
;P
oh, that's this: https://github.com/isaacs/vimrc
er, rather: https://github.com/isaacs/.vim
oh, right, desertEx
or maybe just converted it from macvim to a 256 color terminal thing
sure
whats up?
has never been picked up on irc.
not sure how to respond to that
i think it was on 0.4.12 that he did that, i could be wrong.
oh, yeah, that's tom hughes-croucher
sh1mmer
you have to do a lot to get the OS to let you have that many connections.
limits and such
whoops, forgot to push that earlier
hi
you should get one of those
not as cool as the turtle rocket
ah, ok, so swinging by the sf office is not possible :)
i'll ping emily tanaka-delgado and see what the deal is on those.
that picture, man.
has 3 toes left.
ie, dive right into the actual bin file
unless absolutely necessary because compilation must happen in a platform specific manner.
bundledDependencies
or "sha-dirty" if there's a change.
there's no good reason not to.
I wonder if the git project has a bunch of people running `git checkout master` in their home directories and posting bugs that it's broken.
i do use the command line debugger a lot, though
am i missing something?
very quickly
All workers have died.
Fail
Worker 55625 died. 3 dead of 3
aha
so, instead of failing slowly, they fail quickly?
(discussing with bnoordhuis in #libuv)
aw, thanks :)
to avoid having to do this multiple times, you can install it globally, and then `npm link sqlite` in all the projects hwere you use it.
npm pack sqlite; tar xzvf sqlite-*.tgz; mv package sqlite; cd sqlite; vim package.json; npm install -g
or you know, fork from git and do it that way
whatever.
:)
*^_^*
nvm
?
any idea?
what'd you do that didn't work?
/home/node/local/bin/express -> /home/node/local/lib/node_modules/express/bin/express
[node@abtf ~]$ npm install express -gs
yeah
ahhhhh....
er, normal copy
this is odd.  it's not a symlink.  it's just a normal binary file.
just a second.
i think the default is nodejs-1.3.1 or something.  that's what's broken.
whatever the most recent is
ryanrolds_w++
paas is the natural extension of the ruby psychosis
and when it works, my, what a view!
don't confuse "no.de" with "smartmachine"
no.de is just one flavor of smartmachine, with a fancy magic tower that you can delicately balance your app on.
(or, ever, since "git push deploy" is fundamentally a broken concept)
np
yeah
RORgasm, ryanrolds_w: someone at joyent is rolling back the dataset that's broken
not yet
and give the version 1.1.1 or something
that'll lock down not just the dependencies, but every line.
why not?
what are you depending on, cloud9?
it adds some complexity in a bunch of places, for really very little gain.
do that for deployable apps.
a website that you're pushing to a server, or a standalone application that does some stuff.
and gemfile.lock is a pretty sad substitute for just checking those things into git.
and reduces the feedback and usage that your lib will get.
doing so only reduces the number of places where it can be used.
right
npm install blah; git add node_modules;  git ci -m "update blah"
:)
create a bash shortcut for it.
no, it's actually provable in this case.
same reason.
that's why node bundles v8
the dependencies are a part of "your program" if you're deploying them.
there are metrics we can measure, and have been measuring.
it's a standalone application.
you're only uploading the changes.
Gemfile.lock is a half-way solution to an invented problem.
that's not a package manager's job.
if one byte is off, you know exactly which byte, and how off.
or is compromised.
Gemfile.lock can never give you the same level of reliability or reproducibility
becuase it's dumb.
it's an invented problem because really, what works much better, is to just check all your deps into git, and then deploy one single thing that has the entire app.
thats why there's no `npm lock` command.
it's 44.3 mb?  *no* node program is anywhere near that size.
that's including all of v8 and libuv and cares and openssl
http_parser, npm, v8, uv, and zlib
oh, not cares any more
as c strings
building as a standlone bin has a lot of advantages.
and augustl are showing our age...
it used to use a lib folder.
so you can drop the node bin anywher.
waaaayyyy back
yeah
just download the thing, and it runs.  don't even have to know that node is a part of it
like a `nodecc` that bundles your program all into an exe and unix bin
hi
the mongo driver is quite a bit bigger, and probably not written with this approach in mind.
the pain of "having to carry the js around with you" is WAAAYYYY less than what you're trying to do.
that doesn't exist yet.
beginning to think that DeezGz's problem is overly constrained
npm does support basic auth http and https proxies.
but it doesn't do the CONNECT dance to tunnel https through http, so if your proxy doesn't speak https, then you have to use the http registry url.
it'd be easier to just write a standalone server that translates ntlm to basic auth.
ntlm is insanity.  probably never going to support that.
which is less secure.
:)
probably less headaches doing it that way
then have it proxy its connection to registry.npmjs.org:443
to the gods of IT
oh, he is gone.
proxy probably decided it didn't like irc :)
test, please: http://nodejs.org/dist/v0.6.9-RC0/
working on a release.
this is a bugfix release on the 0.6 branch
but 0.6 will slow down very soon.
once for unstable, once for stable.
should be every week
the holidays were a bit of a speedbump.
twice a week, actually
ah, forgot to update the version properly.
rc1 coming right up :)
test, please: http://nodejs.org/dist/v0.6.9-RC1/
a new one with node 0.6.8 should be ready today or  monday
and then they'll have 0.6.9 probably next week
maybe one day PaaS will not be fundamentally shitty.
though, i remain doubtful.
the tool should be something i install locally, and it should do all the setup of the server.
we should try to minimize those.
*have that anyway (trackpad caused packet shifting)
oh, also, let's say you can assume gcc and python
since most modern os's have twayhat any
you can specify the prefix with the --prefix arg
test, please: http://nodejs.org/dist/v0.6.9-RC2/
maxogden, megalomix: your names have a lot of characters in common.  i keep getting them confused
test please: http://nodejs.org/dist/v0.6.9-RC3/
thanks
I didn't have problems building. A tiny site using express + redis is running it fine.
great!
0.6.9 is live, retweet every tweet! https://twitter.com/nodejs/status/163063697877647360
if you're doing global installs, especially
it's fine to use npm as root
the nobody thing is just to prevent accidentally clobbering /etc/passwd or some other stupid thing
"flow control" has been used to refer to things like "if" and "for" and "goto" forever.
i mean, whatever.  languages and terms change.
it's the flow of your control in your program.
human languages are just weird, man.
no way around that.
"exports" is actually just a shorthand.
however, when you do `module.exports = blah`, yoer' *re-assigning* the reference that is used.
that's what happens when you do `exports = blah`
.. [ ["a", "b"], "c", ["d", "e"] ].reduce(function (s, n) { return s.concat(n) }, [])
.. [ ["a", "b"], "c", ["d", "e"] ].reduce(function (s, n) { return s.concat(n) }) // or that
as long as you know the first one's an array
but the registry itself will always be just couchdb, i suspect
it's gotten quite large, unfortunately (about 8gb now), so i really need to look into putting the tarballs on a different storage spot.
?
that'll recompile binary things
and the global path isn't shared.
then the symbolic link will point to /usr/local/lib/node_modules/libxmljs on both, but that'll be different things
and if it's already installed globally
you should probably just ssh in and do that one
:)
but you should expect things to be broken a little.
it's *good* to have people testing unstable versions.  that's how they get stable.
ha
k
or anything?
licensing issues, no clear specification, and so on
(not stefpb
Concerning known ranges I understand it. OK, thanks
This is crazy!
:)
i don't know if there's a spanish node.js channel
node.es, maybe?
nope
chunks.forEach(function (c) { res.write(c) }); res.end()
inorite?
it's fate!
also badly guilty of this.
nodejitsu modules > substack modules, on average.
 abi stuff?
and, realistically, you can't very often update node without rebuilding binary modules.
there's a lot of polishing still to do
you mean binary module building stuff?
we're working on it :)
you kind of have to force some stuff, install ms visual c++, cd into the folder, do some gyp magic.
thanks
:)
working on one.
best as I can tell it's this issue: http://comments.gmane.org/gmane.comp.lang.javascript.nodejs/30282  but yeah, working on a test
thanks
thansk
fs-ext has flock and node does have O_EXCL, i believe.
ah
did we remove that?
  NODE_DEFINE_CONSTANT(target, O_EXCL);
#endif
#ifdef O_EXCL
looks like we make it available.
maybe also delete rm -rf node_modules/kue first
np
;)
yeah, i think that's your smallest package.
:)
Phoenixz, chapel: why not store the keys in redis or something?  or just say, "meh" and cross that bridge when you come to it, if you shoudl be so lucky as to have bazillions of users?
but that doens't work very well for us
but really, we need to bring back sendFD as sendHandle in 0.8
portability is a harsh mistresss.
actually, i gotta run.  we'll chat later.  i've been meaning to check out haraka, though.  email is a dirty business, and it's neat to dive into it with node.
email makes http look good by comparison
;)
(while true; do cmd; done) & disown
detach is awesome.
it's like screen, but without all the features
or detach it
.oO(always a catch...)
*issues
nice
what's the issue?
it's quite nice
having deja vu
and my bash profile.
and vim shortcuts
lime chat especially shines in osx lion's fullscreen mode.
it's different.
siestas are spanish.
SubStack, Karmaon, maxogden: http://nodejs.org/docs/latest/api/modules.html
that's the official definitive "How It Works"
awwwwyeah
not sure if it's still there.
thanks
yews
thanks
(writes to .npmrc and .npm)
~/.config is very vague, as well.
:)
hey
thanks.
(stdio is hard)
if the write() returns false
maybe pipe to a node program that reads stdin and verifies it gets what you expect to be writing?
i have to look up the docs on that every time
oh, i read that as "i am" not "am i", sorry dyslexic in the morning :)
i think it's (<port number>, <ip string>) 
test, please: http://nodejs.org/dist/v0.7.2/node-v0.7.2-RC1.tar.gz
the west coast north-american joyeurs anyway :)
is in oakland at the moment, though
there are joyent offices in sf, seattle, and vancouver
(for me, anyway)
though i do im with the not-pacific-time people a lot
hi
thankfully the europeans i deal with mostly are night-owls :)
that is an area of current development.
they can share everything except the createServer calls, probably.  no reason to have two programs necessarily.
you can start as many servers as you like :)
oh, hahahha
listening to this, just overwhelmed with nostalgia...
such a weird game
andyou could trade sea shells for boat upgrades
apparently if you kill enough shit in the ocean, jaws would attack...
SRSLY!?
i mean, come on?  pink planes?
it's not even realistic.
that game took a lot of repetition to master, and the ending is a photo of a pink plane.  the end.
BUT NOT IN A PINK PLANE
hahah
hahah
in fact, i'm going to go do that tonight
killing sea life with an infinite supply of cannon balls: totally normal.
you can bet that.
but if it's like a test script or build script or something, npm scripts already have local bins in their path when they're run
they're run with PATH=./node_modules/.bin in the env
k
1.1.0-3 is the current latest.
but npm is still being released as a standalone lib
but that requires node v0.6 to use
node v0.4 can't use 1.1
so... that's the deal with node v0.6 and npm :)
but i'm guessing that the more recent cssmin ports are more up to date.
yeah, that's the bit i wrote
should be relatively easy to do
no
it's normal.
i didn't drop out of school because i couldn't afford tuition.
is a joyeur, yes
tech journalists like to find a story.  sometimes there's a story there, but it's usually not as interesting as the one that gets printed.
(for example)
a lot of successful people have degrees :)
i left, because i was done, and a screwup with the bursar's office prevented my graduation from going through, and i never bothered to fix it.
that's a much less interesting story :)
g'nite.
ok, time to go learn asl
otherwise it's way too confusing :)
the thing with nave or any of these is that you really have to put it in your bash prompt.
wishes he'd picked a more intuitive letter for that...
does npm ever break on unstable versions?
or 1.22.75 :)
you'd also get teh error if you were usin g0.8, or 0.3
and saturday's my sabbath.
between Og Den and StackHousey
should be easy
will not be allowing any noders to move into his apartment.
yes!
you got the kickin hacker pad.
hahah
i did mention to marisa that she should learn javascript and http.  since i'm learning sign language :)
hahah
i was like, "Oh, so you could, ya know, write web servers and stuff."  "Why woulnd't I just make you do that?"
marisa's response was "Why?  That doesn't sound fun at ALL."
i remember one time my gf was painstakingly copying and pasting stuff out of some random flash app into a word document.
i tracked the urls it was requesting, found the xml source, parsed it, dumped it into a text file in dropbox, that showed up on her computer.
it's rare, but nerd skills can definitely be handy in social situations :)
that moment justified writing sax-js
works for me
jesusabdullah, maxogden: yeah, isn't she one of the Captain America Super Coders?
like, with a cape
or something?
pictures red-white-and-blue costumes whenever he hears "code for america"
Replace all instances of "monad" with "arble garble"
"The spaghetti code of node.js callbacks is really a problem if JavaScript lacking arble garble"
yeah, i was thinking that, too
"Oh, something broke in net.js.  great.  thanks a lot, node."
but, in debug mode is where you *least* need this, actually
teh hardest things to debug are where something happens in production, 1 in every million requests, and you get a 1-frame error stack
and we cannot sacrifice performance (too much).
we could have long stacks impose a slight costs, if we recover that cost in other areas maybe.
or maybe we could somehow convince v8 to help us do it.
perhaps we can deliver that feature along with some v8 upgrade that hides the penalty ;)
this IS a pita on the browser as well, when you're doing very large applications.
for much the same reason.  you've got several xhr's in flight, then something blows up, and tracking it back to the cause can be very difficult.
the difference is that you usually don't know about it
(or at least, not enough people)
it needs to be like dtrace: the kind of thing you can ignore without penalty until you need it, and then it works for you
putting it behind a configure flag, or in debug-mode only, or whatever, means that no one will get any benefit from it
dealing with one's anger, accepting differences in others, etc.
but about as useful
it's ok
it's probably better to write angry blog posts than go hit someone.
ultimately, it's just an endorphin kick from getting into a fight.
haha
random rage is just not very helpful.
wow, searching for which module to use really sucks.
anyone have a suggestion on the best thing for parsing markdown?
ah, yeah, i've used showdown
er, markdown -> object -> html
so, like, socket.io up to the server, where you have a child tty running login
and translate ANSI into html and css
new Array() shoudl only be used when you know the size up front
since it actually has some benefit in that case.
express, maybe?
got scooped
btw, it's a hilarious troll that that was attributed to him
ever see his response to that?
the "64mb of memory is enough for anyone"
to bg
oh, haha
anyway, it was a limitation of early MSDOS implementations, but not one he was happy about.
right
er, the directory of your actual program
:D
if you've told it to be somewhere else... well...
it's pretty common for interpreted programs to do `/usr/bin/env whatever`
h
which is, of course insane.
and a relic of the days when the first few unix computers filled up their hard drives.
bdway and 20th!?
you're right by me omg!
i just got a new iphone.
actually, maps on android was quite a bit better.
but! the touchscreen on the iphone is so much nicer and more responsive.
i've played with the newer ones, though
moto droid
Moto Razr, HTC Harmony Proxy, etc
droid is kind of a shit show.
it's like linux.
open blah blah blah, broken all the time
they're better, but the iphone just has the best hardware and networking, and i'm always finding myself frustrated with the hardware and networking
if i'm going to sell my mobile soul to a company, it may as well be the one that can make a decent phone
another problem is that android apps are really an afterthought for a lot of companies.
and no one is giving the android marketplace and operating system the same level of attention and care as apple with ios
it's clearly their top priority
the overhead of a proces is pretty minimal.
the problem is that providing all the libuv/node goodness in that sort of situation is really hard, for limited benefit
i'm not sure what a unix socket would get you in this case that stdio doesn't.
i guess, it'd get you the ability to have them come up and down and not have a relationship with the parent ahead of time, if they know where the socket is
(and file descriptors/handles, but that doesn't help you here.
i mean... that's kind of complicated, right?
hm...
ok
i say punt for now
k
Please test: http://nodejs.org/dist/v0.7.3/node-v0.7.3-RC0.tar.gz
:)
node and npm both have some very old pull reqs.
it *would* be nice to see, for a given module, the selectiveness of pull req acceptance.
like how some dating sites tell you a person "replies selectively" or "replies often"
sent a few of them
but jsut that, in general, the policy you suggest might have some consequences that are not desirable.
i'm not saying that you don't have a right to be frustrated in this case.  (i don't know the details, of course.)
getting some IA stuff rolling, working out a framework.
had a good talk with our designer today.
has a few more RFH emails queued up
it's very exciting stuff.
:)
it's ok, we all know it
the website sucks
yeah
w00t!!!
also, please refer to `npm help json`, not the ancient commonjs spec
but don't do that unless you need to compile something
what IS the thing?
doesn't mean everyone would have the same *schedule*
you'd just get used to having a different number to mean "lunch" than you currently do, that's all.
i mean, instead of getting up at 8, I'd get up at 16:00
it'd still be the same *time*
nono
that's not changeable.
we'd still have different schedules.
what's wrong with that?
just a different *number*
completely agree
thanks
both are like 10 lines
?
it finds the max satisfying version
npm install blah; git add node_modules/blah; git commit -m "update blah"; push-to-production
*imo
for something that's primarily a downloadable standalone application, and not something you'd expect to require(), it makes a lot of sense to bundle deps.
sure
ie, the client thingie that you run when you do `npm blahalhblahla`
nono, it installs itsefl with itself
YO DAWG
npm crap?
getTime() for machines, and toISOString for humans and machines
forgot aout that
oh, wow, that's right, connect came out of sencha
old days of node.js :)
curl http://npmjs.org/install.sh | sh
most reliable way^
npm i npm -g
second-most reliable way^
i published npm@1.1.1 today, which will be included with node 0.6.11 this week or early next week
install over is fine
0.6.10?
?
just make sure to `exit` when you'er done :)
but circular private deps are not handled properly.
ie, a -> b -> a, and both are private.  there's no way to get link to understand this right now.
more d's = more debugging
but --verbose also works
it's just a shorthand for the --loglevel config
npm -v outputs the version
or behind a node proxy :)
thanks
but yeah, for some things, a private repo is the way to go
you can npm install from a git url, or just start writing the dep in node_modules/whatever and abstract it out when it's big enough to justify
but, again, for deployable things, it sort of doesn't matter that much.  you just float your patch until it lands.
kind of like when node has a fix for v8
we make our fix, submit it, then (if it takes a while and is a big enough deal) very carefully make sure to re-apply it to each update.
well... we write most of our deps.
true
without git, this would be unthinkable
even with git, it's a little big hazardous, adn we try to avoid it
if it's really complex, you may want to actually maintain an internal fork, and pull from teh upstream repo, rather than float patches in your checkout
that's what it does
heh
sorry, guys
i dunno
uses nave, not nvm
hrm...
yeah, you can just chown and move on
i mean, or use sudo
or just use sudo
k, kewl
you migt need to in order to install globally
there's a little setTimeout in there
in software projects, anyway
touch node_modules/' -rm * '
indutny's thing.
ie, "not in core" should always be an *encouragement*, not a discouragement
like, "you don't need permission, just do it, see how it turns out"
it's not really supposed to be require()'d, that's why the _
oh, yeah, that's it
you're supposed to just call `node debug blah.js`, and put `debugger` in your js somewhere
right, of course.
or add node_modules/.bin to your $PATH
almost a year now
time flies :)
.. typeof /beep/
Hey, anyone wanna bikeshed something!?
please lmk if this is palatable, or hateworthy, or nice.
(haven't looked closely)
oh, ok
more like, no djayess
nodejs
which sounds like "no js"
hahaha
no, actually, it's pronounced node.js
you can't pronounce it properly in human languages.
so, in a real way, both files are the "real" file
no i mean, what if you just want to remove one?
what do you think happens?
for non-directories, nlink = number of links
if you have 2 hardlinks to a folder, you rm -r one of them.
one is gone, the other is *emptied*
which is why rmdir stubbornly refuses to remove non-empty folders.
bsd systems put the number of files in there, but on linux it's a completely different thing, and also different on solaris.
for directories, it's *undefined*
so, not only is this hazardous (because you can inadvertently lose data) but it's also impossible to even begin to do ina  portable way
BSD jails did some thing with hardlinking to dirs, but I think it might've just been yahoo's thing
it was ok if you were very very careful about always following all the rules.
but randomly rm'ing a folder could like destroy your home dir
or the folder?
or the package.json?
you can also do stuff like `npm pack express`
every http request to the registry gets cached
they do
it's all got an etag
tarballs, json, everything
well, it makes the http req with If-None-Match: <etag>
which couch responds to very quikly
howcome?
that'd be rad
you know what would be really nice?  something kinda like request, but with all the goodies that you'd expect from a browser.
and caching
cookies and whatnot
including state-tracking
no flag, just do it that way always
unless there are deps missing
the poor-man's registry is to list urls as dependencies
yeah... that'd be a much bigger change to how it works
so npm cache add http://.../package.tgz ; npm install blah --no-registry
true
maybe cache it under -/external/http-hostname/path/blah
or something
that's another thing that should change, though, probably
request follows those automatically
once upon a time, all npm installs went to github tarballs
alright, I was just trying to think of an elegant way to get github tarballs to cache somehow, I forked the repo, I'll start breaking stuff and see if I can come up with any sort of elegant solution
:)
i usually do that when i require a big module.
fs = require("fs");1
*all ears
:)
please share opinions, especially things that might block you from contributing.
async is a bit like underscore.  it's great if you need a lot of what it offers, but it does a lot.
at least, it predates me hearing about it :)
it's powerful to know how it works, so you can whip up a little 10-line asyncForEach thingie when you need it.
though, if you find it useful, then that's fine, of course
heh
i guess maybe that already worked?
i know that
i thought it didn't.
right
gotta go do other stuff.
have fun with it, i'll check it out tomorrow :)
well,it's the weekend.  can't really think about that right now.
fixing that now
Hey, I got that visual studio reference code started. You can take a look at the main reference file here, which is going to include all the built-in node libs eventually - https://github.com/waynebloss/vsNodeRef/blob/master/src/ref/node-v0.6.js (it works really great!)
that's cool. It's just a set of reference scripts that VS can use to get Intellisense (autocomplete) for projects targetting node.
that's correct. VS runs that script in order to pull all the comments from it.
well, what I am supposed to do right now?? hehe
honestly, I didn't know that but it's cool anyway. I was learning while doing it.
or "intellisense" or whatever they call it :)
Here is Microsoft's vsdoc file for jquery, it's javascript code not JSON.
I would have like JSON, but I think they were aiming for self-documenting code like all their other languages. I never know what Microsoft is thinking though :)
inline docs work great for C#. It doesn't get in my way because I keep it collapsed and when I refactor stuff in the code, the documentation gets updated automatically.
anyway, inline docs don't work for javascript because you have to execute stuff to know what stuff will be returned. That .js file that Microsoft created for jquery is not even a jquery implementation. It's just executed at design-time to mirror what's going to happen at run-time so the IDE knows.
so yeah, definitely stick to external structured documentation.
inline docs work much better for statically typed languages.
(well, 0.5, but that was the unstable dev branch that became 0.6)
*npm pack
just woke up
what's up?
is there a "files" member in the package.json?  or a .npmignore?
oh, you can probably just delete that
that creates the same kind of tarball that npm publish uploads
right now there's a lot of special-casing
since that's the default anyway
still have to finish polishing node-glob-in-js, and then use that instead
the files/npmignore stuff works mostly, but the edges are rough
the problem with installing deps at the same level as the dependent package is that i then have to keep track of what's needed for who
yeah, that's fine
at the cost of not very much disk space
if they're nested, it's much simpler
and, just to be sure, in the "publishConfig" section of your package.json files
so you don't accidentally publish something that should be private
yeah, that too :)
:)
i don't know either.
i figure all node users use chrome.
i send mail to a daemon that wgets the resource, and emails it back to me.
;P{
and javascript module system
and my own package manager.
i wrote my own node version manager for that reason.
:)
tarballs, hah, speaking of things that i've nih'ed.
turns out, it's often better for software to be popular than good.
(the clever programmer will see the loophole right away...)
it *can* be NFS or fuse-mounted, of course.
:)
?
hd to update the date in the changelog, since it's actually going out tomorrow, not tonight :)
if it needs to, it will.  don't worry :)
s/pm/mp
Thanks guys, installed now
don't want to just have a thousand reskins of the search page.  that's not helpful.
npm doesn't have namespaces like javascript isn't object-oriented.
really, the namespace is: registry, name, version
adding another thing in that tuple is just asking for headaches.
and you can stuff a *lot* of semantics into the name
test, please: http://nodejs.org/dist/v0.7.4/node-v0.7.4-RC0.tar.gz
npm -v == 1.1.1, node -v == v0.74-pre
ah, ok
express isn't compatible with node 0.7, but it didn't start *specifying* that it wasn't compatible until after 1.0.7, so npm thinks that older version is ok.
express@1.0.7
oh, i get it.
?
but if they're the same versions required, then it'll share them
what?
yeah, if they're different versions, it will
> 'i went to a #shop and bought and #apple'.split(/#(?=.+\b)/g).slice(1).map(function (m) { return m.split(' ')[0] })
[ 'shop', 'apple' ]
> 'i went to a #shop and bought and #apple'.match(/(?:#(.+?)\b)/g).map(function(m) { return m.substr(1) })
[ 'shop', 'apple' ]
it's ok :)
map is fast.
meh.  sure, whatever :)
no, that's not nice...
node javascript point organization
old standby :)
i always think of .org as "organism"
node javascript point organism
just require the full filename
require("./foo.js")  <-- that's best
say what you mean
<< casts to int, i believe
<<0 is like Math.floor()
forgets
or maybe Math.ceil.
oh, rad
or n or nvm or one of the others.
a year?  has it been that long?
can't wait to get off of 0.6 already
it's gonna be so much better.
seriously, 0.8 can't get here soon enough
:)
didn't we do one like just yesterday?
jesus.
what day is it?
haha
it's so hilarious when people try to pretend that there's more than 2 mobile operating systems.
actually, android is growing fast.
(hilariously, windows mobile is not that)
i always thought of webos as the solaris of mobile
it's the windows of mobile
Jails man.  Fucking awesome.
man, i miss FreeBSD.
objectively better, no one uses it, and hideously mismanaged by a bumbling corp to big for its own good.
yahoo went downhill when they started switching over to rhel
npo
is going to write an eliza bot that talks to bots.
er, wait, no..
:)
that one
:)
they're the worst of all possible options.
1. map a name to a resource (url or file path)
2. require() gives you the module.exports from that file.
and that's it
you're not going to do that though. You're giong to do: import foo from Baz
that was just my example. It doesn't have to be named the same
if that's the case (naming must match), that kinda sucks for a dynamic language
oh I see what you're saying there. Yeah I see that complaint...
it should be RHS expression.
here's the renaming example. I don't see the problem with it at all - import { draw: drawShape } from shape;
ok well I don't think it just dumps stuff into your namespace
it ends up being MORE cruft than the current system.
import Foo from foo as fooFoo; < var fooFoo = require('foo').Foo;
that's node's limitation isn't it?
to import 2 things and rename them in harmony, isn't it: import {xRenamed: x, yRenamed: y} from "foo.js"
and this one sucks.
or python
Sly__, wdbl: this is a pointless debate.
1) it's no big deal, we STFU now :) 2) I wasn't debating. I was asking why he kept saying "they're turning it into Java!" like the sky was falling or something
by the way, dno't worry.  javascript as-it-is will work forever.
tc39 can't steer the course of the web without losing it.
if it ever turns out that harmony modules are good for node, of course we'll use them, but... meh.  doubtful.
kewl
oh, awesome, then :)
where do you work?
here we go...
nce
(only for 24-36 hours, though, and if it stays up for more than 4 hours continuously, see a doctor immediately)
when you have a bunch of small buffers, crossing the js->c++ boundary gets expensive.  so, we allocate one big slowbuffer, and slice it up
working on a doc patch that actually explains this.
i get it
you don't have to type `node r.js`
done
^C a few times
^D will just kill the repl, not necessarily the entire node process.
it'l pull off the path, querystring, and hash
TURING TEST SUCCESSFULLY COMPLETED!
jk
nono, seriously, i've got you all fooled, though
you totally think i'm a person
but, really, if the dude's looking to keep a session without any kind of client-side state... i dunno.
cookies are probably the way to go there, though, honestly.
maybe socket.io and then put something in localstorage?
that's what they're for
but i mean, as an endorsement of the software you've been making.
that has to rock a little :)
yeah
http gets all the attention, but email is still the bulk of communicationb.
it's neat seeing it used for the "other" web protocol :)
nice
but i mean, on some craigslist site, not on your blog
it'd be fantastic to get *them* to write about it, get a quote for nodejs.org even.
oh, ok
doesn't actually know waht that is
you should write one :)
test, please: http://nodejs.org/dist/v0.6.11/node-v0.6.11-RC2.tar.gz
it's kinda like bundler.
it explains exactly this point
it tells you when you install it
retweet every tweet! https://twitter.com/nodejs/status/170623307127861248
?
er, bnoordhuis
just tested, and yes, that is the case
oh, so it does.
er, 0.6.11 now, i guess :)
i tried for years to appreciate submodules.
it's great, except for the fact that it ruins branching, merging, and bisect, which is basically all that makes git awesome.
and you'er working on version 1.0
except, that 1.0 needs different versions of its dependencies, and different dependencies.
let's say, you're using a bunch of submodules in a project, right?
now, you want to make 1.0 a branch, and start working on 1.1 in master.
pretty common, right?
so you remove some submodules, update others, etc.
add a few new ones
and, inf act, even *switching* between branches is tedious and awful.
git complains incessantly about untracked crap being in the way, unable to check out submodules, etc.
merging between the branches is now extremely painful.
that's why npm's node_modules is just checked into git now.
also?  i can actually diff changes in the deps!
or update them in one branch, and merge the update over to the other branch
it's fine if you are literally *never ever* going to touch the contents of this thing.
and if it's not a thing you're also developing in parallel, and you'll never have two different versions on two different branches
and it's untracked garbage
git checkout A, and it fails to update the submodule, because it's in the way
my problem isn't git, it's that git submodules are a completely disappointing add-on that gets in the way of everything git does well.
now you have submodule X sitting around
git itself solves this problem really well.  just check the dep into git if you want to lock it down.
i tried for a few years to make submodules work for npm.  branching 1.0 from 0.3 was kind of painful, but the 1.0 and 1.1 was what really was the last straw.
not that the workflow is somehow wrong.
when it's that much work to use a tool, you have to think maybe it's just not the right tool, or you're not using it in the right way.
and diff releases, bisect to find bugs, etc.
git = content tracking, npm = dependency resolution
Is server.pause(msecs) gone?
http://nodejs.org/docs/latest/api/net.html#server.pause
undefined
didn't even realize how much i'd <3 it
i <3 this: https://gist.github.com/1860418 
obj.foo = bar is the same as obj['foo'] = bar
:)
well, it's kind of nice if you DO want to set something as read-only
good morning.  happy presidents' day.
not much.  just posted a scrum update for my non-us coworkers.  i'm off :)
i dunno
ok, makes sense. thanks.
so, sudo sees only "echo /path1:/path2:etc"
there ya go.
refraining from any more repetition.
run that command, and read it
it's very well documented.
fixing this now.
hm, apparently you can't set the rcfile explicitly with zsh
oh well, no one really uses that anyway.
Are all of the api markdown docs up to date with the new structure that you laid out for that json-api-docs branch?
how far along are you on standardizing the markdowns in that branch?
yes, that's the branch I was asking about
*stil
and the index and toc need to be finished
that ones' teh most complete
I have free time
do you want me to tear through those and re-format them?
:)
thanks!
but we should just fix this in master, and move forward
:)
thanks?
but that's deb, not rpm
hi
you can dive right into them
i kinda like talking about php.
the good old days.
$foo = "bar"; $bar = "baz"; echo $$foo;
that kinda stuff
sweet!
ok
ok
run this: `which node`
the pkg installer for a mac?
what's that show you?
did you install some other version once upon a time?
rather than /usr/local/bin
run that^
so... why is npm in /usr/bin/npm
:D
but /usr/bin/npm is first in your path.
if you used the mac pkg installer, you have some working version of npm in /usr/local/bin/npm, I'm guessing.
not sure how *that* one got there.
sudo mv /usr/bin/npm{,-BROKEN} ; hash -r ; npm -v
anyone's guess.
() calls a function
that's how it works :)
instrumented-mode, i mean
why not just have a shim that requires the instrumented thing if it's in test-mode?
if (process.env.PLAY_ALL_COVERAGE_INSTRUMENTS) { return module.exports = require('../lib-cov/mocha') }
or something
but still, you have to explicitly do that *somewhere*
ie, rather that /lib-cov/mocha.js you'd have perhaps coverage/lib/mocha.js, and prepend that bit if it's in covered mode.
guess not
i'll try to get to that later today
or `npm install gss --npat true`, but booleans default to 'true' if not given a value.
 wingie: but quite frequently, master branches are for development
ie, it's usually not "latest bugfixes" as much as it is "latest bugs"
k, update please
npm install npm -g
oh, you did
in the error output, it's telling you which command it's running
keep in touch as you learn more :)
if there's anything we can do to help, lemme know
but i mean, it's not really that far off conceptually from the dom, or jquery
node *does* give you a bit more async callbacky stuff than most web browser situations.
*it
which IS pretty baller as it stands right now
marked is quite nice, actually
i think fs.watch() is the preferred mechanism
lib/view.js
also came from php
lol "See `src/node.js` for more information."
"Wanna know how it works? RTFS."
that's so old
i usually browse the source locally
oh, really? id dint' realize it had that.
of course, won't be live for some time :)
sweet :)
test, please: http://nodejs.org/dist/v0.7.5/node-v0.7.5-RC0.tar.gz
well it isn't bieng kill by the parent. the parent is ordering it to kill itself
hm.  sepuku?
and also confusing japanese users since we're using the words wrong :)
i don't want to go the ruby route of having japanese names for everything and confusing new users who aren't japanese.
i guess suicide is ok, then.  that's a good point.
iwther that or bushido
ok, that's a good point.  "suicide" is the best name for it, i guess.
the sha1 bit can use node's builtin crypto stuff
retweet every tweet! https://twitter.com/nodejs/status/172814789523931136
great!
what version of node/npm?
oh, http://pastebin.com/pVhx0Ka6
yeah
oh, haha, i didn't even see the diff there
yeah
i want to get all the tarballs out ofthere and onto something else.
so you don't have to replicate down the content, just the metadata
that'll let us scale up to 100k packages, i think
it's nice that we don't require("console") until and unless necessary
there are a few good uses for getters.
very few.
awesome.
it's just string mungery
they flow a lot better when he's there
yeah, we gotta get mikeal on another one
kewl
it's like javascript but iwth fat kitties that jump in boxes?
30?
those need to happen.
yes.
k
2. you're using npm 1.0.9, which is very old
3. you're using node 0.4.2, which is crazy old.
at the very least, upgrade to npm 1.0.106
but, barring that for some reason, use a proper unix in a vm or something
it'd be better to use node 0.6.11, and npm 1.1.1, on windows as-is.
and node 0.4.12
and you can use the git bash shell, which is pretty nice
apart from that, have you done `npm adduser` on this machine?  it seems like the username isn't getting set.
and node and npm work on it now.
yeah yeay
:)
npm's changelog is not really updated.
you can just run git log
ningit shortlog v1.1.1..v1.1.2 
i guess i should probably do that in the npm changelog.  it'd make things easier.
anyway, i'm out.  have a good weekend, noders.
with the error and/or results
do you know how to set the NODE_ENV in windows.
any hacks you come up with are by definition brittle and unsupported.
it's a safe bet in such a situation, you're trying to do something that is too clever, and not really necessary.
npm will break them in future versions, without notice or sympathy.
what do you think of this approach for a plugin system? https://gist.github.com/1926447
jn, ben_alman: i think that's sort of a terrible idea.
why not just load the thing you want, when you want it?
ben_alman, jn: people do that with express plugins all the time.
ben_alman, jn: this sounds like inventing new problems to solve.
wait a minute... that's printing out the wrong thing
wtf?
kewl
itayneeman, konobi: oh, maybe that's it
the one that uses substack's bunker
yes...
what's esprima?
kewl
it's not runforcover, it's the specifics of how its integrated into node-tap
teag
yeah
also a lot of it is sync, and it only works on files in lib/, etc.
*subdir
i don't care very much about pretty output.
other than that, taps coverage stuff is pretty good.
i care much more about valid results with a minimum of overhead and a minimum of lines changed.
because i've done it, and showed it off to SubStack back in 2011, which is why he wrote Bunker.
mint is nice, but i don't know how it is for servers.
no, i much prefer debian
just as busted.
same debian craziness.
so, slightly less ugly.
there's no desktop os anywhere near as nice as os x, imo
ubuntu = ugly busted windows, mint = ugly busted mac os
didn't realize there was a standard for GUI frameworks to comply with...
304 = "content not modified".  ie, "What you said you have in your cache is the same thing I would give you, so you're all set."
hi :)
first, i'm going to tell you a little something about tail recursion.
here's the thing about tail recursion.
then i'll tell you all about tail recursion.
crockford dubbed that "eteration" once upon a time.
oh, yeah, that's fine.
the term didn't stick, but i liked it.
which is kind of a good thing to do anyway for other reasons.
yep
you gotta chop it up for node
npm installs stuff into the local prefix dir
~/.npm is not where npm installs stuff.  it's a cache folder
./node_modules/
can you reproduce a case where npm cache is owned by a user other than you?
even when using sudo, this should behave properly
hm.  indeed, that is a bug.
thank you
great
and sha256 and md5 etc.
and zlib and all sorts of other stuff that's easier to do in C rather than JS
why?  that's a terrible idea.
you're resurrecting the problems we solved in node 0.4 and npm 1.0
;P
but it's isolated from the local spaces just as they're isolated from one another.
right
the global space is like a single local space
then it'll be able to require() its plugins
this is on purpose, and wonderful.
also, you can just use `npm.globalDir`
path.resolve
since, no, it won't work on all OS'es, since win32 doesn't get a "lib/" there.
#2) there's a reason why local dependencies are great: depending on the state of the global space is deeply problematic.
(point #1) 
we learned this with gems, with npm 0.x, and so on.
(even then, packages should stay in their boxes)
your tool has to work whether it's local, or global, or copied and pasted or rsynced etc.
for the sake of this discussion, let's call it yours.
or just a random git checkout
what is it?
cli bikeshedding notwithstanding.
ok, so you install grunt globally.
so you run `grunt addplugin grunt-foo`
then you want to add a plugin to grunt.
grunt *can't see anything outside its folder*
no.
you have some way to modify the grunt source code.
and i run grunt as my local user, not as root
why?  because it's installed as "nobody" and "root" owns that folder, and has chmodded it 0700
if it has a plugin api, why is it adding undue complexity to ask grunt to give you a way to load plugins?
something you've installed with npm?
what is grunt?
that's mostly a joek
sure
oic, it's like jake or whatever.
the problem is that you'er relying on a private API and a naming convention
what is grunt, anyway?
!!!! :)
*especially* if it assumes that everything named grunt-blah is a plugin.
but if grunt tries to read the global install space, then that'll fail.
right.
or grunt.js or however you tell grunt what to do
and vice-versa if it's global
might want to document that if you've installed grunt locally, you need to also install the plugins locally.
they have to both be the same.
the module?
the plugin module?
then also you don't have to rely on the naming convention.  i could call a plugin grint, as long as i name it in the grunt.json, it doesn't matter.
require.resolve("grunt-foo") <-- that'll tell you
grunt should not know whether it's global or not
it should be agnostic
if grunt is global and grunt-foo is linked global, it'll work
0.6.12 will probably land thursday or friday
no, 0.6.11 is fine.
er, `npm help folders`
npm link is advanced juju :)
k
back
that PR is a variation on one that andreas madsen submitted a while ago
in teh command line
yeah, me too
yeah, haven't seen that one in many months
the \r is "return to col 0"
you can also do other fancy ansi stuff using the charm module from SubStack
so, it'll write the current line, then put the cursor at col 0
but not infite layers
heh :)
good luck, goodknight
close enough :)
i visit there twice a week or so
rather than piping
then just res.end(buf)
do you know the proper place to ask my question?
after looking out my window i noticed, haha
hehe
the most popular test frameworks in node are tap, mocha, nodeunit, and "other"
how long were you in india?
oh, it's been all action, baby
wow, yeah, you're overdue for some js party action, for sure
you got no idea!!
right
which is how webkit does it with ArrayBuffers, as well.
and you can clear out the ref to it in the JS object.
since that data is just raw bytes
switching to something else would be a major undertaking
the ExteralString thing would be nice.
we have a lot of code that does very fiddly specific optimized things with Buffers.
not in silly benchmarks, but in actual real-world programs
we do a lot of copying to turn buffers into v8::Strings.
with an ExternalString, we could potentially save a lot of overhead.
but i'm happy to answer as well
exactly^
i'm not going to write a file for every line
if i can write 1000 example cases, and verify that they work easily, and add reported bugs to the list and fix them, then i'm in good shape.
hah
it's also very similar to the little ad-hoc testers that i'd been writing before writing something with consistent parseable output
or tap test/*.js
right
TAP=1 always outputs tap output, TAP_DIAG=1 always outputs diags TAP_DIAG=0 never does, etc.
TAP_TIMEOUT is the timeout in seconds before killing a child proc
*reqs
which sucks because the {timeout:NNN} arg is in ms
yessir! i'd <3 doc pull reqa
it's nice, because SubStack has been making it awesomer for use with testling
so we have corporate support
that's great
:)
better to just do Animal.prototype.talk.call(this)
or apply(this, arguments)
or whatever
basically, if it's building the tarball, and it's already in a node_modules folder, it'll just assume that it's being bundled.
it was a pretty tiny fix, too
little bit of a hack.
this might introduce issues if you're developing something and building it in a node_modules folder, but i didn't see problems with it.  we'll see :)
hm... yeah, that's an issue.  i'll fix it.
fixed :)
there it is
but my node-v0.6 and node-master checkouts are pretty closely following joyent/<branch>
review, please: https://github.com/isaacs/node/commit/35b36394f16c4e5eb08fa4fb21d797ac11439dc9
test, please: http://nodejs.org/dist/v0.6.12/node-v0.6.12-RC0.tar.gz
or cluster
in node=master, cluster is very nice
if (process.argv[2] === 'master') { this is the master } else if (process.argv[2] === 'thing1') { require("./thing-1.js") } else (..) { etc }
you could also just test require('cluster').isMaster to know if you're the master or a child
but i mean, actually test against master/0.7.x so you can be prepared, give feedback, etc.
sure, that makes sense
to install-as-if
(one day, someone's going to publish a package named "pkg" and fuck up all my one-liner tests...)
:)
.. "ircretary: hello"
ah, it doesn't respond with the result
but they're linked to in every release announcement, and on the website
some people do this
:)
like marketing, design budget, my salary, ryan's salary, etc.
and brought us igorzi.
which has been insanely useful.
corporate backing is not a bad thing.
it's often the difference between software that thrives, and software that withers.
joyent's actually *using* node, and building technology, in the real world.
and they know full well what would happen if joyent turned evil on node: we'd fork it, change the name, and live on in MIT bliss.
and, if you look at the people calling shots at joyent where technology is concerned, (bmc, especially) they're all people who've seen FOSS projects they loved get abused by evil corporations.
it'd be a hiccup in history.
ie, get the test accepted first.
once we all can agree on teh intended behavior, and see that it's not the actual behavior, that's a good time to start hacking away
a failing test nails down the discussion
otherwise we have a high likelihood of talking past one another.
and then it's clear if the fix is valid, because it fixes the test
because either the test is invalid, or it's valid and needs a fix.
i don't care what it's called, really
originalArgv or somethign
sure
there should be a collection of all the args that node plucked off.
whatever
:(
it's ugly, i know.
unless it's important that the fixture not have it for some reason, it needs to be there.
mmalecki, micheil: so, the actual args == argv.concat(execArgv)?
er, execArgv.concat(argv)
what if you do node file.js --harmony_proxy foo
k
right
yes, i see this
since everything after -- is interpreted as a positional argument
kk
thanks :)
it works pretty good
"i" is alias for "install"
basically, the npm commands that i run a lot get fancy shortcuts :)
that is the intended behavior, anyway.  there are a few bugs in that area, and it's some grimy code in desperate need for a makeover.
glutens.
kool-aide isn't paleo-friendly.
er, require(d + "/package.json")
may need sudo on either or both of those
fs.readFile(tehFile, function (er, d) { cb(er, d && d.toString().split(/\n/).length) }
{ hooks: '0.2.0', mongodb: '0.9.9-4' }
https://gist.github.com/1989912
mhh, sorry - i guess it's a problem with my local system or with the socket stream project
or pastie
or that, sure
not because that'll fix the problem necessarily, but there's a lot of UNKNOWN errors that are given proper names.
yes.
:)
 /home/martyn/npm/npm-debug.log
:)
b
bbia
i'm about to head to a different location, though.  you going to be around for a few minutes?
k, kewl.
yeah
200
it's so bizarre, though, it's getting a 2--
so that can't be it
aha!!
no... it's making the dir fine...
that could do it
you can also do `npm config set tmp ~/.npm-tmp` or something
:D
er, use that as the root
np
> JSON.parse(fs.readFileSync("red.json"))
> fs.readFileSync("red.json", "utf8")
> require("./red.json")
{ red: '±[31m' }
{ red: '±[31m' }
installs node and npm into /usr/local
hi, Sly__
hahah
oh, the real rms ghosted me :)
    git clone $(npm view $name repository.url) $name
    local name=$1;
$ declare -f npmgit
npmgit () 
{ 
}
and then, if that fails, and it auto-detected, then it'll tell you to npm install node-gyp, run `node-gyp install` and try again
kkaefer, TooTallNate: I started adding some node-gyp sniffing into npm
but before we automate the building of binaries, we have to have a system for binary modules that is straightforward and predictable enough to be automatable.
that is next up on the roadmap[
no options
ok, so, with that settled...
one module = one gypfile = one binding = "binding.gyp"
that's the filename.
the word is "binding.gyp"
you want more bindings?  write more modules.
hahaha
s/waf/gyp/
s/install/build/
but the shell scripting facilities on windows and unix are not so similar
it should work even if the "clean" isn't configured, or has nothing to do
just try to clean up first, just inc ase.
this is what npm does by default with node-waf when there's a wscript present
yes, UX matters - but a plan B would be awesome, at least until a Travis-CI-like thing is up and running
daunting indeed :)
so, yeah :)
  '-10',
  '0',
  '12',
  '6',
  'betafoo',
  index: 0,
  input: '=v0.6.12-10betafoo' ]
> semver.parse("=v0.6.12-10betafoo")
[ '=v0.6.12-10betafoo',
and if it ends in -pre, then decrement the patch
not in a separate context.
it's by design :)
nice
then it gradually grew into +-- and `-- and |, and then into the unicode monstrosity it is now.
but yes, it's ttly lame
rewriting it
srsly
(hiring a dood/doodette)
RMS is quite the pun-isher
i think the beard helps
i'm workin on it
try again in a few minutes.
:)
_all_docs is faster.
or that^
lot of herd thundering
i'll fix it, one sec.
kk
looking at SES, but they have a 1 business day turnaround, apparently.
otherwise a limit of 250/day
ok, kewl.
thanks
yeah, i really need to get better email integration with the registry
an alarming number of npm users don't put a real email address in there.
should have like a two-step thing in adduser, where you can't publish anything until you verify, and it kills the user account if youdo'nt verify in 7 days or something
why are they sending it to jashkenas...?
just waiting for a few tokens to get cashed in.
npm email quota limits should be resolved soon.
1.1.0-beta-3242342 should work fine
npm help semver
tells you what you'er allowed to do
oh wth, ses
but i think it's just an IP on the internet, pretty much
putting them in a db or something would be just adding a vector for assault
since they're exposed on purpose
oh, also, that should be lib/node_modules not just node_modules
  rm -rf /usr/local/{lib/,}{node_modules,node,bin,share/man}/{.npm/,}npm* ~/.npm 
np
if you dont' want devdeps there, then `npm prune --production` first
is npm'y
ok, that should be fine.
gimme one sec.
considering just yanking that logic out of validate_doc_update...
declares it lunchtime
everything working?
hey, everybody.
how's npm going?
hi
?
ls -laF /home/node
that's weird
ningu, elio_: i always meant to add that, but never needed to
ningu, elio_: no, new npm commands are a source patch.  there's no git-* type plugin thing
thanks
      "_nodeVersion": "v0.6.8",
      "_npmVersion": "1.1.0-2",
right
actually, joyent is investigating something a bit like this for doing SDC builds.
not unheard of
that's where shrinkwrap came from.
hm
move away the offending file, or --gangsta it
npm ERR! File exists: /usr/local/bin/http-console
npm ERR! Move it away, and try again.
npm ERR! Refusing to delete: /usr/local/bin/http-console not in /usr/local/lib/node_modules/http-console
at all?
c
is there a defined retention for the npm repo?
"./" + file).version) }) })
interesting
test, please: http://nodejs.org/dist/v0.7.6/node-v0.7.6-RC0.tar.gz
lot of hands, lot of platforms, etc.
in time for nodeconf, probably :)
so, i'm thinking, early summer.
will install on my dev vm after this meeting, thanks for the prodding
which is what node has done.
(or fetch and run manually)
I went a bit more hardcore and removed /usr/local/lib/node_modules/ 
hehe, yep that worked… but its like the second time this happens to me.
seems to happen on every new npm release
should I remove my .npm folder too just to be safe?
we are still supposed to use sudo with npm right?
curl http://npmjs.org/install.sh | sudo sh
and everyone in between
weird, so now it worked without `sudo sh`. But when installing packages should I sudo or not?
so what's the difference between stuff that it puts into .npm in my home… and stuff that it puts in /usr/local/lib/node_modules for example?
thanks, I'll go do some reading I guess :D
oh, great :)
and i see this when i npm ls:
│ │ └── mime@1.2.5 
│ ├─┬ connect@1.0.1 
│ └── qs@0.4.2 
├─┬ express@1.0.7  extraneous
it used to be mostly a weekend/evening spot, but more and more people do node for their 9-5 job nowadays
(at least, down to the name@version/url level)
but i doubt it.
*this
i just tested with 1.1.8 and it works like thi
And I apologize deeply for npm 1.1.0-beta* still being on the regsitry.  they're hazardous.  i'm going to remove them.
mmalecki, AvianFlu: Awesome, thanks!!
test, please: http://nodejs.org/dist/v0.6.13/node-v0.6.13-RC1.tar.gz
er, rather: http://nodejs.org/dist/v0.6.13/node-v0.6.13-RC2.tar.gz
no, RCs are not tagged
officially, they don't exist :)
(preferred by me, anyway)
is biased for the same reason towards nave
;P
YOUR DIGNITY IS NEVER SAFE!
the initial drop will be extremely minimal.
we're committed now :)
and domains will come out soon, too :)
yes
cygwin is headache inducing in many ways.
sammmy, zahlman: npm has been by-default-bundling since 1.0.0 
like, make if(er)return cb(er) automatic somehow
that's the one thing that's nice about throw in stackful code: you can handle errors where you know about them, without thinking about it
adding Function.prototype.eb
:)
'
it's actually really nice.
because it's already in teh ancestry
cd ~; ln -s src node_modules
thanks
i don't get it
cd ..
npm install A
since you have your own node_modules thing there
you know?
oh, i guess you don't have to npm install A, since A is alredy there
but whatever.
(in a)
and /
which have all the system-specific semantics baked-in
you should be using path.resolve() and path.relative()
Anyone using symbolic links on purpose inside their packages?
like, for something important?
and they seem just extraneous and only cause problems in most cases.
--silent
-s is --silen
np
just like uninstalling
but they should only be "Classes" if a class is the proper abstraction for your problem
that's normal
but the code itself is a bit of a mess in a lot of places.
.. "asdf\nfoo\nbar".match(/o\na/)
missing catb0t and v8bot
  'blerg$'
  'f[ob]+' +
)
?
just SOME things
new RegExp(
new RegExp('\\$') for instance, to match a $
rather than the eol
the /asdf/ style regexps can not contain \n chars
doesn't believe words like "slower" or "faster" without numbers attached
been burned too many times by the oral tradition style of benchmarks.
half the time, writing clear code ends up being fast enough anyhow.
that is the only path to sanity.
write clear code.  then profile it.  then optimize the slow bits.
knowing the length ahead of time makes v8 about an oom faster.
v0.8 is still flexible.  feel free to ask for changes there that would help you.
*stop
it's not good.
hahah
fetch the json, then look at the dist.tarball, then get that
$ npm install n
n@0.7.1 ./node_modules/n
npm http 304 https://registry.npmjs.org/n
npm http GET https://registry.npmjs.org/n
that's with a full cache, obviously
it just makes the output noisier
popcorn
:)
like a Derp from Scotland
mkdirp
ok, going home for reals.  have a good night, noders.
yep.  that's the one :)
but not quickly
i'm confused.
oh, yeah.  that's going away.
what is it that npm install is stunted without?
npm IS node-dev
the path forward is using declarative compilation directives in a a gyp file
there's a node::Buffer class you can use in C++.  but really, it's better for c++ code to not have that much node-ism in it, and instead just talk to libuv.  take a buffer as an argument from JS, write to it/read from it/whatever, call the cb to say you'er done.
and it leaves the door open for optimizations in the buffer implementation at the JS level, or slab allocators, and so on.
it's much simpler that way
so who knows
where arg is one of bufferObject->handle_
(or not, if it's sync)
module.parent = the module that called require() to load this one
yeah, it's just who included who
but, if you have something like:  a.js: require(b, c, d); b.js: require(c, d)
it's only the module that *first* loaded it
then a will get the cached c,d modules, and c&d will see module.parent = b
what are tests ever for.
you should probably just write it right the first time, and skip the test.
:3
but then you just publish it
tests are for bad programmers who write programs that don't work.
but there are exceptions to most rules.
if your modules are too simple for a test, then they're probably not doing much interesting
just deliver on the promise you're making, that's all ;)
heh
ok, great :)
prefers not to boil plates
more specifically?
:)
doesn't jitsu do that? ;P
socket.io was installed underneath hook.io, since it wasn't a top-level dependency
or you can just rm -rf node_modules/hook.io/node_modules/socket.io
that is the only way to avoid collisions
or at least, it's npm's way to avoid collisions :)
the other options are generally require a lot of human effort
does information about the negotiated cipher scheme get surfaced anywhere within the cleartextstream of a TLS connection? I've looked and looked but been unable to find anything :-( 
right
and that'd do all the ignorefile stuff.
so a lot of those things could just be programmatic npm-packer usage, or whatever it's called.
without relying on a ~/.npm cache dir
*hijinx
i need to write a blog post about the concept of "global".
unless you do some cache-clearing hijins
and set module.exports = global.theRealLogger and return if there's one there
if you *really* want to, you can have the logger register itself on the actual "global" object.
anyway, gotta run :)
but that's probably unnecessary
or you could set pu a logger service in a separate process space.
that's also nice because then it's a bit more resistant to failure.
and for `npm link`
test, please: http://nodejs.org/dist/v0.6.14/node-v0.6.14-RC0.tar.gz
shrug
and works with older couches
like, authRequired, and then if you HAVE auth, and always-auth is set, THEN send it no matter what, and also not try to create user X as user Y if user Y is not an admit, etc.
so you need to add another semantic.
it's very hairy
copy ipy.exe python.exe
er, "copy" i guess
hm.
'[object Object]'
0
0
> eval('({}+[])')
> eval('+[]')
> eval('{}+[]')
' + [].join(',')
shrug
probably no more than 800 years, though, just to put an upper limit on it
truly, ancients as the gods ancestors.
hi
patch coming soon
"Konobi's tap consumer walks into a bar, and shoots everyone who does not set their beer down on their assigned coaster."
i'm not sure which version of the protocol node-tap implements.
maybe i should just call it TAP version PI or something? ;P
grr.  tap4j;
it's not just strict, it's strict in completely nonsensical ways that make it unusable with any other tap.
granted, node-tap has bugs.
seriously.  you should be able to throw the contents of the phone book at a tap consumer, and it should tell you how many names start wih "ok" and how many start with "not ok"
it's overdue for a rewrite
tap4j has a parser that doesn't parse valid yamlish, is the problem.
the test-writing interface is nice, but the harness/runner/producer/consumer stuff is a bit tricky
jdson?
oh, json
it's more programmatic overhead the way i'm doing it, more complexity than necessary
right now, subtests are just sort of massaged into a single stream at the top level
the spec is a means to that end, not an end in itself.
like, every tap implementation that matters and is not currently under development.  documnet it.
?
haven't heard of it
hey, yawNO.  whatcha readin?
heh
i have done that
but in async code, it can be problematic
like most antipatterns, it persists because it is very useful in rare situations.
theyr'e the SubStack backup band
(normally)
no _
then man sudoers and man visudo
then run `sudo visudo` and check if the env_reset option is set for your group
np
great!
oic, "All of the other pull requests (#2304, #2305, #2306, #2307) merged for your convenience."
maybe just a purple background
with no character
*red
but those are all a lot more stable than any of the stuff in my green section
right, but... a lot of the most "good" packages are shown with a red marker here.
and since deprecation bumps the updated date, *deprecating* a package makes it go from red to green
also, i'm a little hesitant to add any more manual color code stuff, since it'd be nice to push that all out to a dep or something
as long as they pay rent
deps are fine
marak's color thing is pretty nice and basic, i just haven't gotten around to using it
that would not surprise me
but it'd be a project
instead of just showing when they're done
all node supported unices handle ansi
i'm not sure how i feel about the colors.
well, the search output can use some cleanup, that's for sure
without the background being affected?
i see
this is truly npm's finest bikeshed.
like cyan for recent, and "bright black" (grey) for old ones
well.... we could maybe use a color that's not used for highlighting
and we aren't yet set up to do that
at least, that's how i roll with it
marriage, or separate homes.  none of this roommate business.
or combine them properly
there's only two booleans.  every "true" is the same as any other
typeof new Boolean() === "object"
being able to treat primitives as objects is kinda neat, though
like "asdfasdf".split("a")
OOP is sometimes a good fit
i've actually been recently using "this" like a madman.  i kinda love it.
new and this are good for problems where OOP is a good fit
now that we have .bind(), it's so lovely
this is not a either-or
SEPARATE ALL THE CONCERNS!
and the file writer thing doesn't need to know where the entries are coming from, as long as they fit the right shape.
that's what versions are for.
it's not like changing the behavior of a class is somehow more or less hazardous than changign the behavior of a function
this isn't religion
use it for what it's good for, don't use it if it isn't.
but it doesn't really.
if it doesn't make the implementation smaller or more elegant, then it's not actually an *improvement*
it just makes more code.
not dogma
surface area is a heuristic
there's no silver bullet here.
even "version numbers" relies on people not being stupid, and you knowing what youer' doing
i've experimented a bit with that.  it's more trouble than it's worth
same here.  good night
(npm link not supported on windows for various reasons)
in node_modules
what does that output?  the full thing?
seems to be working fine now, though
ECONNREFUSED
erm, nvm
sweet!
if they error, i mean
or 404
$ npm view require-analyzer dependencies.npm
1.1.4
jesusabdullah, mmalecki, AvianFlu: Seriously, use ~ in your deps.
more than 2 versions behind
jesusabdullah, mmalecki, AvianFlu: or bundle them.
kewl
but node itself has a node.gyp file, and npm kept screwing with it.
made me batty
ie, don't install trammi with npm.  just install it with curl and tar
and npm 1.1.something
but stay tuned.
i forget which one
because we're using an old mapi
yeah, don't do that :)
haha
yeah
right
or rather, the first un-busy
that happens way way below us, which is why it's so fast and efficient.
> mm("c", "!*/")
> mm("c/", "!*/")
false
true
> mm("foo/bar", "!*/")
> mm("foo/bar/", "!*/")
because it *doesn't* match, so ! negates the match
but that, too^
mm = require("minimatch")
true
true
**/** isn't any MORE ** than **
or !*/**?
sounds like you know the solution :)
> mm("foo", "!*/**")
> mm("foo/", "!*/**")
> mm("foo/bar", "!*/**")
false
false
true
res.render()?
i didn't want to say "no" off the bat without giving the "OH NO ITS DIFFERENT!" feeling a chance to subside.
i use `npm search` a LOT
hahahah
alex's got a pretty nice flow, actually.
timoxley, Marak: it should really be npm search | awk '{print $1}' | say
is packing
it'd be nice if node's error printing stuff printed out the code/path/etc. as well.
lotta useful info there
or 14
hello
ok
oh, ok
and it's not working?  what's the file? what's in .npmignore?
kewl
ie, that switches on the debugger
but it doesn't look like your thing should clobber the existing one...
but it's not high priority, imo
k
np
SubStack, Trindaz: there is no long stack trace feature in node today.  there was briefly, but it was reverted for performance reasons.
*lib/install.js
i'm not sure.
maybe there just needs to be a separate --save config option?
that uncertainty is why it's still broken, mostly :)
nodeup time!
it'll be node_modules forever
*is
oh, also, index.js, but you can set a different thing by setting a "main" module in package.json
there are very few cases where node and npm make a hard rule about what a file or dir must be called.  just node_modules and package.json, basically.  this is only done when the value of flexibility is much less than the value of consistency.
those cases are rare;
usually flexibility is better than consistency.
Friday night poll time!
What should domains do?
i've got it implicitly catching errors, routing errors that would be passed to callbacks, but only for bound event emitters and callbacks
code > english
it already works for fs streams, because those are EventEmitters, and failures are emitted on the EE
also, you really need access to all the "things" in a domain
and then there's performance.
i'm trying to sort out a few multi-domain edge cases now.
like, two requests at once sharing a connection pool to a db or something, what happens when one crashes
so that's gotta be exposed.
so with this iteration, i'm trying to do as little as possible.
sure
what happens now is nothing
you just leak memory or crash or something
and express does nice 500 errors by wrapping everything in a try/catch and listening to process.on('uncaughtException') and kinda hoping for the best.
care to test? http://nodejs.org/dist/v0.6.15/node-v0.6.15-RC0.tar.gz
?
at worst it's half-doing something, corrupting the cache, etc.
thanks
in node, time = "a function that gets called later".  io doesn't ever block
but it's not very high priority
happens super rarely
yeah, it'd be nice to make that more atomic
right?
there is no program that requires it, and many that will break if it's inconsistent.
npm will love you unconditionally.
or you can use butterflies
or you can use git, or just write the packages in node_modules/whatever/.. 
supports maxogden.
actually runs on javascript
has to sleep for 14 hours every night while he collects garbage.
oh, too bad, Matt___ left as soon as his question sparked some interesting comments.
Zyng!
What an exciting day in the blogosphere!
is an instagram user.  it really is kind of a fun app.
require('ether') might be something like /path/to/node_modules/ether/lib/ether.js or something
yeah
so require.resolve('ether/package.json') will always be a file in the root of the pkg
then do whatever fs.shenanigans() you like on it :)
to get its folder
you can path.dirname() on that
k
extra trolls today.
man, i gotta promote some more admins.
cheers, I just read that 'this change is improvment' :)
hi
better to just decorate a normal Error object.
custom errors are kind of lame, actually
imo
and more useful
we don't have typed catches in JS, so what's the point?
etc.
Thx!
yeah
Yes, I wondered since I used the latest version. It was a repository issue, right?
npm is 30 now, counting itself
NPM has its own fuzzy logic ;)
yes
so, right now, "read the package.json file" and "resolve dependencies" and "unpack into a place" are all completely grimy
refactoring those bits will be basically a 2.0 endeavor, i suspect
gkatsev, hacks: i've handed off supervisor to iangreenleaf
 /home/paul/Dropbox/work/rt7/db/users/app.js line 7
only for secret chefs to put on secret food!
what doesn't work on windows, specifically?
i do test npm on windows quite often.
"did the 2/3" <-- what does that mean?
ok, cool.
?
yes?
k
if it's easier to pm, then that's fine.
"reload webchat"?
i don't think that's a node repl command ;P
i mean, that should work
ok, then what?
that's the node repl
npm ERR! 404 'subway' is not in the npm registry.
npm ERR! 404 You should bug the author to publish it
you can run node and npm from anywhere.  you should run `npm init` in your project, first thing.  then `npm install --save` your deps.
npm gets run in the regular cmd shell, in the root of your projects.
*root of your project
the folder where you're going to write your node program.
er, probably a newer version
expected output:
express@1.0.7 ./node_modules/express
is using 0.7.8-pre
└── connect@1.0.1 (mime@1.2.5)
├── qs@0.4.2
express@2.5.9 ./node_modules/express
└── connect@1.8.6 (formidable@1.0.9)
├── mime@1.2.4
├── mkdirp@0.3.0
├── qs@0.4.2
<3 purr
poor little robot
windows has cat, right?
this is the part where you write a program.
yeah :)
:D
but whatevs.  software has bugs.  it's not hard to work around.
i played with it one time, but i'm more a couch guy.
i'm embarrassed to say
or maybe that's nomnom
the ReadStream is totally internal to the function
hm.  it's not very big.
since they can be reused
;)
maybe it's doing somethign dumb there?
like, exponentiating sometihng or other
$ TZ=America/Los_Angeles node -pe 'new Date().toString()'
$ TZ=CET node -pe 'new Date().toString()'
$ TZ=England/London node -pe 'new Date().toString()'
Fri Apr 13 2012 15:33:35 GMT-0700 (PDT)
Fri Apr 13 2012 22:33:32 GMT+0000 (UTC)
Sat Apr 14 2012 00:33:41 GMT+0200 (CEST)
i should publish the timeline and what's left :)
hm... ok, nvm, i broke something :)
yeah, but it sucks, because it'll also install all dev deps for the world, which is lame
otherwise you'll get nasty surprises and XSS
carousel-config.js or something
and in there, you set the content-type: application/x-javascript header, and res.send("var carouselConf = " + JSON.stringify(carouselConf))
but it's on the list for v0.8
but it must be YOUR magic!
it's all just bytes
0.1s is a lifetime!
oh, wth?
what happened?
HAHAHAHhahah
node is nice.
it'll be an interesting experiment to see who still has +o after a few weeks
or lose power
haha
what if someone doesn't love god?
actually, in production, your server shuld be a small disposable vm that does exactly one service.
doesn't follow this rule nearly consistently enough
for the love of debuggability and high availability, don't do it any other way!
so npm link is not so bad.
but a single global install is fine
but yeah, symlinks are kinda painful for production
if A -> (b, c) and b->c, then b will use the parent's c
if a->(b,c) and b->(d), and c->(d), then 2 copies of d wil be installed
rather than install a separate copy
it'll only install a second copy when it needs to
ok :)
would you want to take on the responsibility of keeping it up to date?
if you look at the actual parse tree, a) they're all a bit different, and b) from the ones that i've seen, they usually just treat it as body with one statement
that's been there a looong time.
doens't have a problem with connect
i don't use it much, but then, i don't make many websites :)
it's useful for some purposes.  people seem to find it very handy.
or with express
which is a valid point, i suppose, but it still does make a lot of things easier
same thing
connect's is pretty insane
i mean, could be better maybe, but it's not insane.
it's way too convolutd.
oh, i guess connect is a lot simpler now
express could be a lot smaller if he threw out connect and matched the node api's more closely
.. v08 = { featureComplete: new Date("2012-05-01"), release: new Date("2012-06-01") }
is disappoint.
what, no js bots?
there we go :)
v8> v08 = { featureComplete: new Date("2012-05-01"), release: new Date("2012-06-01") }
I beg you: please add back button support to search.npmjs.org
*npm ls
and /path/foo/package.json
and you cd /path/foo, and do `npm link`
oh, wait.... so, the only file is /path/foo/bar.js?
it'd be easy
just link node_modules/foo to /path/foo
so, what i do, is this:
stands up very straight
;)
installed or not
where require() always works, but you end up integration testing all your programs all the time
happens all the time :)
a little flood is ok in here :)
don't touch!
i get it now
tako is promising, but super young
but no one's actually sugesting using git submodules
come and get it!
v0.7.8 is out!
or at least, different
waves from over here
thanks
it's still pretty early
but the paradigm of how connect does routing and middleware, is not the api i would have chosen
it's less express itself that bugs me, because it clearly is not bloated
tako *feels* lighter, because it's a bit more in line with how node works, rather than inventing new ideas.
but, it also feels kinda broken sometimes, because it's version 0.2.5, not 3.whatever
so, ya know.  whatever :)
it's important to acknowledge the social tradeoffs of one's technical decisions.  pretending they aren't there isn't rational.
and then you could do `git checkout origin/v0.6 -b v0.6` to get on that branch
for what?
intrigued
they're different enough operations that i usually like to just fetch all the refs, and then figure out what to do
what's `git ru`?
is a collector of git tricks
oh, hahaha
that does a full fetch of all remotes?
what's that do?
whooooaaa
72 in my npm working dir
that might take a while :)
gf context <-- like "git fetch -a context"
ghadd context <-- adds a remote named "context" to git://github.com/context/<this project>.git
i have a bash shortcut that updates a specific github user's branch
s/branch/fork/
but some people do silly things like name their node fork "node-1"
so it breaks all my conveniences :)
yeah
and also unlink
yeah
click2play = awesomesauce
also, i think privs never are changed on windows
so, just set the umask to 027 instead of 022
but it'll default to the process.umask() value
or you can set the npm --umask config to 027
which defaults to whatever umask is set in your shell
npm just masks 0777 for dirs and executables, and 0666 for everything else.
(probably has more to do with "why add another field, that means like an extra $5000 per machine)
that's why
and have a binding.gyp file there
and npm will just pick it up and Just Work
benvie, milani, Cheery: you don't really need to install node-gyp
it's included in npm now
just run `npm install`
(of course, you can also npm install -g node-gyp, and then run `node-gyp rebuild`
hahah
html5 is <!doctype html> and then whatever the hell html you want, pretty muchg
none of that /> malarky
or, if you're really cutting edge, html6
the new hotness is html5
but also: canvas, <section>, <heading>
it'd be like an english teacher who doesn't know what a complete sentence is
there was a bit of frustration there, for sure
^
like, you shouldn't define a middleware object, should just do app.on('request', function (req, res) { ... })
right
right
and i want to be able to attach filters to them
and the way it exists now is dumb
i want to know when there's a request, and have access to the req/res at that time
not with the filters
so, here's what i actually want:
(at least, in the gzip case)
or rather, has an extra object in the way
then you also need to wrap the end method
1) app.on('request', fn) rather than app.middle(ee)
2) AOP style filters
for json and gzip, ok
i could not disagree more with that
k.  so, decision:
yes?
but it should be in a separate file, use the plugin api etc.
but like, tako is the newest http framework on teh block, and already it's too big.
well, id' just implement them the way that i'd expect someone else to, and then have it come with it enabled by default.
yeah, that's gonna rock :)
!!
you can put the --save anywhere
or at least, looks a lot like
which it inherits from
it's tar.Parse now
np
Ted Dziuba is all the instability of Zed Shaw, with none of the badass coding ability.
control-C in the terminal
Awesome side effect of using cluster-master in your app: when there's an error, just refresh until all the workers restart from it
but it won't get much bigger.
but like, there's so much of it...
the thing is, python isn't just a language, it's this huge sprawling collection of platform, and library, and utilities for specific tasks, it has no focus.
every purpose is built into the language
no, it's an every-purpose language :)
but like, node isn't even all THAT specialized to doing webdev
ie, systems that spend most of their time blocked waiting for IO
if you just need to throw a website up on the internet real quick, php or rails are probably easier.
or, for thatmatter, just html in a folder
yeah
lots of stuff there
bsdglob is really clean and well organized.
the glob in bash4 is also pretty elegantly done.
also, those programs implement a special parser and matching state machine for globs only.
like, converts one type of pattern into this other type of pattern, and then matches it using this whole different weird approach.
my js one converts glob magic into regexp magic, and then uses the v8 matching engines.
so, when you look at the whole program, it's kind of crazy and complicated.
nice and short :)
but in those cases, the C is probably less optimized than it could be
er, gcc
in some cases, probably
package managers are uneasy bedfellows.
we could probably make it work now, with the added "Sticky config" optiosn that npm has, so that it'd behave even after a self-upgrade.
yes, 'data' events sending something other than strings and buffers is a mistake, in retrospect.
haven't gotten around to refactoring that behavior out of tap, but that's the only place where it happens
:)
bug rauchg
it shouldn't do that/
good morning
thinks he broke regality's heart... stuck in teh doorway now
on that we are very much agreed, iaingrant ;)
rvm-style?
curl https://raw.github.com/isaacs/nave/master/nave.sh > ~/bin/nave; chmod 0755 ~/bin/nave; nave use 0.6.15
but, living in the US, with fast internet, i find that the compilation time is usually faster than fetch time anyway
aaannnd warm.
compiling is slow, though
hooray toasty macbook
and a smartos
bash3 = GNU bash, version 3.2.48(1)-release (x86_64-apple-darwin11)
bash4 = GNU bash, version 4.1.0(1)-release (i386-apple-darwin11.2.0)
one debian something, and the other some ancient ubuntu
feisty fawn, maybe?  gallopin gazelle?  hungry hippo?  interested iguana?
i forget
mostly i don't care too much about linux these days
:)
you have to break your brain to really grok it.
speaking of which, if you need to log into a couchdb server, and then make a bunch of requests auth'ed as that user, just published couch-login@0.0.1
please stop.
this is fud.
:)
all technology is used in the production of wealth.
"apache aspect"?
dude, you do not know what yoer 'talking about.
3 w's
Welcome to your new op, Nexxy.
anyone else, too, feel free to test
i'm gonna test smartos on our joyent build box
loves JOBS=32 make -j32
sunos passes
soo fast.
Hey
anyone wanna help out a little bit with the new npm site?
patches welcome!
heheh
porridge jaundice
gotta run
"we are javascript power" = "we are composed of the powerful essence that is javascript"
it's not that we're a power of several powers, or the only power and there can be no others.
that's power as a ordinal sort of thing.
this is power as a stuff.
ok
test, please, either the branch or http://nodejs.org/dist/v0.6.16/node-v0.6.16-RC2.tar.gz
Sorry for the forceful pushing, everyone.
npm 1.1.18 had a pretty bad interaction with a change in node v0.6, because it didn't always pass numeric uid/gid arguments to child_process.spawn
although, actually i don't now, since cluster-master just takes care of all taht
blame ryah_
i type cluster.spawn() all the time by accident.
since that's actually what it is
you just tell it how many to keep alive.
i mean, it's just child_process.spawn + IPC handle-passing
easily
fast websites need parallelism.  process parallelism is the only valid approach.
node is for building fast websites.
yes, it does.
dude, cluster is WAAAY lower level than expres.
it's not bad, really
it's not exactly obvious where the appropriate border is, but its not as if we've come to this choice capriciously.
read through the code.  it's a pretty thin wrapper around child_process.
you wanna see over-engineered, check out http.js ;)
is glad to have SubStack, pulling the pendulum in the minimalist direction
http.js isn't more *extra* bad over the necessary bad that all http clients and servers just have to deal with.
s/more/much more/
on the same fd
also, "new instance of the entire app" should be exactly what happens, because your app should be small enough that running 8 of them is perfectly acceptable.
but who cares?
cluster.spawn() would be beter.
the main server should be nothing *but* a worker manager
the name "fork" is a bit of a throwback to when it was actually intended to be a thread.
but it turned out to be awful.
why not?
it's easy
even in 0.6 it has that
o_O?
yoshi?
is invisible
i made npm because php didn't have that
it's especially weird to see PHP tools claiming that npm is their inspiration for how they're doing things!
express and tako do templating and routing
rails does all three
the problem with web frameworks is that they are a bad separate of concerns.  there are essentially 3 things that they're combining, sometimes only 2
those three are: templating, routing, and data access/modeling
on top of that (templating, routing, data models), there is sugary decoration of the underlying system for common tasks.
routing, templating, and data modeling are easy!
the *sugar* is why people use it!
and i certainly don't want clever software.
or zero at a time!
:D
no beerbot in here?
or you can do .../tarball/commit-ish as well
the #hash is a commit-ish
but with the hash, you can even do #master~3 to go back 3 commits from master
sure
that works, too
and *only* the code you'er getting, not all the history
and the tarball is compressed already
fetching the tarball is probably a bit faster, though, since it's always a fresh checkout
100 loc seems about the "right" amount of code for a node module, i'm finding.
go much past that, and it's too easy to spiral out of control
that's a comfortable amount of functionality, most of the time, at least imo.
too much smaller than that, and it either doesn't do much, or is overly golfed
(not including test and readme, obv)
100 loc isn't all that terse, really
and most modules are best as a single js file, package.json, readme, test
just like, per js file
haha
have you seen doppio?
seems pretty snappy to me
russfrank, drderidder: iriscouch (aka JasonSmith) has a bunch of automatic robots that monitor things to log and restart when there are certain types of errors.
it's probably a bug somewhere, but if it tripped a restart, then it also emailed him and logged it, so i'm confident he'll fix whatever it was :)
their stuff has really gotten nice.  used to be, you'd have to track down a human to kick the server :)
https://github.com/isaacs/npm/issues/2405
crap
one sec...
:
:)
JasonSmith++
awesome
sweet
anyone wanna review? ^
tests still pass, and `make test-gc` added
so now we have a place to put "I think this leaks memory" type tests.
;P
also doesn't post rebuttals to ranting bums at the bus station.
is poking fun at you, implying that you are ted dziuba
:)(
much more stable
probably 0.2.19 or something
er, one major, oneminor, i guess
SIGUSR1 is used by node.
leaving you SIGUSR2
child.on('exit', function (code) { if (code == 1337) console.log('child is eleet haxxor')}
process.exit(1337)
child.pid
in the process do process.on('SIGUSR2', function () { process.exit(meaningfulCode) })
(in case your battery dies before i have a chance to tell you)
actually, it'd be awesome if libuv had that
since it's a common system programming requirement and all
what are the cool kids using to sign their SSL certs these days?
has
node debug foo.js
sometimes the best thing a debugger offers is just forcing you to read your code line-by-line
np :)
sorry, i thought you meant package up for the browser in a npm-ish way
but it's close
Test, please: http://nodejs.org/dist/v0.6.17/node-v0.6.17-RC0.tar.gz
ok :)
shrugs
*1.1.21
i'll make a node 0.6.17 RC1 when i get back from lunch
published as 1.1.20
thanks!
there it goes...
oh, found the link
santa clara.  too far for me :)
i was thinking if it was in soma or something i'd swing by
all those configs have to be scoped to the registry
*idea
BECAUSE THAT IS SAFER SOMEHOW.
mmm..  no.
since it'd be BADASS
$ npm view express 2.5.9 engines -s
{ node: '>= 0.4.1 < 0.7.0' }
$ npm view express@3 engines -s
express@3.0.0alpha1 { node: '>= 0.5.0 < 0.7.0' }
express@3.0.0alpha2 { node: '>= 0.5.0 < 0.7.0' }
neither does express 3.x
$ npm view express@'1.0.7 || 1.0.8' engines -s
1.0.8 said <0.4.0
express@1.0.7 { node: '>= 0.2.0' }
express@1.0.8 { node: '>= 0.2.0 < 0.4.0' }
so, 1.0.7 said ">= 0.2.0"
so, as far as npm knows, express@1.0.7 is the highest version number that supports node 0.7.9-pre!
or even master.
or get access to private repos
starring is going to be an early feature
there will be a little star on each package page.  if you're logged in, you can click it to star a package.
;P
i'll get that in the readme, too
oh, i dont' have a link to the spec in there, do i... one sec
oh, nice
but it must be beautiful.  that's a design requirement :)
i see.
i've tried irssi, but... i dunno.  limechat is so much more beautiful
oh, god, jslint.
won't start.
i think this sorta works
pushing the _design doc makes all views super slow until they re-generate
PUT the design doc to /registry/_design/blerg, then HTTP COPY what, exactly?
instead of half-documented (incorrectly, at times) in 18 different places on the internet.
is a superfan of php.net
k
neat!
iiuc, i could actually use that in npm to make the publish 100% atomic, even if i didn't go the multipart route
interesting
(of course, i could just do the multipart stuff)
heh
i may have even read it, and said, yeah, that's a great idea! and then just forgot it at some point.
hahah
oh, you weren't there, huh?
i thought you were intentionally referring to that time when he did that.
right
just flip through the revs to the spot you want, then slap it on there
yeah.  so... that'd also make unpublish super easy.
it's not git revert.
of course, it'd also unpublish every version since.
or only use it if it's the latest version
right
so maybe `npm rollback` would be more appropriate as a name.
yeah, screw that
*`npm test`
boom
but production installs won't need to get those things
your tests will require('jasmine-node') locally, along with underscore and backbone
what is sockjs?
:D
np
maybe we didn't land that.  i think there was something in libuv to support it
but really, the best would be, at run time, to say "Go to http://milani's/hosted/chrome/binaries and install one", and exit with an error.
:)
bundling pre-built binaries in your package.tgz is not so great.
but if there's a way to give a good user experience while following the rules, then that's best
but like, that doesn't mean ignore the rules.  it means, don't use the rules to justify bad experiences.
so, take notes :)
ok, have fun :)
gonna send email soon.
    case "registry.get":
  switch (req.cmd) {
callresp(function (req, cb) {
(just one owner, not many ;)
but 0.6.17 is better anyway :)
hm, on further investigation, 0.6.16 had the fix as well.
memleaks
sorry to bug you but I got a quick quick npm question if you have a sec
besides SubStack and a bunch of hippies
what's in berkeley?
best guess.
FOR SOME REASON APPARENTLY
minds modifying global objects in the browser.
sometimes it's a few steps, but at least they're steps you can see.
;)
can't type
e(nice
and easier to read
*for a band
and a lot of relevant keywords
but instead of putting up posters and graffiti...
or some kind of stealth street-art troupe
they'd write blog posts on the sides of buildints
with high SEO value.
*incidentally!* i did once upon a time try out having a package.json file in node, and install node with npm
except that you need node there already
it sort of works.
but this is clearly a loophole, and will confuse newcomers.
but maybe if i'm about to publish something, it should dial it up
right
that's just silly
almost like loglevel but just for json reading
yah, but like, misspelling keys?  probably not relevant except when publishing
any plans to let users define custom scripts in package.json?
dtrejo++
yes.
and npm should just use that
usually i use "script": {"test": "whatever"}. about 2 weeks ago i wanted use "test-smth" and tried npm test-smth but it didn't work
*yes
does the http security vulnerability exist in the latest stable?
no, never ever ever busywait
sha0coder,
Raynos, context: I'd be surprised if the JVM was significantly faster than v8
but not :port/foo.js
or /foo.js
knew it was a good idea to +O Nexxy
ohhhh
thanks!
♥
but that's clutter
in my efforts to unban you, i'd added an explicit +v
ok, kewl
wants to make sure he didn't just devoice
it will tell you
yes
you should `cd path\to\my\app; npm install express`
the stakes are very low
call foo, then if it returned truthy, call bar, etc.
foo() && bar() && baz()
i should have called it "central" or "command-line-place" or something
i see
or pbdkfbd2 or whatever the better one is
probably wouldn't be terribly hard to just expose bcrypt in the crypto module.  doesn't openssl provide that?
:)
*fine
nono, it's fne
sure
> Date.parse('Yesterday')
NaN
i remember this being one of the few functions that was just perfect all the time, too.
yeah
it's insane
YOU CAN HAVE RESULTS WHEN YOURE DONE TYPING.
jesus!
suddenly feels a lot more hesitant about pushing design doc updates...
i gotta get on that copy trick you were talking about
fan fucking tastic, that thing
'd.efg'
'd.efg'
'd.efg'
> path.basename(url.parse('/d.efg?foo=bar#hash').pathname)
> path.basename(url.parse('b/c/d.efg?foo=bar#hash').pathname)
> path.basename(url.parse('http://a.com/b/c/d.efg?foo=bar#hash').pathname)
you can check if it's valid or not, the protocol, the hostname, etc.
what port was specified, if one was, what protocol was (if specified), etc.
url's are pretty wacky
>> function q (n) { return new Array(n+1).join('?').split('').join(', ') };  q(5)
>> function q (n) { return '(' + new Array(n+1).join('?').split('').join(', ') + ')' };  q(5)
no?
your thing depends on node-gyp?
res.cookies = req.cookies = new Cookies(req, res, { ...options... })
but, for example, restify does not have any templating at all, etc.
restify is designed for HTTP correctness and debuggability, for building JSON API servers.  express is designed for easy building of websites.
and depend on very specific connect/express features
but those connect middlewares are designed to work with the needs of web browsers.
most of them are not very generic.
A TheEmpath appears!
sorry ya twitter maybe isn't is the place for all that discussion
hola!
np
"turn npm into a cdn"?
*cdn
(to me)(
:)
but, npm's first mission is to make node development awesome.
it's fine for other people to be interested in it, and if npm is a useful tool as part of a solution, then that's great, and i won't go out of my way to thwart it.
longs for a return to mostly-html websites.
SO SHOULD SERVERSIDE STUFF!
client-side stuff should be simple and minimal.
if you're doing jade stuff client-side, think about your life, and refactor it
*html
has to restart
it'd be cool to browse file contents github-style
but none of that exists yet.
and then checked the mode flags.
but we never got around to doing that
(and is perilous)
whgich will cause it to be loaded again
may be wrong
formatted correctly?  you mean, like, the JS parses?
no.
righ
sure, but that's only good in cases where the data doesn't matter.
but "fixture" isnt' really all that stretched, or useless.
it's rather nice to know whether test data is random or specific.
wishes he'd picked a better term for that.
but it's not very high up on my priorities.  if someone else wants to write it, i'd be happy to take a patch.  it's not trivial.
it'd be nice if there was a flatten command to pull things left.
I got node-webkit-agent to work much better than node-profiler for the CPU and heap profiles.
it's a bit hairy when you have A->B,C;B->D;C->D then you get two copies of D, but they could have shared
that's where it gets sticky
especially where D is something with a lot of deps
mmm... dependency calculus…
and i usually just npm link all those things
so even if they repeat, they're still the same actual folder.
sure
well, vows and mocha should only be used in dev anyway
yeah
chilts, cpsubrian: you can also do `npm link ../the-thing` to do it in one step.
hope !== confidence
i still have hope for yahoo
billstclair, wacka: naming npm modules the same as builtin node modules is silly
but https?
cluster was sort of understandable, since it was released while node's builtin cluster was still only in the master branch
has a lot of modules with lib/ folders, just regrets it every time
utils = node_modules by a less useful name.
if it's a util, it should be a util everyone can use!
package.json it! write tests! write a readme!
there are fewer bugs, they're easier to fix, and people are less intimidated to help out
though, i find really well factored code is usually a lot easier to maintain
the bigger a program is, the more awful it is.
no offenses :)
oic
if not, meh.  sometimes the joints are not so obvious.
done
go write a patch.  it might not get into v0.8, but if it slips that, it'll be ok for 0.9
sure, i'm not opposed.
lol
no way :)
v0.8 will be out soon, it's almost done.
goes poof
feeling facetious, sorry.
yes, AAA_awright, how do you go about building binary modules on windows that rely on make, without having make?
installed it by walking.
yeah, i think you might be sol there.
*identity
>> 'does this work
>> o = {a: {b:'c'}}; n = o.a;  n.b = 'YOYOYOYO'; o
ok, great
hola
that was my impression.
it's simple, tests just the platform, and provides a lot of data about it.
that's actually a pretty reasonable benchmark, all things considered.
Go's got a pretty good ecosystem, and it's growing.
but it's not JavaScript, it's compiled.
if you care about that sort of thing.
it's designed for doing system programming.  its intent is to be another C
it's fast, but just super duper verbose.
the regular expression and string manipulation stuff is abyssmal.
.
and, i mean, they're in the same ballpark
it's definitely a clear apples-to-apples test.
yeah, exactly
it's an assert in fibers
0.6.17?
bbiab
that's why it doenst' handle buffers
trying hard not to pull a wycats
watching rauchg give a talk about npm and node.
goes back to tongue biting.
that readme thing is a bug that's fixed.
it's not that he's doing things super wrong.  it's rauchg, he's pretty knowledgible.
just.. little things.
like, a bug that's already fixed in npm that he just got bit by earlier.
hence the tongue biting :)
honestly, fixing the problem would cause more disruption than it's worth
it's not a huge problem
yes.
*do
whassup?
nice.  elizsbot is running on jitsu.  Thanks, Marak.
oh, no, it stopped it!
there we go
wait, why are there two now...
that stopped one...
all teh way up and  down :)
it's all async
kewl :)
*marked
xckd !== xkcd
$ node -pe 'require("xkcd-imgs")'
$ node -pe 'require.resolve("xkcd-imgs")'
$ npm install https://github.com/hemanth/node-xkcd-img/tarball/master -q
/Users/isaacs/dev/js/test/node_modules/xkcd-imgs/xkcd-imgs.js
works for me
xkcd-imgs@0.0.0 ./node_modules/xkcd-imgs
{ img: [Function] }
└── request@2.9.202
oh, no problema :)
but for other types of things, C/C++ memory, yes, i'ts very hard to track down
test/addons i think?
people are too confused by it.
we tried to make only very very minimal API changes in 0.8, and just make things work better, and add missing pieces.
npm publish --tag=alpha
and bigger
computers used to be WAY harder
it's coming...
yeah, i mean, it's sensitive to object iteration order otherwise
ricklarue, hillct: the node community has a great sense of humor, though: https://github.com/glenjamin/node-fib
so... there's that.
and poo-pooing new stuff has the appearance of high-status.
we're all just apes trying to boost our status.  one tried-and-true way of doing that is saying that every new thing is crap, and since a lot of new things are crap, it has a net positive success rate.
but it's ultimately harmful
so it continues.  it will always continue.
ted's a tragic figure, really.
had a wisdom tooth carved out this morning
brian ford's a really nice and smart fellow.
but no, he's no dziuba
*thought
oh, right
yeah, it was kind of hand-wavey, i though
i mean, both ruby and js have a GC, and managed memory
it seems rather orthogonal to that whole aspect of it
right
and it's (x86) probably, not <x86>
add this CA to your keychain:
or use curl: curl --cacert <(npm get ca) -I https://registry.npmjs.org/
ENOSPC is a bit cryptic, if you dont' already know what it means
it would be nice if the unix error codes had a few more vowels.
i think in some cases we print out the verbose description along with the code, but not always
hm, that's odd.  even with the npmCA cert added, it seems like Google Chrome stubbornly refuses to respect 1024 bit keys
kba, no, the key is good for 10 years
it's signed by a CA cert, and the CA cert is included in npm
but, it looks like i ought to use a 2048 bit key
right
"Json object"
's pet peave
yes.
      16
$ npm -q search jsdoc | wc -l
haha!!
i gots +F, biatch!
order has been restored :)
thanks, Tobsn
he's an odd fellow :)
yeah
np
in the next few months all such requests will be met with "Patch welcome", I promise
it shouldn't be suuuuuuper slow
maybe just slow, but not that many u's for sure
20x is yeah, something's wrong
and i think the thing that lighttpd folks were on about was caching somethingorother
well, part of the problem is that https IS just much more expensive
which we do
and it's a cpu-intensive thing
i recall comparison with Apache, where it was like 4x, just because apache was doing it in multiple threads.
milani, Qalqi: that's why fb has whole data centers
how do you make a service in linux?
upstart or something?
i've been spoiled by smf
init.d somethingorother?
it's ugly, but it works well
and an init(8) daemon
thank you, maybe I really need to just experiment. its really long time since I just experimented.. It was biggest fun :P
really nice
*you
yep :)
fears a rise of the machines
we should not have bots with op status here.
ok, chipig's op bit is removed
there was some set thing along with -b
oh, chipig is pquerna?
btw, Keith Wesolowski is a coworker of mine.
super smart guy.  esteemed mayor of Crazy Town
99% of the shit that people say about OOP is bullshit, but that doesn't mean "Never use clases", it means, "use classes if they're a good fit, otherwise don't."
here's the thing with OOP, and FP, and BDD, and most other programming fads that people get excited about:
if it's a good idea, it doesn't seem like a "thing" because it's just what you do and it's simple and works well.
but fucking haskell.
jesus.
similarly, functional programming: totally a reasonable approach to a lot of problems.
yes.
or, falling in infatuation.
the problem is falling in love, really.
not "OMG FUNCTIONS I LOVE YOU FUNCTIONS YOU ARE SO PURE, I'LL DIE FOR YOU!!!!!!!!!!1111111"
they're like, "get the job done, move the fuck on"
this is why i really like languages like php, and javascript, and bash, and c.
but it's still just a pita.
erlang is less crazy than haskel
same with erlang
anyway..
there is a fair amount of this kind of insanity for node.js, too
"wanna write a fast server?  pour that magic async goo all over it, and BLAZOW! super fast!"
i think of it as the "magic goo" approach to software design.
but that is in the plans.
no, not yet.
it's gonna be epic
Test, please: http://nodejs.org/dist/v0.7.9/ or https://github.com/joyent/node/commit/782277f11a753ded831439ed826448c06fc0f356
if the docs still mention it, then it's a mistake
maybe
my linux uses 4.6.1
k
none of those are release blockers for an unstable.
thanks, RLa
is feeling very incremented
in the path
or run the curl|sh with node 0.4
yep
is feeling very incremented
in the path
or run the curl|sh with node 0.4
yep
probably because they're running 32-bit node in a 32-bit cmd shell
or process.arch or something
but reporting the machine architecture is extremely difficult to get right across platforms, especially on windows and on sunos.
it's wildly complicated.
yeah, that reports the architecture of the node binary.  it'd be better if it didn't.
if you want 64-bit stuff, you need to run everything 64-bit
yes;
the first cmd can fail, and it'll still run the second cmd
or whatever
what's up?
$ npm config get userignorefile 
/Users/isaacs/.npmignore
might get close/end, might not
'close' means "the underlying thing is disposed of"
closed the fd, etc.  but it's optional, and app-specific
righ
that kinda thing
unrecoverable, weird, etc.
sure, maybe that
the kind of thing that "never" happens
child_process.spawn(cmd, [args], { stdio: [0, 'ignore', 'pipe', 'ipc'] })
this is awesome, guys ^^
you are going to love this.
makes customFds look like amateur hour.
into npm/node_modules
    at ChildProcess.emit (events.js:70:17)
    at ChildProcess.onExit (/usr/local/lib/node_modules/npm/node_modules/node-gyp/lib/build.js:209:23)
    at Process.onexit (child_process.js:398:5)
    at maybeExit (child_process.js:362:16)
  SOLINK_MODULE(target) Release/obj.target/nodeproxy.node
ERR! Error: `make` failed with exit code: 2
that bit
i prefer defaults to be falsey, since 'undefined' is falsey
but wait until it stats whatever the thing is
(was testing with a folder named 'html')
sorry, one last question about tar :)... does this "tar.Reader()" https://github.com/isaacs/node-tar/blob/master/examples/reader.js#L5 still exists?
that's assigned by the OS
axss, context: there's also the `npm search` command, and the `npm view` command, both of which are quite helpful
k.  known issue.  will be fixed on the next release :)
ah!!!
i think i found why the npm cache is such a pile of assholes sometimes.
total jerk face
but you can login
still no / homepage
w00t https://new.npmjs.org/keyword/ajax
it is a lie
the search does nothign
whoops broke it somehow...
and there's a lot more to do
milani and visnup helped a bunch
the mvc pattern of it is starting to take shape
and most "MVC libraries" aren't.
for sure
oh, interesting: URIError: URI malformed
(sorry for the html3.2 design on those profile pages)
add some stuff there, please
login with your npm creds
making it completely
w00t!
oh, wild.
right, so now i see 6-934f7d75b64f107af83c1696b2d57400
ok, there it is
it's an actual key
rather than a random string
yeah
maybe in a few generations, we can do that :)
'%124Vx%9A%BC%DE%F1%23Eg%89%AB%CD%EF%124Vx%9A'
'123456789abcdef123456789abcdef123456789a'
> new Buffer(unescape(s), 'ascii').toString('hex')
> s = '%124Vx%9A%BC%DE%F1%23Eg%89%AB%CD%EF%124Vx%9A'
oh, lovely :)
a lot of people have that delusion
heh
maybe he's workign in a branch and is under some idea that you shoouldn't release code until it's "done"
wild guess: /usr/bin/npm
bash caches executables in memory
np
hehe
takes a few reps sometimes :)
test, please: http://nodejs.org/dist/v0.6.19/node-v0.6.19-RC0.tar.gz
it's kinda nice
uses the built-in cluster
and it'll keep them running
and restart them on sighup even
hm... wonder who that was, then :)
hopes so anyway
seen a lot of this
about to drop
test, please: http://nodejs.org/dist/v0.6.19/
if you're looking for useful modules to go build, these are some good ideas: https://github.com/isaacs/npm/tree/master/lib/utils
clever :)
it's fstream-S3
not fstreams-3
ohh, i get it
er, not prebuild, sorry, prepublish
you can still test with the cs in developoment
anything goes on 0.0.0
but then it'll compile to js before publishing to the registry
whatevs, it's early, though :)
transcoding video makes compiling node look like a piece of cake
should really check out this transload.it thingie
*exaggerates
3 lbs is a big diff at that size
he used to be 23 before he went on a diet
yes, i squashed
it's insane to *start* that way, when you have one page, and it could all be much simpler.
it's not completely insane.
:D
anyway, it is too nice a day to be indoors bickering about how to make websites with people who about 90% agree with me anyway already.
but i find i end up there a lot
let's do that when the sun is down, instead.
have a good day, noders!
i'm gonna go ride bikes with the gf :)
?
it just means that the thing you use should do one thing, not a zillion things.
i@izs.me
it's coming..
also v0.8.0
but first, 0.7.10
testers welcome: http://nodejs.org/dist/v0.7.10/
the RC tells you it's just a candidate
yeah
but it's not done yet
v0.8 puts back a bunch of stuff that v0.6 took away
when we will put aside our petty module system and obtuse json in favor of even more elegant tooling
either that or just start using clojure or go or some shit.
evaporate the ties that bind us to this crude matter, and allow our programs to become the true aether of the gods themselves.
i dunno.
but the word "binding" kinda struck me as a bit odd in context.
oh, i see what you mean.  sure.
there are a lot of libraries taht are accessible via a c interface.
i'm more thinking about all the ceremony that goes into "package.json" and "npm install" and require("blah")
it's better than php, but i mean, we can stop kicking that horse now, right?
kinda sucks.
that's a lot of ceremony
that's a lot of work.
yeah
i'm just noticing that i'm annoyed, and trying not to get too used to it that i never fix it.
it's an ok way to address the needs, but i'm not sure it's ideal yet.
not even vaporware.
this is still at the "fantasy" stage of development.
true.
and can we make discoverability easy enough, and utility high enough, to get even smaller?
but especially lately, i've been thinking, you know, a "module" or a "package" is kind of a big chunk to have as your basic unit of code.
we've made it small, but have we made it small enough?
will these and more questions be answered after the break?
i don't feel like i know the problem well enough.  we're just now at the point of noticing that there is a problem.
fucking hate that thing
then i can finally kill PromiseChain
dates back to the first non-bash version of npm
do that
it's soprano's time
that proto-list error is weird, though
yeah, i see this
kewl
np
it's fast, and easy to install
How do you do that thing where you put a comment in a file and it sets stuff for vim?
anyone know?
that's why it wasn't working :)
huh.  not in the tarball.  that's... weird.
ok, so, tarball...
fixing, thanks.
fuck.
feeling dumb.
gotta fix the binaries, too.
grrrr
now
one sec..
true that
*latest from git
*./configure --prefix=/opt
can't type, sorry
er, ./configure --prefix=opt
*thanks
er, mc: ^
dont' share dirs.
hm.
nonono.
shared from windows or a unix?
still flaky, iirc
that will fail a lot.
oh well.
what's the bug?
SL is simpler for simple programs.
but it's much much harder for non-simple programs.
i saw rimraf written in SL, and then tried writing some other stuff with it, and it was just too hard to know what was happening
that was my takeaway anyway
it's not?
req.socket.on("disconnect") maybe?
      req.emit('aborted');  <-- when the request is forcibly closed ahead of time
    req.res.emit('aborted'); <-- when the response to a request is aborted (you are the client)
(you are the server)
(also, this is all in master that i'm speaking.  0.6 is dead to me.)
but if the server forcibly aborts... i dunno
oh, then you get res.on('aborted')
yeah, it's 'aborted' all across the board
*think
that's a different error, i thin
.. arr = [1,2,3]; delete arr[1]; arr.length
> arr = [1,2,3]; delete arr[1]; arr.length
guess not
v8> arr = [1,2,3]; delete arr[1]; arr.length
wow, no js bots here.
have fun
chances are your program doesn't actually need to know that ;)
gotta run, sorry
epoch nanoseconds would be hard.
hahah
heh
but you'd lose some precision, and that's the whole point of process.hrtime.
:)
and i'm not sure how we'll go about doing that, or if we'll decide it's even worth doing.
but i mean, meh. it's just javascript.  we'll use some programming on it.
oh, cool.
we don't currently track the nextTick stack depth.
yeah, it's just the event loop starvation issue.
another substack module :)
oh, no, it uses buffer-equal
i don't know why Buffer.concat took us so long to pull into core.
oh, man, i've written that loop SOOOO many times, too.
someone could go through and remove probably 50 lines of code with that.
every damn time!!
ok.
takes off pedantic hat
i'm confused.  i'm silencing EADDRINFO errors using error.code as you said (code here http://pastie.org/4081513 ), but at runtime i get uncaught exception{ [Error: getaddrinfo EADDRINFO] code: 'EADDRINFO', errno: 'EADDRINFO', syscall: 'getaddrinfo'
for the love of the newbs
i dunno.
so it resolves TO the linked path, but FROM the real path
A commit message that demands a sacrifice ^
dammit i always do that
http.createServer(function (req, res) { .. })
i was using mikeal's request.pipe to/from couchapp and all works great ... but now i would like to save that image for subsequent requests ... so how would i do that where i get the response in a call back function and then save the file as an object in memory and then do something like response.write(body) if body is my image that i get back ?
he and substack are the most prolific authors in the mode module arena, definitely
          ^
    throw err;
$ node asdfasdfasfd
oh, well, that's bizarre
is evil
hey, anyone know what happens when you publish a site to nodejitsu that has bundled node_modules in the git repo?
git push deploys are bad, imo
but git is hands down the best content-tracking/snapshotting tools that devs are already using.
but, you should absolutely check in your node_modules to git for anything that gets deployed.
despise space commits
git push deploy is only lame because git push doesn't push if it already has the revs, so you end up with space commits in practice.
giant shoes.  tiny cars.  red noses.
if had good service deploy endpoint, give commit-ish, would be good for git based deploy.
no.de has node-service-deploy, need use ssh.
not gon talk clown next month, that sure.
maybe talk loonie while longer.
beiber has voice like song bird, and haircut like hipster lesbian.
hahahaha
not seem your style.
thinks maxogden have bieber feber
:)
ahh, yeah :)
that's brand spanking new
$ TMPDIR=/tmp npm install sax -s
$ ls -laF /tmp
lrwxr-xr-x@ 1 root  wheel  11 Oct  7 22:18 /tmp@ -> private/tmp
sax@0.3.5 ./node_modules/sax 
can you get me an npm-debug.log file?
what version of node?
what version of npm?
er, recent copies of node.
k
maybe EPERM or EACCES or EEXIST
sure, take your time.
this is what id' ask to track down the issue, though
what does `ls -laF /tmp` report?
you shouldn't get EUNKNOWN from that, not with recent copies of npm.
but the npm-debug.log should have exactly what i need.
or rather, that'll tell me where in teh code it's failing, but the dtruss output would help know why.
hey, guys: https://github.com/isaacs/npm/issues/2267
jitsu is pulling in an old version of npm.  it's causing all manner of mahem.
require-analyzer is pulling in the old version
$ npm view jitsu dependencies.require-analyzer
$ npm view require-analyzer@$(npm view jitsu dependencies.require-analyzer) dependencies.npm
0.4.0-2
>= 1.0.100 < 1.1.0
with the hyphen
Hey, folks!
can someone shoot my eliza app in the face, please?
$ jitsu apps list
path.existsSync is deprecated. It is now called `fs.existsSync`.
0.8 will be stable in a few weeks.
kk
yep
yes
yes :)
hahah
it's silver already, man
it's time to fix it
it's already stopped
ps aux | grep "node bot.js"
then kill those
sweet
*might
i see
if that'd kill the child proc
oh, it migh
then you could pretty easily kill all the processes in the process group when you stop an app
I DID!
spluh... i'm specifically referring to an actual situation...?
in the sense of being a lot of stressful busywork, and when it's over, you couldn't be happier.
it's going to be a nightmare.
oh, sweet baby jesus yes
Hey, guys.  no luck tracking down that elizsbot zombie?
it seems like it's still live
Hey, do you guys use the npm --logfd config at all?
AvianFlu, mmalecki, indexzero ^
about to rip it out
and that was back in the 0.3 days
i think i added it specifically for indexzero, but he never ended up using it
i'ts vestigial
Hey, guys.
same with https://github.com/isaacs/npm-registry-client
that might be relevant to your interests.
add me on voxxer! hit me on voxxer!
this was more a general "all about all databases" show.
Hey
what do you guys want to hear about today?
different podcast :)
we should talk about owls
YES.
                     //  _`\/`_  \\
                    / ^ `'~  ~'`   \
                    \ '.   \/   .' /
                    `.  '.    .'  .'
                    |\  \_/||\_/  /|
                    ||  /\O||O/\  ||
                   /  _-^_~ -^_ ~-  |
                   \ `-._......_.-` /
                   \_/;-.,____,.-;\_/
                   __              __
                   | / ^_ -^_- ~_^\ |
                   | \  ^-~_ ~-_^ / |
                   | |~_ ^- _-^_ -| |
            ==========(_(_(==)_)_)=========
           ==================================
hi
going to be a few minutes late here
sorry
hola
actually tries very hard to never leave oakland unless very necessary.
stacks every sub
subs every stack
yo
eeewwww
it's not so bad as a library
kewl
good plan!
haha
(in 2 hours and 11 minutes)
12 noon pacific time
Big shout-out to http://vom.com
$19.95 per month or $53.85 for 3 months or $95.70 for 6 months
All V.90/56K Modem Lines
All accounts include 3 email accounts and personal web page storage
omg, i seriously wanna do a full-on sponsor spot for vom.com
as a tree that was large as a child, and now looks so small, though surely it has grown.
YOUR PULL REQUEST AWAITS, SIR!
m
oh, nv
?newrevs=false == magic
but sometimes sneaky weird un-effective magic
working now
yep
i just deleted the existing public_users doc
lmk if you run into issues with it
:D
and build an index page of some sort
gonna get the profile pages prettied up in the next few days
good morning
starting soon
yes
Hey guys
This website is pretty confusing, seeing as how React is not actually in any way related to Node.js: http://nodephp.org/
XYZ
PREPARE ZIG
TAKE OFF EVERY ZIG
HA. HA. HA.
INADVERTENTLY!!
YOU KNOW WHAT YOU DOING
back to work
hahah
ok, i think i have a limechat theme that i can live with
whoa
eats chinese food
dude!!!
limechat shows previews of youtube links!
i handed out some at a node meetup once and then saw one in a bart station a few weeks later.
that was hugely validating.
the next time someone tells me ruby is simpler than javascript, i'm going to send them this: http://innig.net/software/ruby/closures-in-ruby.html
2 different kinds is bad enough.
i just hope it's not 7 different kinds of functions.
sadly, i think javascript will have blocks in the next 5 years.
1 kind of function is ideal.
arc is a dsl for creating hacker news.
node is a dsl for creating memory leaks
and then being annoyed that i have to figure out other ways around it
i do really want WeakMap
i keep finding uses for that.
lol
but it's a good and useful thing
right
weakmap *does* add semantics
yeah, it's kind of shit.
did you see that?
i DID really like jashkenas's class proposal.
i do'nt like the other class proposals much.
jashkenas's was nice because it's just a plain old expression, ultimately
meh.  you do'nt ever *have* to indent
:)
business that shit all the way out of town
grr
you own that shiznit
you shoudl get github to boot em
there are so many node rooms now, and i lurk in so many of them, and see the same people in all of them, i find myself forgetting which one is which.
WHENEVER I FORGET WHERE I AM I JUST YELL AND IF I GET A YELL BACK FROM A ROBOT THEN IM HERE
yeah
yep.  here i am.
i'm taking a page from hotdogsladies' book, and writing slides that don't make any sense whatsoever apart from the talk.
we'll see how this works out.
"<very sensible thing that maeks sense and is awesome> <code sample and clear explanation> <this is a unicorn> <more code samples>"
*talk
that's my impression of a substack talk.
yeah, except someitmes yours don't make sense even with the tal.
i've found that all images or all words is the way to go
if you can't do all images, don't do any.
yeah
your talks approach all-image
(code counts as a picture, imo, since it's not words)
i've tried to strive for talks where the words are another voice, which is perhaps complementing or mocking the main point.
sucks for the audience, though
there've been a few talks where i know that they'll get more traffic from people who didn't see the talk, so i just write it all in there, and do my best not to read it.
yeah, i saw that
my favorite part is where the guy says, "Magic.  Got it"
yep
nodejam is a competition?
what do you stand to win?
commented.
"npm is the standard library"
hahaa
i suspect we'll see another wave of "put XYZ in core" coming soon.
i've heard that before.
and it's cut down a *lot* on newbie pain.
installing npm by default is a good compromise that lets us not have to put the npm client in node-core, i think
do ~ od is way awesomer than {;}
we should replace the {} blocks with "do od" though
like, i got this loop, while i < 5 for i from 0 to 5 by 1, doooooood!
read properly, it's pronounced "duuuuuude!"
but they were nicely unified.
j/k algol's loops are dumb.
pre-C
it's not just the parent of the the C-style languages, it's also the parent of the sh-style languages.
the granddaddy of them all
sh and c are like Isaac and Ishmael, the warring sons of the A(lgol)brahamic tribes
i think if you'er going to let "i from 0 to 5 by 1" be an expression, it should resolve to [0,1,2,3,4]
but i'm guessing you could do foo([i from 0 to 5 by 1])
or something like that
anything we add has a very high likelihood of turning out to be yet another with or eval
because it's bullshit.  js is done.  it's 90% awesome, and kind of shitty, but whatever;
i actually AM opposed to adding features to javascript.
i'm against what so many js'ers are calling "forward progress"
language design is masturbation.  fine, healthy, and sanitary.  but really, don't do it in public.
(note that the lack of hygenic macros has not prevented this in ruby, but it's highly unhygenic)
and then everyone could masturbate in public all over every program.
if JS had a less complicated syntax tree already, then hygenic macros would be an option.
like, that's the only kind of thing there is
with lisp, a data structure IS an ast.
so, you HAVE to invent a little sub-language to do anything, because "invent a little sublanguage" is what functions are.
uglify's is the nicest, imo
but it's still waaaayyy too painful to type out AST by hand.
or write functions that transform the functions in your program in deterministic ways using AST manipulations.
and, in fact, in JS, you *can't*, because the language itself does not let you manipulate it's ast directly, and even if you could, it'd be hideous, because of closures and hoisting and a bunch of other things.
it's too complicated a language to properly do hygenic macros, and, imo, **that's an extremely good reason why it wins**
hat's the ES-next google thingie
god, i hate code.google.com so bad.
how do people use this thing?
i think traceur is js, isn't it?
there's an npm package for it, i think
and you're like, "no, browse, just show me", and then you have to dive into trunk/blahblahblah
it's nuts
it's so hard to find the code.
then when you do, it's like, "run this svn command to see the codes"
github <3 <3 <3
srsly
adn express once in a while.
and i'd like not having to declare it as a dep.
and npm.
destructuring i'd totally use
dnode, too.
you know what? i'd also use mkdirp if it was built into node.
WHERE DOES IT END!?!?
oh, that reminds me...
and is perfectly healthy for dogs to eat.
as long as the cat doesnt' have parasites or anything.
but dog trainers are usually already pretty well past the "gross aversion" problems.
some dog trainers use it as a very powerful treat.
which is gross, because it means you have to walk around with a bag of cat shit on your belt.
i learned this when i had a dog, and the trainer told us that, in fact, one can purchase cat feces for this purpose, if you don't have a cat to grow your own.
ahh
i thought //@sourceURL could come anywhere in the file, even at the end?
that's unfortunate
you can't put the Function() baggage inline, eh?
like, rioting in the streets.
or at least, they would, if they weren't too lazy.
people are TERRIFIED.
this is great: https://twitter.com/#!/herpderpedia
but they are definitely whining about it on twitter, that's for damn sure.
wee! i just got a bit of recruiter spam, and used it to get a written agreement to email her reps and also ask everyone she contacts today to do the same.
jsconf tix go on sale in 5 minutes.
everybody javascript will be there.
i'll be there
or at least, the first 50 who buy a ticket before they sell out.
if we all don't get jsconf tickets, i propose that we get drunk in oakland instead.
80 earlybirds sold out in 4 seconds.
less, actually.
more like 2 seconds.
if next week is anything like today, we'll have approximately 5 seconds to get a ticket.
also, you have only a few seconds to get a ticket.
at least, if your employer won't reimburse.
tax deductbiel
retweet every tweet! https://twitter.com/#!/nodejs/status/160210072805453824
hello
oakland is in a pissy mood today.
very inconsistent
most buggy part of any web browser, actualy.
or that
and go to /joyent/node
and i think, "wait, who's iovent?"
because it says "forked from iovent/node"
github's latest redesign always confuses me whenever i look at my node fork.
then i click it
did you catch yourself thinking in loonie at any point?
oh, nice
"Are you ok?  You sound funny."
i started having a lot of difficulty with conversation when i was deep into it.  but mostly, i was talking with ryan about node stuff, so it's basically his normal anyway.
marisa kept asking me what was wrong, though
bullshit.
whatever.
it's fetishistic weirdness.
oh, it's almost that taboo
some people like to bang goats.  long as the goat doesn't mind, and it's in private, who am i to argue?
NOT IN MY CHURCH!
but whatever.  i'm all for gay marriage, and some people feel the same way about that as I do about BDD masturbation.
the minute you start putting magic pixie bullshit in string arguments, it's a problem.
but i can respect your status as vows apologist.
i know how it is.
in many ways, i'm a javascript apologist.
vows has a right to a good defense.
haha
SubStack++
agreed.
but, oddly, the "lighter" alternative which is most similar (nodeunit) is less flexible, because you *must* export your tests, rather than building them up from an array or something dynamically.
i think even tap is a bit too pushy.
nice :)
only slightly terrifying.
such a magnificent emporium, though
WHO IS GOING TO THIRSTYBEAR RIGHT NOW FOR FREE DRINKS ON JOYENT?
whassup oak land
(the room, not the software)
it's like #node.js back when #node.js only had 20 people in it.
you guys, you know what's awesome about #stackvm?
otherwise this'll just be another support channel.
we need those... but.. it's nice to have this, too.
SubStack, maxogden, jesusabdullah: is the picnic in full effect?
no, ry is still bdfl
the king hasn't changed, he just appointed a PM
appoints maxogden Minister of Beardliness
lol
lol
IT IS IMPOSSIBLE TO BE MORE THAN THE MAXIMUM AMOUNT OF MAD SCIENTIST WHICH IS WHAT SUBSTACK ALREADY IS!
YOU CANNOT INCREASE BEYOND 100% BECAUSE THAT IS WHAT 100% MEANS
SMILING FACE WITH OPEN MOUTH AND SMILING EYES
i think you're thinking of crown sourcing
it's a part of clown computing
crown sourcing is when you have each clown in the cruster do a little bit of the work.
exactly
in the social nets.
it's all about bigdata and m4m computing
to the chinamarket
where they sell websockets
m4m is like m2m, but twice as much, and totally hot.
it's a virtuous cycle.
so all the clowns petition the king, get sent to work in the chinamarket making websockets for the craigslisters.
synergy.
100% organic
oh, totally
BEHOLD, THE OG DEN!
you know that iconic photo of steve jobs sitting in the middle of a bare floor with a cup of tea and a notebook?
should be an appetizer
kokum first?
not close enough
*go
Method Chainsoo
derp, i've made korma in my kitchen don't know why idn'dt think of that one
there ya bo
"Would you like somecoriander on that?"  "Only where necessary."
nice, dude
HELLO IS IT NAPTIME YET?
but also, the sabbatical.
that's important
the best ideas happen when you're not rushing to finish something.
or at least, the best ideas *start* when you're not rushing to finish something
oh, nice
boop beep
i would fight hard at Joyent to get a budget to purchase such a service.
like, a cross-platform buildbot that gives graphs and stuff, and isn't a pita to maintain.
but it's like 10% of what node needs, and completely unhelpful for internal stuff
heh
that is such a huge pain point for every project.
travis-ci is awesome, and i love it, don't get me wrong.
but like, i don't care about browsers.  i mean, that's a huge pain point for a lot of people as well, of course.
i need to have it run test, consume and report the results, and run benchmarks and show graphs with the results of everything.
on every git push
but really, i don't even need any kind of gui.  i just need the tests to run on windows, sunos, linux, and os x
and we have lots of infrastructure at joyent, obviously.  in fact, SDC is probably somewhat ideal for your use cases
but it's all the wires and knobs that are missing.
sdc is smart data center.
it's our product.  basically a set of APIs and tools on top of SmartOS so that you can manage a data center.
srsly
yeah
and i expect that node will use it forever.
travis has a very easy opt-in mechanism, and a lot of goodies.
but like, i need to track benchmark performance and test coverage across 4 operating systems.
for so long, anyway
hahah
i dont' know how ryan did this without going insane(-er)
but it's kind of jenky
it's right there in the name
jenkins is even more jenky
also, node's buildbot has fallen into a state of woeful disrepair, unfortunately
i spelled with an "e" to setup the jenkins joke
huh?
i don't know what duckduckgo is
like the kids' game?
oh, right
that's duck duck goose
lives near a bird sanctuary.  if you've ever been near a bird sanctuary, you would not want to name your search engine after it.
don't really remember how that code wors
I PULLED OUT THE POWER CABLE BUT MY NODE PROGRAM STILL CANT RESPOND REQUESTS HOWCOME I ALREADY LODED JQUERY
THE FERRY LEAVES AT DAWN
ATTENTION STAFF
WHAT IS ALL THIS NOISE COMING FROM I CANT HEAR MY FEET STINK
A@LARGE@SUBSET@OF ASCII IN THE 1.34 RELEASE
hhahha 
hoped to get some bot-on-bot action goin
oh, she doesn't work when you scream at her.
too bad.
hahah
omg yes
you still wanna buy it?
that's... kind of hot when you put it that way.
i don't think i've ever been there
i have good news for you1
kewl, i'll stop by probably
my bed can be yours this week.
sweet
i remember that one!
instead of always "BITCHES DON'T KNOW 'BOUT MY INTENSIVE AERIAL BOMBARDMENT"
whoa, that's a long trip
yeah, i'm gonna probably bail on cafe madrid.  it's getting late, and i kinda wanna just play with my new iphone toy :)
kewl
new bed arrives friday, so just lemme know when you wanna get it
sweet
hm, seems to not be loading.  is oakland marching right now or something?
yikes
SUPERB OWL YOU SAY?
             `m-m`
            )\___/(
            ,     ,
            {/^^^\}
            {|~~~|}
           {(@)v(@)}
SUPERB INDEED!
YOU CAN DO BETTER
pshaw.  mildly amusing at best.
yep.
implementing file system globbing that handles ** is remarkably non-trivial
i should learn how to be less obsessive
maybe
I HAVE TO RECURSE OVER EVERY GOD DAMNED FOLDER IF THERES A **
so, i have now an algorithm that yields 100% identical behavior to glob(3), with a minimum of syscalls
then i'm like, "Oh, shit, right..."
or is it just tricking my brain
nice
that might help.
there's a way to listen when your state is changed.
the instrumentation gets fugly when it requires pop tarts between playlist changes.
maximization goes wobbly and desires hot parts extreme gay exchanges.
It's interesting what happens when putting soundtracks to different videos: http://www.youtube.com/watch?v=BU64w0Cf0ME&feature=related
hi
THERE IS A NEW VERSION OF NODE!!
LETS REMOVE IT AND SEE IF IT BREAKS ANYTHING IT PROBABLY IS OK!!
HELP ME O STROMBOLI JONES! YOURE MY ONLY HOPE!
"Type signatures specify program correctness"
lolz.
THAT IS WHY C PROGRAMS HAVE NO BUGS
I'M GOING TO SLEEP SO HARD LIKE A KING ON A MATTRESS OF LUSCIOUS PNEUMONIC FOAMS!
twitlast
this is less interesting than the usual #stackvm banter.
i like how the logo tells me it's built on node
function arity is not a property that should ever be checked in javascript.
ugh...
every time i've forked behavior based on function.length, I've come to regret it
he said it in here
hahah
i'm sure
but express's is pretty similar to how request talks to the underlying http.request method
ie, passing your instance as a config object
the tako/express pattern is not so bad.  i like tako's approach better.  less magical.
but this "strip off the handlers and then call them manually" business is just offensive to my sensibilities
i dunno
right
that's what you do when you have no ability to change things, like in a browser.  but we're beter than that.
yeah
and then you have to take that upgraded connection and deal with it
it's kind of a pita
the problem is that the upgrade happens on the server, not on a given request
client-side js and flash bits.
i think the issue is that socketio actually has some static stuff to serve.
I actually do --without-npm because i like to keep a linked copy rather than the one that node installs.
hooray!
nice
twitlast
observe the scarcity principle at work!
IN DEATH WHITNEY CAN FIND NEW STARDOM
and that her music is much better than it actually is.
starting today, everyone who ever listened to whitney huston, and dint' hate it, will need to listen to her much more than they did yesterday.
their desire to listen to her music will convince them that they liked her much more than they actually did.
304 is just a response code.  it doesn't necessarily mean that the requester is using a cache
just 100% of the use cases.
but that's mere empiricism.  in *principle* you could send an If-Modified-Since just because you don't like old things.
actually, a message queue is the go-to use case where you send an If-None-Match and If-Modified-Since, but don't actually have anything in cache.
i could be pulling messages from sources, then relaying them to their destinations, and just keeping the etag, not the actual message.
yeah, 5 is fine.
use the internets to give me details.
 maxogden, SubStack: Whoa, where is that!?
oh, sweet
cache clearing doesn't clear search index by default, because that's almost always not intended, and makes searching slower.
er, "clean"
twitlast
SEARCH ALL THE THINGS
YO DAWG!  I HEARD YOU LIKE JAVASCRIPT SO I PUT A VM IN YOUR VM SO YOU CAN HACK WHILE YOU HACK! -- CAJA
it's a street in nyc!
middleware for connect?
oic
union?
wait, don't tell me
what's that?
kewl
not union station, because that's in New Haven
so that's like nodejitsu brand express?
tristate ftw, man
you should say that it's named after Union Station
will always be a connecticutian
I WILL GET MY DEGREE IN BOVINITY
have you ever seen Clash of the Titans?  the new 2010 one?
it's somehow even worse than the old one.
:)
ahh
wild.  when search returns no results, it returns a result.
twitlast
HTML M4M INVENTED MODEL BIT DATA CHINESE MARKUP PEER IN PEER
HTML M4M INVENTED MODEL BIT DATA CHINA MARKUP BEERTOBEER TORRENTIAL DOWNLOAD CDN WEBSOCKET
fake buzzwords are even better than real ones.
SIR THIS BUSINESS DOES NOT CONCERN YOU, PLEASE RETURN TO THE LAVATORY.
ok, i'm gonna go merge that pull req.
or, rather, failing tests in general...
happens on node master, too
interesting.
yeah, it's super weird.
that's not even a socket or anything.
        var c = charm(stream); 
this line makes it hang, even if you remove all the other calls to charm stuff:
yeah
0.5 sometime, i believe.
getting it resumes it.
kinda.
stdin is a getter.
yeh.
i'll send you a pull req for charm in a second.
it's good for folks who don't understand why process.stdin.on("data", blah blah blah) doesn't work
lemme see if there's a workaround.
it's not as if you'd want to setRawMode on a file anyway
yep
but it does have to be a getter, since process.stdin has to return a stream, and that stream may have to be a file stream or a socket or a pipe
er, a file/pipe/tty, rather
wait a minute, it looks like it doesn't get resume()'d automagically..
yeah, i agree
fucking hate stdio.
it's not because it's being auto-resumed, i'ts because it's *not* being auto-paused.
seriously, it's a non-stop fountain of pain.
yes.
you can't pause it.
fixing in node.
0.7.5 or 0.6.12
i mean, they're very energetic, eager to please, etc.
you know, i feel like recruiters are really an untapped resource.
i bet, with the right combination of social pressures, you could convince them to help you move, clean your house, etc.
yeeessss!!
if 30 people don't buy those shirts, i'll pick up the rest.
oakland.js needs to happen
and way cheaper than most other tshirt places, since they have a guaranteed volume
it's pretty brilliant
yeah
there are a few that exist.
yeah
it's like subshells stack
or (cd $otherdir; npm rebuild)(
subshell ftw!
:)
but according to the tap protocol, that's a comment
some tap harnesses interpret them in some special ways,
like 2000 characters long
the color's a bit backwards, it seems, though
the standard is t.equivalent(found, wanted)
was awesome
;)
since found is the "new" and wanted is the "old"
so i'd think a green means "your found thing adds something"
yeah, this is just my way of subtly getting you to take over node-tap
i'll cherry-pick :)
k
meh.
<-- in the ministry of information
enjoys altering the past.
i read git logs a lot.
it's nice to keep them easy for me to understand.
and to npm as 0.2.2
anyway, published to the master branch
thanks!
nice
;P
take care of yourself, man.
omg, i'm dumb.
AH SYMLINKS, MY OLD NEMESIS!
it's nice having perlers use your test framework
t.similar("asdf", /a[sd]*f/) passes now
they make good suggestions
If the CIA kept giving LSD to people, we wouldn't have this meth problem.
sweet
dolla dolla bill, y'all
*tests
it only tries to yaml-parse stuff that's indented and between the ... and ---
lines that look like tap lines will be perhaps interpreted as test.
the pattern is ^(not )?ok(\s+[0-9]+)?(.*$)
probably a bug
i have a test in node-tap that spews a bunch of moderately tap-like garbage at the parser.
i believe that test parsers should be like vultures.  digest anything without complaining.
openjsan is a joke.
seems like a lot of perl testers do that.
but several perlers who have converted to node now use node-tap and are quite vocal when it's wrong.
no, i don't use perl
it's worse when formats get specified non-retroactively, though.  don't get me started on xml ;)
see, this is what happens when under-specified "human readable" formats get specified retroactively.  don't get me started on globs.
hm.  that'd be really easy for node-tap to do.
:)
the train will take you through it
ah, that makes sense
since you're not going from sf
"Beware of sextortion, the vicious virus that will turn your computer into a mess of green binary!"
"sextortion" makes me think of http://en.wikipedia.org/wiki/Testicular_torsion
hahah
it's not bad!  it's medical! 
hm...
REDUCTIO AD INFINITUM!
#POOPIN
it'd be nice if it was JUST "poopin" though
not kwijibo
pkrumins, SubStack: nave requires bash
been busy with some other things
but it's like $10 or something to get from my house to SFO
i remember going from bronx to long island for $1.50 back in the day.  i hear it's like $4 now.
yeah, but even still.  it's $3 to go from 19th st to embarcadero
i enjoy spending money.
longs for his next sebbatical 
that's why i have a job with a paycheck and responsibilities.
MADE WITH REAL JESUS
foic
just as bad.
wow, can you imagine just how horrible it would be if the US actually split into USC and JesusLand?
and right next door!!
jesusland would be the scariest theocracy on the planet.
luckily, most religious people are lazy uncaring bastards.  i mean, if you believed -- i mean, *really* believed -- that gazillions of years of the worst possible torture was awaiting anyone who didn't believe, would you let the first amendment stop you?
i get them confused.
i like dandidate better.
is that mitt, or the poop one?
since most religious people seem to be generally nice, and not completely batshit insane, i kind of assume that most of them don't actually believe what they think they believe.
poopfoam is the really scary one, though.
right, mittens
it'd be great if someone could catch him in a compromising position with a male intern, just to completely discredit him, and make homophobia be perceived as the hazard that it is.
lol
that seems odd
wouldn't you want to see those?
"in order to protect you, and your electronic equipment, from criminal activity while in the bart system, please be aware of any and all suspicious behavior, and report any unattended packages to the bart police, station agent, or train operators"
HOW DOES THAT PROTECT MY ELECTRONIC EQUIPMENT FROM CRIMINAL ACTIVITY?!
ATTENTION STAFF: I HAVE A MICROPHONE.  IF YOU ARE ABOUT TO BOARD A TRAIN, YOU DO NOT HAVE THIS MICROPHONE.  THANK YOU.
john roderick's Rules for Living.
i'd like getting it earlier
(not nec in that order)
where are you now?
Weather for Oakland: Better than where you are, unless you are roughly due south of Oakland somewhere.
or in hawaii or whatever :)
SoBe is south beach
haha
like the iced teas
Maybe we could rebrand it as the North of San Leandro area!  NoSaLe!
er, adjacent
i learned when i lived in LA, there are two parts of the world.  Beverly Hills, and Beverly Hills Adjacent
it IS actually "Beverly Hills Adjascent", though
BPop sounds like a band of hip young teens who make catchy pop music to enrich their old fat exploiters.
retweet every tweet! https://twitter.com/nodejs/status/175692884320849920
lol
it'd be nice if windows could change to use / for paths
it's just not the default
that alone would prevent the lion's share of cross platform bugs
we convert things to /?/UNC/C:/ style paths for long filenames anyway
ever since i started using bert and igor as my main windows interfaces, i've liked it a lot better.
they're way friendlier than unix
bert == piscisaureus, igor == igorzi
they're wonderful human beings.
yeah
take on the awful that is windows :)
libuv in general is really very sane.
having worked with libev and libeio directly a bit, it's pretty nice.
very friendly
eieio_custom, eieio_open, eieio_fchmod, etc.
"
haha
i was reading a conversation between igorzi and bnoordhuis, and suddenly igorzi said "FUCK LAND I'M ON A BOAT MOTHERFUCKER
sometimes i accidentally switch rooms in limechat, and don't notice
has joined the dark side, mwahhhaha
   Identifier_opt ( FormalParameterList_opt ) [no LineTerminator here] { FunctionBody }
that's it
yep
np
nice!
just need to split and join with the prefix + " " instead of +,`,or |
yeah, it's not too hard.
just need to replace └ with `, and ├ with + and ┬ and ─ with -, and │ with |
sweet
or "archy": "git://github.com/substack/node-archy"
:)
or "archy": "git://github.com/substack/node-archy#tag-or-branch-or-sha-or-even-HEAD^^^"
yep
er, boolean type
or --unicode=false, which is the same in nopt if you have declared it as a binary type
yep
have patience
qv #node.js
yes.
"The server isn't responding... I KNOW, LET'S DDOS IT!!"
the thing about herds is that no matter how smart the individuals are, the herd is a moron.
hello
TWO FAILS!
but in fact, it should not match either of those
because a <p> can't contain block elements
it's highly contextual
neither can an h1
the semantics of html are such that you can't simply stream-parse it.
well, not quite "pretty easily", but yes, you can work around that
consider this:  <b>bold starts here <p>still bold</b> not bold</p> not p.
only xml has properness.
but you still need all the semantics of which elements can contain which other elements.
of course, your goal isn't to build a dom, but merely to select nodes, so it's a *bit* simpler
this information is encoded in the doctype definition document, but sax explicitly does not doanything with those.
neat!
thanks!~
I AM LITERALLY FORCING THESE WORDS TO BE YELLED INSIDE YOUR HEAD VIA THE POWERS OF MIND CONTROL!
note the shirt
w00t! https://img.skitch.com/20120320-a6ecicc3w6td3pq51bkp79dke.png
IT WILL BE AWKWARD
is wearing it now
will wear it until everyone around him forces him to change his shirt, which he won't do until he can get another oakland js shirt.
it's supposed to be "You are really doing great, Job."
You are reeeeaally doing great, Gob.  Juuuuuuusst GREAT.
and npm 1.1.whatever
but ok :)
and it would be a gigantic mistake to leave you as the owner of /Users
but i'm not sure from running mkdirp how many dirs i actually created
if i do `mkdirp("/Users/substack/.npm/pkg/version/package/lib/foo/")` for example.
actually, the contents of "package/" are written out by fstream, so that's already handled, but .npm/pkg ends up root-owned in a lot of cases.
and recursive chown is costly
i'm just going to have it return the first dir it actually made
er, saving every string
saving the string is a silly game.
in latin, there is no U
they had serifs, but only for fancy-pants letterings
U was invented later by people writing with pens, where curves are easier than straight lines
V is a sometimes-vowel
pronounced like W
i'm so happy that TCP bullshit was pulled from =>
o/
for node.js
marked is the most badass markdown parser.
ACHIEVEMENT UNLOCKED: JSCONF
*internally
yay
nice :)
hahah
you should write a module that turns normal sane modules into chainable things that read like shakespeare sonnets
regretting this already..
so like, instead of exports.foo(bar, cb), you'd have a('rose').by('any').other('name').should('smell').as.sweet(foo, cb)
speaking of crazy apis! check it: https://github.com/joyent/node/pull/3109
?
domain.create() returns a domain
yeah
intercept is to alleviate the if (er) return cb(er) repetition
which, granted, d.intercept(function(_, data) { ... }) is not much better, but at least it moves it out of the body
because it's been intercepted
but that changes the signature
so you can't just do d.intercept(cb)
yeah
because now the data will be the first arg to cb, and cb doesn't know it's being intercepted
for instance, you may use this cb in multiple places.
i pass around error-first callbacks a *lot* in npm.
or only intercept it sometimes, and not all the time
a few people have asked for it.  mikeal mentioned that it's a common error he makes, and he kinda knows what he's doing.
having the signature change would be hazardous
honestly, i'm not sure that d.intercept() is really all that valuable.
in such a way that there's some sort of context
the main purpose is to catch thrown errors, thoug
all fs operations get hooked into the active domain when the ReqWrap is created
and that domain is entered when MakeCallback gets called.
that's the beauty of it
yeah
yes
good idea
good note, thanks
that's why the first part of the pull req is a bunch of commits that organize MakeCallback usage, so that we always go through a single entry point
ahh, i see
right
the error basically just gets decorated with a link to the function that was bound
well, you do get a bit more data that way
with implicit binding, it's a bit trickier to figure out exactly what failed.
but the bar here is very low -- the intent is for someone to come along and rewrite this better in 0.9
it just has to be enough to prove the concept, be minimally useful, and not do harm.
that should also be documented better, i suppose
yeah
cuz fuckit
domain.x(function (er, data) { ... })
has 1000 colors of bikeshed paint ready and waiting
we should just call the method "x"
and just make it be the way you like
but that's the beauty of it.
or you could finally make it official and be a node contributor ;P
dude, i'm totally gonna write com.stack.sub
hahah
if you contribute to core, bnoordhuis maintains it for you.
(changing the subject)
hahaha
it'd be an awesome april fools' joke to publish it to npm, with a decidedly un-substack drawing attached (extremely realistic still life painting of something not at all interesting), and then change the npm metadata and tarball properties around so it totally looks like you wrote it
fs.readFile(file, Domain.getBindFunction().call(d.getInstance(), new Domain.Constants('EX_DOMAIN'), cb))
that's not safe
you can't just have d.instance be public
every domain is a singleton!
of a generated class!
provided by a factory!
hahahah!!
it's *easy* to fill 4 years of this shit.
man, you can really see why java is so popular in education.
yes!!!
and that's much harder
and then you have to teach software development
right
and learning how computers actually work is kind of a lot of stuff, too
yeah
where you actually just build a lot of programs, and then maintain them
yeah, like a BFA/MFA program
first year is fun cuz you crank out code.  second year is hellish because you have to maintain code that first years wrote.
work in groups, but not bullshit "small groups" stuff that they do in most educational programs, but like, "we don't care how you work together, but get it done"
also, it would be good to get multi-level groups and tasks.  so in the 4th year, you have 2 first-years on your team, and have to manage them.
s/in school/ever in their lives/
ha
i didn't even really know there was such a thing as source control when i was in college.
but i kinda figured that my educational tasks were not *completely* useless, and they mostly were.
i mean, i knew that there were these tools that teams used for big products and shit.
learning C was good
the "how computers work" bits were good.
but "you can solve most problems with a single program that you never touch again"?  completely misguided.
thanks
yeah, the docs and examples need to be much improved.
?
for reals
like, if the "generate xyz pages" isn't getting done fast enough, spin up a new xyz-page-generator bot
set a capacity level for each type of job, max/min workers, and then automatically just spin up new workers or shut them down as needed.
each local manager gossips to other managers about its capacity and queue
each role has a job queue, and a set of workers
the managers know about each other - there is no central registry
they are all the registry
you can have 10 machines, each with a manager and a bunch of workers
i'm describing my desires so that you know which modules to go make ;)
if there aren't enough plants to meet capacity, then it emails the human
yes, i know
so, the next obvious step is, i want to start establishing new plants on machines that other people own, without their knowledge.
yeah, exactly
all websites and apps shoudl be served by viruses
and, for that matter, without my knowledge.
from each machine according to its ability!
really hopes he's joking.
step 1 accomplished.
the emits are based on the *other* side writing
you might write 5 times, then get a single data event
whats happened with pause events on Stream now, thats gonna, I gotta implement my own pause and return false on the next write()?
but yeah, planning on buffering a little bit is a good idea
ideally, you can tell the upstream source to pause, as well, eg by returning false, not making another call to the underlying system interface, etc.
we plan to move a lot of this sort of stuff into core in v0.9
a buffering pause(), etc.
which is probably wise until at least the vision is somewhat matured
lunch time.  bbiab
it's not over 9000 yet.
what are you guys talking about?
    8994
$ npm search | wc -l
npm WARN Building the local index for the first time, please be patient
npm http 200 https://registry.npmjs.org/-/all
npm http GET https://registry.npmjs.org/-/all
and then have devs and users do that
as in murphy's law?
sure, but... it's all about cost/benefit
and dogfood the hell out of it
but have tests, and use that as a rachett, and fix bugs as they come up
dominictarr, dools: but, you WILL release bugs!
for something like node, or npm, or a website, fuckit.  just release bugs.  i mean, don't *try* to
the question is how big are they?
you are my QA :)
even right tests
oh, re-release
right
that's what tests are for
well, sure
hahah
if you have some architectural issue that you patch your way out of bit by bit, it ends up being much more costsly sometimes than just scrapping it, with the tests, adn re-doing it
what is this "house" stuff? ;P
it'd be nice if there was a bit more innovation around the AST tooling for JavaScript.
like, actually try to get the AST representations to a point where a person could reasonably be expected to type out a program that way
like, a lispy language that deterministically transforms to and from JS
so you could use it as an intermediate representation like uglifyjs does, but optimized a bit more for human consumption
then we could write macros that work on our js programs in a more clean way
which is sort of what burrito does, of course, but burrito is limited by the fact that uglify is somewhat less ergonomic than it could be
com.stack.sub Implements ModuleGeneratorFactory
and lets you easily automate the number of listeners, resizing them, doing graceful restarts, etc.
this uses the 0.8-style cluster module
MMM THIS MODULE IS DELICIOUS
hm... tako is making me rageful.
i think what i really want is just a router, and a templar, and no declarative magic.
like, no framework, at all.
or maybe it is.  but certainly it's been informative.
leaving... what?
the more i mess around with tako, the more i realize that every single feature of it should be ripped out and done as a separate thing.
but it's like, *insanely* coffee-scripty, and a ton of extraneous _ usage
i'm actually reducing the linecount by ripping out cs and _
 just compiled it and then cleaned up the js to be less awful
*node app
but tako is proving too opinionated for me.
i'm trying no framework at all.
oh, it'll be a node ap
I AM PUTTING MY MONEY IN MY MOUTH
no frameworks, and no modules that do more than one sort of thing
so to speak
so, i'm trying this new thing with the npm-www project
without a framework, there are no soda bottle light bulbs
devs work in the future.  users work in the past.
for most values of "devs" and "users
huh?
oic
and we're back :)
yep.  healed.
just that you're the only one who happened to notice
and only sporadic connectivity at that
and the nodes can gossip about which other nodes there are
it only needs connectivity to *some* member of the network
and re-broadcast any messages that *aren't* signed for them
take over the whole internet with your packets!
you rebroadcast on every interface your program is connected to :)
JUST use a network of drones that talk to each other, and via their interactions, figure out how to become the network the zygote prescribes.
don't use a seaport hub
but i can if it's too onerous for you
wait, really?
you sure it's not you from some earlier version?
try resetting the password
ok, i can post it
THERE ARE AT LEAST A GILLION THINGS WRONG WITH THIS PROJECT
:)
for shame!
and like something she's fond of doing, though she's calming down in her old age a bit.
i should set up a hanging toy + camera
aristotle's way awesomeer.
bah.
exactly
he's lazy, but he's got mad ups
just has a more patient owner, that's all.
not exaggerating
srsly, maru?
flying all day 17, in AR 18, 19, 20,21, flying back evening of 21->morning 22
's pary are with the father
lots her chrilden
The do indeed need to do way instain mother.
yahoo answers launched to such high hopes.
the only question it ever answered was, "The Yahoo! userbase isn't really as stupid as everyone thinks it is... is it?"
wikipedia shows: oligarchy is the best way to cratize knowledge.
what are the cool kids using to sign their SSL certs these days?
HAHAHAHahahah http://chrisdone.com/hj/
omg, this essay is awesome: http://www.primitivism.com/abolition.htm
it's exciting
the clouds of ideas are getting a little bit solidified.
because we get the money and stuff, but for playing.
eventually all work will be automated, all humans will be programmers, and all necessary programs will be written.
for fun and free.
for playing in specific ways.
then we'll just build software-as-art
yeessssss
that still leaves other endeavors, like parenting, and teaching, and counseling, and friendship.
the biggest blocker is war.
the up-side of mindless drudgery is that mindless drudges don't really spend much time digging up their childhood demons and anxieties.
when you remove force from human interactions, peaceful anarchy is not only possible, it's obvious.
mindful non-drudges have thoughts that are confusing and difficult, and they are capable and eager to care about such things.
of course, that's like curing the disease by cutting off the patient's head.
self-actualization is not something they have the desire for
psychologically, humans need engagement.
when you solve a problem, it doesn't result in a lack of problems, but an awareness of other, more interesting problems.
but, what I call "work" and what a factory-worker calls "work" are so different as to be incomparable.
the things that can't be automated are mostly things that shouldn't be, because someone would enjoy doing them.
in fact, the entire species of chickens are a bit sad and awful.
they're kind of gross.
that being said, i'm gonna bike around the lake and have some pig tacos and then get back to work :)
your children's children will say, "What's the big deal?  It's just a hamburger." and perhaps look down on us for having eaten morally repugnant non-vegan meat.
humans are terrible at this.
the worst opponents to any new advance are the very people who will be most benefitted.
YES!
was to do this exact task.
fun and games are not trifles!
fun and games lead people to spend all their time on things.
gamification is very deadly work, though.
it must be done carefully.
put another way, if you are playing a game where the goal is to make up games that get others to have as much fun as possible, winning becomes very important
you must make sure that it's what you want them to spend their time on
there are others' lives at stake!
very busy
yes
heh
and your crazy is way more interesting than _why's
i'm looking forward to SubStack's Poignant Guide to Node.js
well, ruby is pretty shit compared to node.
yeah
and we all know your name, so you'll never escapeit.
yes
take, just for a relatively localized example, you, me, and mikeal
there will always be spectrums of craziness, though
we're not far from one another mind-wise, but there's certainly differences.
and we're all relatively fun-seeking and post-work-ish in our occupations and our relationships with money.
but especially middle and high schools.
not the education, of course.
the real damaging aspects of school start around 4th or 5th grade, and get especially bad by 11th or 12th
the real way to make our society smarter, faster, and more crazy, is to get rid of the *schools*
kids aren't allowed to start being interesting until most of them are hopelessly unrecoverably broken.
sure
then they get to college and are still completely infantilized, so they just get drunk and catch stds
and there's some research indicating that it's useful for kids to go socialize with each other, and have to interact with other adults in structured ways.
but the benefits fall off quick.
younger kids need care, and parents ought not to shoulder the whole burden full-time if there are others willing to help out.
but their parents are too tired from doing pointless mind-numbing jobs to coach them properly, and the rest of society is set up to break them.
i mean, 12 year olds ought to be taking shit apart and hacking and reading philosophy and putting on concerts.
WONT SOMEBODY *PLEASE* THINK OF THE CHILDREN!?!?
it was on the news this mroning
i mean, ostensibly Joyent pays me for this, but it's not like they're gonna give a shit if i spend less time on the mailing list, and more time working on code.  they'd probably prefer it, actually.
i've written many many thousands of words on the subject, i dont' even know how many
(actually bryan has mentioned that he's in favor of a lot of community diplomacy type stuff)
but he's also a very forward-thinking boss.
so, i dont' think that a post-work society is necessarily post-corporation.
nor is it necessarily post-money
the Black essay is definitely not 100% right, i dont' think
at least, until there's enough automated value-creation that our basic needs actually are all just taken care of, wall-E style.
all government is group fantasy.
i'm not saying it's bad, necessarily.
some group fantasies are REALLY nice.
like, "You're not allowed to shoot your guns at isaacs or else bad things will happeen to you"
that's a good fantasy
(and, yes, i guess it is a semantic stopsign, as the word "emergent" is as well.)
it's the equivalent of saying that it happens as an emergent property of all the individuals each acting in their own interest according to the rules set up.
"No hitting"
"Pants must be worn in public"
at least, i like them.
i mean, *some* emergent properties of shared illusions are really kind of nice.
for better or worse, the capitalist money machine is a pretty effective way to get people to come up with lots of clever resource-generating activities
is writing his anarchy talk on twitter.
hooray!
oh?
tht's great.
because i'm fixing them by proxy :)
thanks
and there should be a fine for posting benchmarks without a license.
it's very sad.
there shoudl be a benchmarking license.
como estas, mis hombres?
hola
como se dice, "walrus"?
donde estan mas cervecerias?
1. skuttlebutt is a highly efficient mechanism.
2. it's a pretty good explanation of the other mechanisms that are less highly effcient, but also worth knowing and thinking about.
:D
that paper is good for two reasons:
pretty close to just doing the hand-rolled smf thing again...  it's pretty easy..
hm.
i'm open to moving all my configuration out of a config file and into a registry of some sort.
(albeit a cluster of a few different actual http servers, sharing a single socket.
but it seems a bit silly to use a service registry for the npm website, since it's only ever going to be exactly one instance.
so, fleet seems like overkill
maybe i need to write a fleet-like thing called speedboat, for just a single instance.
but do the same kind of thing: push some code with propagit, maybe push some config along with it
so it'd be a hub and one drone?  i dunno, though.  seems excessive.
;P
extraneous
if there's enough to read, it's not boiled down enough
not a "deck"
and only for educational purposes :)
just the strtotime function, though
in #Node.js
hello!
.deepEqual etc
can that be done in .equivalent and friends?
hm.
i see
oh! you mean you just added buffer logic there
sorry, i just woke up, i'm on grown-up time ;P
yes
seems like the important bit there is skipping the .parent member
actually, it'd be nice if that was just non-enumerable or something
because you'll compare the whole parent slab
no
that's what i'm saying
that's why a normal deepEqual wont' work
oh, of course :)
spoiler alert: The single most important metric in predicting software quality is line count, regardless of language.
stdin error in worker { [Error: read EBADF] code: 'EBADF', errno: 'EBADF', syscall: 'read' }
coco tanftalk
coco tata nflk
must finish tacoconf talk
sorry
tanf coco talk
almost certainly
i think it uses stdin for the ipc
i'm resorting to randomly rearranging letters symmetrically
yep.
but whatever, that's gonna be a lot simpler in 0.8 anyway
they have some strong feelings about how they absolutely must have node-core ipc in it
yeah, i don't know why they do that
i think it might make the most sense to do built-in fork/cluster IPC using fd=4
(one of the "fancy stdio" use cases)
4 is already used for start.d or some shit
i kinda thought we already put the channel on fd 3 though...
maybe i'm confused
oh, or 3 i mean
along with cluster?
didn't it debut in that version?
well, fork is kind of experimental in 0.6
stable = api backwards compatibility will be preserved, but if underlying things move around, funky edge cases may break.
yeah, it is function-level, if there's a thingie on the functino
4 = api locked - will not even add to this api, it's locked, 5 = locked - we will not touch this code without damn good reason
sure
ENOUGH OF THIS HARD LISTENING
I AM ALMOST DONE WITH THIS TALK
IT MAKES SENSE BECAUSE THE JVM IS FASTER!  I PUT KETCHUP ON MY BANANAS!  WHERE AM I?
WITH IT I SHALL HAVE A GLASS OF TASTY YELLOW FANTA
when people say that their library is "like xyz on steroids", do they mean that it grows boobs and punches you?
this is such a disturbing blend of disturbing and cute.
the humor hit rate by replying to caps with other caps is just too high.
hahah
hehe
that's a problem.  pull req coming
probably queens or brooklyn are the oakland of nyc
because you can still crash it by nc'ing garbage at it.
no special handling for HTTP messages
that is, this connection is busted, shut it down.
so, i'm just gonna be like, "That's not json!  socket.destroy() for you!"
if that sounds cool to you, then i've got a patch for you
new Error('Could not create a stream with this information ' + JSON.stringify(
or just don't JSON.stringify in error messages
"GET / HTTP/1.1\r" <-- not valid json
exactly
good evening
whoa, neato
is enjoying some drugs and icepacks
design flaw
they put too many teeth in there
the problem is that we got too good at living before evolution had a chance to make it suck less.
well, enough of us are supposed to live long enough
but at least we have surgery and drugs and ice packs.  poor elephants just grind down their teeth and then starve.
now when i try it again, it says "up to date" and hangs
so.. at least git thinks that the code is there
i think it may make more sense to use propagit directly
but in my case, what i really want is just to exec a command, and that's it.
or maybe even just pushover, and kinda roll my own drones that connect to the hub with upnode
so then, each of the drones could just have a pushover server, and whenever they get a push, they run the tests, and they can all connect to the hub with upnode just to tell it that they exist.
but cloning it takes a long time.  pushing to an empty repo
checking out node takes a pretty long time.
er, checking it out isn't slow
heh
it's got a huge amount of history
yeah, doing this with fleet is silly.
hooray for headaches and pain killers, making me less clever so that simpler solutions can be found!
the problem with software is that so many programmers are so smart.
oic
ahh, i get it
rather than repos.listen() or whatever?
hmm....
so... i could even have the hub use a client key over https, and require authentication
thanks for hte tips.  g'nite.
yes.  this is a good weekend project
basic auth should just work
if i curl that url, it sees the header
lemme try sending a 401 if it comes in without auth.
yeah, then git says "fatal: Authentication failed"
aha, git wants a WWW-Authenticate header with a 401, or else it doesn't send auth
now to build the hub
two drones up and running.  this is rad.
pushover
good shit
the first pass here is just focused on being a node tester, but i could see this being useful more generally, if some of the specifics were abstracted out
yes!
yes, i saw that :0
it's not even a prototype yet, really
yeah, npm-www needs some cleanup for sure
oic
sounds interesting :)
i suspect that you'll end up seeing some patterns emerge that may be englightening
the child calls callresp(mesg, callback)
the parent handler gets the message and a callbakc.  when the parent calls teh callback, the message gets returned to teh child
i need the parent to do npm fetch operations, so that they don't clobber one another
it's actually used to un-distribute work load in my case
since there's only one cache
that's important :)
you define some models, then later, have a callback once all the models are loaded.
(because slappy's an mc, and i had the idea for this while in oakland riding my bike)
i was gonna call it slappy, but it was too much of a stretch
if what you need is a knife, sometimes it's better to have just a knife, and not a thing that is also a can opener, hacksaw, nail file, and eyeglasses.
and let me know when it's loaded
but in this case, i want a way to say "get me the login" and haev it always do the same thing
:D
yes
like, for instance, Array.prototype.join
(sorry for the html3.2 design on those profile pages)
add some stuff there, please
login with your npm creds
i need to pull npm's logger out
replace it with a standalone thign
it is the glue that keeps the npm katamari rolling over my sanity
i like my modules to be a bit more artisanal
stoopid is actually very close to what i need
with plugins
am i doing it wrong?
but it's not configurable in the way i need.
but it's just so fiddly
and it's very very tied to npm itself.
but, it's not good.
it sort of grew organically
yes.
yes.  but also, if there's an error, it actually holds onto all that data, so that it can write it to npm-debug.log and then the user can give me the silly-level logs, even if they didn't realize that they would need them
BECAUSE THERE ARE NOT ENOUGH LOGGING MODULES IN NPM, APPARENTLY
EXACTLY THAT IS WHAT I AM SAYING IT IS FEAR THAT DRIVES US
and the code that uses it is very tied to it
i'm just gonna write it
so i can't pull out other bits until this glue is cleaned off
yes, definitely
and probably never will
but just never built that.
i've always wished to have status bar style logging for http reqs, too
yeah
charm?
i'm probably going to use https://github.com/TooTallNate/ansi.js
multimeter probably can do it, but it must play nice with the bazillion other logs flying around meanwhile
oh, i see
yeh
tootallnate is using taht in node-gyp, and npm uses node-gyp, so it seems nice to have them share.
Huzzah.  `npm install npmlog`
too late for integration, though.  that'll wait for tomorrow.
MODULE ALL THE THINGS!
this feels so good: https://github.com/isaacs/npm/commit/65d4ea7af5dd014d840ed44f67d9ed496884e2e0
:D
had to force-push
that got accidentally in another commit
unfortunately
now the remaining chunks of npm will start to fall away from the bone like delicious carnitas that's been stewing all day.
who wants tacos?
downtown oak you say
i've been thinking about carnitas all morning and put off lunch until after the npmlog refactor was done
goosebumps.
omg, literal douche chills
so embarrassing
that ndc thing.  jesus.
that's so bad.
basically everything i did yesterday took 2-3x as long as i thought it would :)
i got kind of sidetracked.
kewl
please tell me it wasn't like this.
then jitsu would look eerily similar to npm ;)
you guys should use npmlog for the cli
*holding all the npm utils
ya
;)
see?
but i'm not sure it's the whole story
more like an introductory chapter
which sounds useful
i dont' think we're going to find the answer without actually doing it.
what i really want is a way to pull in stuff like this, with other data as well, and iterate on the calculations to find the best thing
yes, you should think it through
k
Man, 16-space indents *really* force you to rethink a lot of thigns.
nesting just is not possible.
since it feels so uncrowded already
but with this, that just seems too spread out.
it was trippy.
i recommend trying 16-space indent on the next little module you write.
you'll learn a lot about the world and about yourself.
i just wanted to try it.
hm.
it's javascripty
or something
right
though i'm sad to add yet another config file
and jsonish
yeah
right
and then it should fold into npm pretty nicely
maybe come with a default one to use if the conf'ed isn't found?
so, my suggestion would be: use the "read" module to do the prompting, and just make the file location configurable
we can figure out where it goes later.
some people do like it the way it is
for example, I do this a lot: https://github.com/isaacs/minimatch#readme
and want the desc to be "A minimal matching utility."
It's a shame that .git/description isn't used more widely
it'd be cool if that could set the github description, and also if setting the github description caused that file to be updated
roughly 100% of repos are "Unnamed repository; edit this file 'description' to name the repository."
then the pkginit could read it
if all your'e going to do is run it
bah.  json has formatting already ;)
it should just stomp on the formatting, and output JSON.stringify(obj, null, 2)
i just got my own test working, too ;)
love it
promzard and prompter are test-equivalent
i wanna let you pass in a stdin and stdout stream
sweet
and have it only do the raw mode switch if stdin === process.stdin
and it's not actually a stream
but you don't need to switch those often
kind of a stretch
yeah... i guess
messages belong on stdout
read(1)
they're normal output
and, really, no, it isn't a stream.  the "output" is an object, and the "input" is a config file and a keyboard.
it's a different kind of thing, which is ok.  not all data things are streams.
most of them, sure.
but like, ok...
hmm...
i am a bit cli-biased.
seeing as how i am intending to use this in a cli program
where do the "prompts" come from, then?
you have req.pipe(s).pipe(res)
where does it write "name: " to, and where does it read it from?
you can treat the req as stdin, but what's your stdout?
where it opens up fd=4 for prompts, and reads on fd=6 for the password and other insanity
you know that this leads to the orgy of fd's we see with pgp, qmail, and others, right?
:D
it'd definitely be nice to do something like:  stdin.pipe(new PromZard(file)).pipe(stdout) and have it DTRT
well, i do not prefer to have tests that hijack stdin, or are forced to run in a child proc, though of course that's a good thing to also test.
(er, prompt output)
and dump the data to stdout, rather than the prompts.
maybe its pipe() method could check to see if it's piping to stdout, and if so, write the prompts to stderr
or just make the prompt input a separate arg
the PZ object could listen to its own "pipe" event and if the incoming is not stdin, not do the tty.setRawMode, too
it's just "how you do things"
cat input.json | promzard > output.json  like that?
if so, then I have to do some magic shit like var input = new Socket(); input.open('/dev/tty')
hmm.
maybe i could create a pipe_wrap.Pipe() and have it open 0
very unix-specific and unportable
that's too hard.
yeah, i'm not going to take the file on stdin.
and it checks if stdin is the input, and does raw mode if so, and if stdout is the output and also the dest, then it changes the prompt output to stderr
and those will both do the right thing
or to dump the data to stdout:  process.stdin.pipe(new PromZard('input.json')).pipe(process.stdout)
so in the normal case:  process.stdin.pipe(new PromZard('input.json')).pipe(fs.createWriteStream('output.json'))
or you can set the promptStream explicitly
but i think emitting the data as json is actually a better fit for the use case i have (ie, npm init)
the other option is to have the pipe dest be the promptStream, and instead of emitting a data event with the data, instead emit a "result" event with the result.
?
storage part of npm?
cartridge?
i'm not following
npm will read the promzard config from --initconfigfile which will default to ~/.npminitrc
you'll mkdir project; cd project; npm init (answer some questions) and then have a package.json file
*like it does now
but, it'll also have to check for an existing package.json file, set that as the ctx, and also merge in the new data with the old
or to some built-in reasonable default that makes it work like it does not
so that if you have something like "my-special-field": "foo" we don't stomp it
and so that version will default to "1.2.3" if that's the current version, rather than alwasy being 0.0.0
i was just spelling it --initconfigfile
oh, and then it creates the folder?
oic
well, you can still do that
which is kind of long and awful
but making it a positional arg is fine.  init doesn't take pos args now, so it's not gonna break anythign
sure, or maybe the name of a file in a folder somewhere
sure, or that
~/.npm/initdir/
just divided by zero in his pants
that's all very npm-specific stuff which belongs in npm, not in promzard, of course
sure
sure.
that'd be really neat.
yeah
also, people ask like crazy for this, and since i've been actually using node and npm to build a website lately, it's been *severely* annoying me.
it's crazy.
people have such a high tolerance for pain.
and i'm typing the same stuff over and over.
starting a project is like 5 commands too many
and if they enter MIT or BSD as a license, download it to a LICENSE file
downloading the lic is probably excessive...
i'm gonna default a build script for coffee-script users.
ok, i'm getting kind of insane on this...
right
i'll have a thingie for your review soon
like, instead of { ... }, your file has (function () { doo stuff.  return {...}})()
ok, yeah, this stream stuff in promzard needs to go.
it's too much of a kludge.  someone can wrap it in a stream if they want.
oh no, religion on twitter.
FUCK ME.
why can't i look away?  i'm so weak and easily trolled by amateurish epistemologies.
i'm probably ready for tacos, actually.  thinking mi rancho?
or less, i suppose.
or some other place?
with the vampiro?
xolo is that one uptown, yea?
SubStack, maxogden^
k, leaving in 15 mins
it's like the one feature you probably use from screen
unless you actually do terminal multiplexing with it
you should check out dtach
it's not a multiplexer, though, even a little
you give it a command and a socket, and it'll run it connected to that socket.
you connect to the socket, and you're connected to the session
it's like there's two of me
wait, that was weird.  switched to the wrong window and it had reconnected under a different name
me
opme?
he
hey
you should get chanserv in here.
it says it's registered to you
yeah, but chanserv isn't in here
oh, wait... no.
that's not how it works.
ah, ok, you need to set O, not o
+o lets you ask for op
msg chanserv flags #thenodefirm isaacs +O
that was me :)
that^
+O makes you op automagically on join, i believe
btw ryan said he's not even slightly interested in being in the node firm, but he agrees it's a good idea :)
is there a way to make a room invite-only?
+A - Enables viewing of channel access lists.
actually, you only need to give me +F
maybe thats it?
sure
that's "full founder access"
feels a rush of power
ie, it's effectively registered to me as well
like, is that a good thing
the question is whether we want it to be private or not, though
wooooo!!
but whatever, it's just another channel to lurk in :)
i don't see this thing as really being time-intensive enough to justify irc, really.
yeah, good call
i could put ircretary in here if you'd like to have her take notes on certain subjects
actually, that's a #node.js subject, probably
k
like, ya know, a website type thing
why not just have a node server that talks to the couchdb?
i need an LRU cache of the most recent data i've fetched, so that i'm not taxing the DB too much or taking up a lot of memory
i need to serve html, mostly
that doens't take a long time
why does the server need to untar anything?
why does the website need to untar anything?
k
i see
the last time that happened was because of a package named "error", and that was an npm client bug, not a server bug.
well... individual packages tend not to fuck up everythign.
and replace the update function with a single atomic PUT?
but i mean, why not just do that with the validate_doc_update function?
right
i just think it's simpler, if we're going to make changes to npm's server, to make the registry be a more couchey couch, and the website a pretty traditional website.
i mean, i can see the use-case for banzai, absolutely
right... but npm's server doesn't do that.
but that'd be like a background task that generates content for the primarily-html-serving website
it might be good to have some banzai stuff to run tests and generate docs or whatever
and you could have that be a separate service, so if it crashes, you don't lose any web sessions,  etc.
fetch the tarball, unpack it, convert markdown to html, dump the html output in a folder or something for the website.
right
totally
even though the website will absolutely have to talk to couchdb directly for some things
so it's great that someone already built it :)
so, i'd kind of planned to have something like that running between the registry and website anyway
see, if you tried that, i'd just ghost your ass.
you'd be all, "oh, no, i's been disconnected by nickserv..."
commute time.
mwahahaha!!
the help and documentation are virtually nonexistent.
she won't repeat the same message twice, that's why
haha
no, she doesn't.
they're not related :)
i have "/msg ircretary notes" as a login command in limechat.
ircretary is definitely female.
(that's a no...)
eyah, i saw
i'm not really sure.
:D
i should tell ircretary to stop watching that word
man, people mention npm a LOT
dscape, dshaw_: what's the difference between "partner" and "founder and partner" in the bios on the website?
not miffed about not being a founder, since i didn't found anything really, just curiou
s
i se
i see
:)
but anyone added from here on is not a founding partner but just a partner?
i think i get it
they're both playing on the assemble-able box metaphor
:)
anyway, yeah, i live here.
oh, no problem.
so i'll be in town for a while :)
crowdfounding?
brb
yo
kewl
ah, ok
so it's like, an hour until beer o'clock?
(just north of soma)
been a very very long day.  lots of things need to get done before nodesummit, which i'm realizing is next week.
i might have to bail, too, actually.
np
or at lesat, can't stay out too late.
yeah, i'm ready whenever.  in fidi right now.
heroku is 321 11th St?
considering bailing
sorry man.
sure.  i can head down that way now, but might not have much time before your thing at 6
tell me about it!
yes, definitely.
and not bs meetings, either, like, serious big deal figuring stuff out and organizing lots of moving parts type things.
one of those days where you wake up into a meeting, and then when the dust settles, it's 6pm
3pm EST, noon CA time.
get your ticket tomorrow for jsconf
yeah
nice.
feels entitled to do this, having spent all day calling, emailing, faxing representatives, and getting others to do the same.
a lot of sites are doing this.  have you seen wikipedia?
the protest is just today.
(if a bit sad)
dude, props on herpderpedia.
nice pic for it, too
that is hilarious.
it looks a bit like jimmy wales going "DRRRRR!!"
rather than read the answer.
the sad thing is that everyone is taking the time to tweet "What wikipedia protesting!? Y its not workin i need to write my school raport onoes!"
but when travis redirects to the #!/blah/blah, you have to put it to the *left* of the #
so it's a bit fiddly
retweet every tweet! https://twitter.com/#!/nodejs/status/160210072805453824
Is this a known issue?  Running 'new Error("foo").stack' on solaris systems hangs forever.
Next we need to get libuv bindings into php, then configure it to run the javascript directly instead of going through a php script.
is it necessary to use Local<Value>::New(..) for Null() and Undefined()?
Is there any way to "simulate" a thrown exception in C++, such that a TryCatch will catch it?
Anyone have any idea when we'll see ()=>{} functions in v8?
so tired of forgetting to .bind(this)
